/* §section Continuations */

struct ace_cont {
    enum {
        gsbc_cont_update,
        gsbc_cont_app,
        gsbc_cont_force,
        gsbc_cont_strict,
        ace_stack_ubanalyze_cont,
    } node;
    struct gspos pos;
};

struct gsbc_cont_update {
    struct ace_cont cont;
    struct gsheap_item *dest;
    struct gsbc_cont_update *next;
};

struct gsbc_cont_app {
    struct ace_cont cont;
    int numargs;
    gsvalue arguments[];
};

struct gsbc_cont_force {
    struct ace_cont cont;
    struct gsbco *code;
    int numfvs;
    gsvalue fvs[];
};

struct gsbc_cont_strict {
    struct ace_cont cont;
    struct gsbco *code;
    int numfvs;
    gsvalue fvs[];
};

/* Re-build ace_stack_ubanalyze_cont from acme by selecting the below and piping through >mdltype2c : */

#ifdef mdl
interpreted stackframe ubanalyze {
    conts :: list[bco];
    fvs :: list[gsvalue];
};
#endif

/* ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ */
/* Auto-generated by mdltype2c */
/* Do not change if West Baiýan Naval Intelligence knows where you live */

struct ace_stack_ubanalyze_cont {
    struct ace_cont cont;
    int numconts;
    int numfvs;
};

#define ACE_STACK_UBANALYZE_PUSH(pcont, a_pos, thread, nconts, typcont, nfvs, typfv, badreturn) do { \
    if (!((pcont) = (struct ace_stack_ubanalyze_cont *)ace_stack_alloc(thread, a_pos, sizeof(struct ace_stack_ubanalyze_cont) + (nconts) * sizeof(struct gsbco *) + (nfvs) * sizeof(gsvalue)))) badreturn; \
    (pcont)->cont.node = ace_stack_ubanalyze_cont; \
    (pcont)->cont.pos = a_pos; \
    (pcont)->numconts = (nconts); \
    for (i = 0; i < (nconts); i++) ACE_STACK_UBANALYZE_CONT(*(pcont), i) = (typcont); \
    (pcont)->numfvs = (nfvs); \
    for (i = 0; i < (nfvs); i++) ACE_STACK_UBANALYZE_FV(*(pcont), i) = (typfv); \
} while (0)

#define ACE_STACK_UBANALYZE_CONT(cont, i) (*(struct gsbco **)((char*)&(cont) + sizeof(struct ace_stack_ubanalyze_cont) + (i) * sizeof(struct gsbco *)))

#define ACE_STACK_UBANALYZE_FV(cont, i) (*(gsvalue*)((char*)&(cont) + sizeof(struct ace_stack_ubanalyze_cont) + (cont).numconts * sizeof(struct gsbco *) + (i) * sizeof(gsvalue)))

#define ACE_STACK_UBANALYZE_BOTTOM(pcont) ((void *)((char*)(pcont) + sizeof(struct ace_stack_ubanalyze_cont) + (*(pcont)).numconts * sizeof(struct gsbco *) + (*(pcont)).numfvs * sizeof(gsvalue)))

/* ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ */

/* TODO: Move to mdl */

#define ACE_STACK_UBANALYZE_CONSTR(thread, cont) (*(int*)((uchar*)(thread)->stacktop - sizeof(gsvalue)))
#define ACE_STACK_UBANALYZE_NUMARGS(thread, cont) (ACE_STACK_UBANALYZE_CONT(*(cont), ACE_STACK_UBANALYZE_CONSTR(thread, cont))->numargs)
#define ACE_STACK_UBANALYZE_ARGS_SIZE(thread, cont) ((1 + ACE_STACK_UBANALYZE_NUMARGS(thread, cont)) * sizeof(gsvalue))
#define ACE_STACK_UBANALYZE_ARGS(thread, cont) ((gsvalue*)((uchar*)(thread)->stacktop - ACE_STACK_UBANALYZE_ARGS_SIZE(thread, cont)))

/* §section ACE Stack manipulations */

struct ace_cont *ace_stack_alloc(struct ace_thread *, struct gspos, ulong); /* Deprecated */

struct gsbc_cont_update *ace_push_update(struct gspos, struct ace_thread *, struct gsheap_item *);
struct gsbc_cont_app *ace_push_app(struct gspos, struct ace_thread *, int, ...);
struct gsbc_cont_app *ace_push_appv(struct gspos, struct ace_thread *, int, gsvalue *);

struct ace_cont *ace_stack_top(struct ace_thread *);

void ace_pop_update(struct ace_thread *);

int ace_stack_post_gc_consolidate(struct gsstringbuilder *, struct ace_thread *);

/* §section Global Script Closures & Indirections */

void gsheap_lock(struct gsheap_item *);
void gsheap_unlock(struct gsheap_item *);

void gsblackhole_heap(struct gsheap_item *, struct gsbc_cont_update *);

void gsupdate_heap(struct gsheap_item *, gsvalue);
gstypecode gsheapstate(struct gspos, struct gsheap_item *);

/* §section Global Script Run-time Errors */

void *gsreserveerrors(ulong);

struct gserror *gsundefined(struct gspos);

void gspoison(struct gsheap_item *, struct gspos, char *, ...);
void gspoison_unimpl(struct gsheap_item *, char *, int, struct gspos, char *, ...);

/* §section Global Script Implementation Errors */

void *gsreserveimplementation_failures(ulong);

/* §section Records */

void *gsreserverecords(ulong);

/* §section Field extraction thunks */

gsvalue gslfield(struct gspos, int, gsvalue);

/* §section Constructors */

void *gsreserveconstrs(ulong);

/* §section API Primitives */

void *gsreserveeprims(ulong);
