	.document

	.data

	.cast	_ep.in	_real.entry
_real.entry	.closure	_real.entry_c

_sp	.closure	_sp_c
_eol	.string	\n
_file	.string	file
_directory	.string	directory

	.code

_real.entry_c	.eprog	ibio.prim	ibio
ibio.prim.iport	.tygvar
ibio.prim.oport	.tygvar
rune.t	.tygvar
_real.entry_as_c	.subcode
_real.entry_st_c	.subcode
_real.entry_s_c	.subcode
_real.entry_body_c	.subcode
i	.larg	ibio.prim.iport	rune.t
o	.larg	ibio.prim.oport	rune.t
as	.bind	_real.entry_as_c
st	.bind	_real.entry_st_c	|	as
s	.alloc	_real.entry_s_c	|	st
	.body	_real.entry_body_c	|	o	s

_real.entry_as_c	.expr
ibio.prim.env.args.get	.gvar
	.yield	ibio.prim.env.args.get

_real.entry_st_c	.expr
list.t	.tygvar
_string.ty	.tygvar
_real.entry_st_k	.subcode
list.t.out	.cogvar
as	.fv	list.t	_string.ty
	.force	_real.entry_st_k
	.coerce	list.t.out	_string.ty
	.enter	as

_real.entry_st_k	.forcecont
list.prim.u	.tygvar
_string.ty	.tygvar
list.t	.tygvar
ibio.prim.t	.tygvar
ibio.dir.t	.tygvar
_real.entry_st_k_fn_c	.subcode
ibio.file.stat.prim	.gvar
as0	.karg	list.prim.u	_string.ty
	.analyze	as0	:	nil
		.case	:
a		.fkarg	0	_string.ty
as1		.fkarg	1	list.t	_string.ty
fn			.alloc	_real.entry_st_k_fn_c	|	a
			.app	fn
			.enter	ibio.file.stat.prim
		.case	nil
			.undef	ibio.prim.t	ibio.dir.t

_real.entry_st_k_fn_c	.expr
list.t	.tygvar
rune.t	.tygvar
ibio.file.name.read	.gvar
a	.fv	list.t	rune.t
	.app	a
	.enter	ibio.file.name.read

_real.entry_s_c	.expr
ibio.dir.t	.tygvar
_real.entry_s_k0	.subcode
st	.fv	ibio.dir.t
	.force	_real.entry_s_k0
	.enter	st

_real.entry_s_k0	.forcecont
ibio.dir.u	.tygvar
_real.entry_s_k1	.subcode
bool.t.out	.cogvar
st0	.karg	ibio.dir.u
b	.field	mode.directory	st0
nm	.field	name	st0
	.force	_real.entry_s_k1	|	nm
	.coerce	bool.t.out
	.enter	b

_real.entry_s_k1	.forcecont
ibio.file.name.t	.tygvar
bool.prim.u	.tygvar
rune.t	.tygvar
ibio.file.name.print	.gvar
list.<>	.gvar
_eol	.gvar
list.:	.gvar
_sp	.gvar
_file	.gvar
_directory	.gvar
nm	.fv	ibio.file.name.t
b0	.karg	bool.prim.u
nm.s	.apply	ibio.file.name.print	|	nm
s2	.apply	list.<>	rune.t	|	nm.s	_eol
s1	.apply	list.:	rune.t	|	_sp	s2
	.analyze	b0	false	true
		.case	false
			.app	_file	s1
			.enter	list.<>	rune.t
		.case	true
			.app	_directory	s1
			.enter	list.<>	rune.t

_real.entry_body_c	.expr
ibio.prim.oport	.tygvar
rune.t	.tygvar
list.t	.tygvar
ibio.prim.write	.gvar
o	.fv	ibio.prim.oport	rune.t
s	.fv	list.t	rune.t
	.lift
	.app	o	s
	.yield	ibio.prim.write	rune.t

_sp_c	.expr
rune.t.in	.cogvar
sp	.rune	\s
	.coerce	rune.t.in
	.lift
	.yield	sp

	.coercion

_ep.in	.tycoercion
ibio.m	.tygvar
rune.t	.tygvar
record.empty	.tygvar
	.tydefinition ibio.m	rune.t	rune.t	record.empty
