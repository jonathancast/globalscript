#calculus: gsdl.string-code 0.6

	.prefix

	.data

mdl.syntax.whitespace	.closure	_mdl.syntax.whitespace_c
_mdl.syntax.whitespace_ws.re	.regex	[\s\n]*

mdl.syntax.keyword	.closure	_mdl.syntax.keyword_c

mdl.syntax.id	.closure	_mdl.syntax.id_c
_mdl.syntax.id_re	.regex	§§*	mdl.syntax.id.init.char.re	mdl.syntax.id.cont.char.re

mdl.syntax.id.init.char.re	.regex	[a-z]
mdl.syntax.id.cont.char.re	.regex	[a-z_]

mdl.syntax.keywords	.list	string.t	_mdl.syntax.keywords_api.s	_mdl.syntax.keywords_interpreted.s	_mdl.syntax.keywords_prim.s	_mdl.syntax.keywords_stackframe.s
_mdl.syntax.keywords_api.s	.string	api
_mdl.syntax.keywords_interpreted.s	.string	interpreted
_mdl.syntax.keywords_prim.s	.string	prim
_mdl.syntax.keywords_stackframe.s	.string	stackframe

mdl.syntax.semi	.closure	_mdl.syntax.semi_c
_mdl.syntax.semi_semi.re	.regex	;

mdl.syntax.brackets	.closure	_mdl.syntax.brackets_c
_mdl.syntax.brackets_lbracket.re	.regex	\[
_mdl.syntax.brackets_rbracket.re	.regex	\]

mdl.syntax.braces	.closure	_mdl.syntax.braces_c
_mdl.syntax.braces_lbrace.re	.regex	{
_mdl.syntax.braces_rbrace.re	.regex	}

mdl.syntax.oftype	.closure	_mdl.syntax.oftype_c
_mdl.syntax.oftype_oftype.re	.regex	::

	.code

-- §section §gs{mdl.syntax.whitespace}

_mdl.syntax.whitespace_c	.expr
rune.t	.tygvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.whitespace_ws.re	.gvar
	.app	rune.compare	_mdl.syntax.whitespace_ws.re
	.enter	parser.match	rune.t

-- §section §gs{mdl.syntax.keyword}

_mdl.syntax.keyword_c	.expr
regex.t	.tygvar
rune.t	.tygvar
string.t	.tygvar
record.empty	.tygvar
parser.<*	.gvar
parser.match	.gvar
rune.compare	.gvar
parser.*>	.gvar
parser.neg.lookahead	.gvar
mdl.syntax.id.cont.char.re	.gvar
mdl.syntax.whitespace	.gvar
re	.larg	regex.t	rune.t
re.p	.apply	parser.match	rune.t	|	rune.compare	re
p1.2	.apply	parser.match	rune.t	|	rune.compare	mdl.syntax.id.cont.char.re
p1.1	.apply	parser.neg.lookahead	rune.t	string.t	|	p1.2
p1	.apply	parser.*>	rune.t	record.empty	string.t	|	p1.1	mdl.syntax.whitespace
	.app	re.p	p1
	.enter	parser.<*	rune.t	string.t	string.t

-- §section §gs{mdl.syntax.id}

_mdl.syntax.id_c	.expr
rune.t	.tygvar
string.t	.tygvar
_mdl.syntax.id_k_c	.subcode
parser.>>=	.gvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.id_re	.gvar
parser.fail	.gvar	-- Temp
re	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.id_re
k	.closure	_mdl.syntax.id_k_c
	.app	re	k
	.enter	parser.>>=	rune.t	string.t	string.t

_mdl.syntax.id_k_c	.expr
string.t	.tygvar
rune.t	.tygvar
record.empty	.tygvar
_mdl.syntax.id_k_p1_c	.subcode
parser.*>	.gvar
parser.neg.lookahead	.gvar
parser.match	.gvar
rune.compare	.gvar
mdl.syntax.id.cont.char.re	.gvar
parser.fail	.gvar	-- Temp
id	.larg	string.t
p0.1	.apply	parser.match	rune.t	|	rune.compare	mdl.syntax.id.cont.char.re
p0	.apply	parser.neg.lookahead	rune.t	string.t	|	p0.1
p1	.closure	_mdl.syntax.id_k_p1_c
	.app	p0	p1
	.enter	parser.*>	rune.t	record.empty	string.t

_mdl.syntax.id_k_p1_c	.expr
string.t	.tygvar
_mdl.syntax.id_k_p1_k	.subcode
bool.t.out	.cogvar
list.elem	.gvar
string.≡	.gvar
mdl.syntax.keywords	.gvar
id	.fv	string.t
	.force	_mdl.syntax.id_k_p1_k
	.coerce	bool.t.out
	.app	string.≡	id	mdl.syntax.keywords
	.enter	list.elem	string.t

_mdl.syntax.id_k_p1_k	.forcecont
string.t	.tygvar
bool.prim.u	.tygvar
rune.t	.tygvar
parser.*>	.gvar
mdl.syntax.whitespace	.gvar
parser.fail	.gvar
parser.unit	.gvar
id	.fv	string.t
b0	.karg	bool.prim.u
	.analyze	b0	false	true
		.case	false
unit.id			.apply	parser.unit	rune.t	string.t	|	id
			.app	mdl.syntax.whitespace	unit.id
			.enter	parser.*>	rune.t	string.t	string.t
		.case	true
			.enter	parser.fail	rune.t	string.t

-- §section §gs{mdl.syntax.semi}

_mdl.syntax.semi_c	.expr
rune.t	.tygvar
string.t	.tygvar
parser.*>	.gvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.semi_semi.re	.gvar
mdl.syntax.whitespace	.gvar
semi.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.semi_semi.re
	.app	semi.p	mdl.syntax.whitespace
	.enter	parser.*>	rune.t	string.t	string.t

-- §section §gs{mdl.syntax.brackets}

_mdl.syntax.brackets_c	.expr
parser.t	.tygvar
rune.t	.tygvar
string.t	.tygvar
parser.*>	.gvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.brackets_lbracket.re	.gvar
_mdl.syntax.brackets_rbracket.re	.gvar
mdl.syntax.whitespace	.gvar
parser.<*	.gvar
α	.tyarg	*
p	.larg	parser.t	rune.t	α
lbrace.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.brackets_lbracket.re
rbrace.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.brackets_rbracket.re
p3	.apply	parser.*>	rune.t	string.t	string.t	|	rbrace.p	mdl.syntax.whitespace
p2	.apply	parser.<*	rune.t	α	string.t	|	p	p3
p1	.apply	parser.*>	rune.t	string.t	α	|	mdl.syntax.whitespace	p2
	.app	lbrace.p	p1
	.enter	parser.*>	rune.t	string.t	α

-- §section §gs{mdl.syntax.braces}

_mdl.syntax.braces_c	.expr
parser.t	.tygvar
rune.t	.tygvar
string.t	.tygvar
parser.*>	.gvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.braces_lbrace.re	.gvar
_mdl.syntax.braces_rbrace.re	.gvar
mdl.syntax.whitespace	.gvar
parser.<*	.gvar
α	.tyarg	*
p	.larg	parser.t	rune.t	α
lbrace.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.braces_lbrace.re
rbrace.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.braces_rbrace.re
p3	.apply	parser.*>	rune.t	string.t	string.t	|	rbrace.p	mdl.syntax.whitespace
p2	.apply	parser.<*	rune.t	α	string.t	|	p	p3
p1	.apply	parser.*>	rune.t	string.t	α	|	mdl.syntax.whitespace	p2
	.app	lbrace.p	p1
	.enter	parser.*>	rune.t	string.t	α

-- §section §gs{mdl.syntax.oftype}

_mdl.syntax.oftype_c	.expr
rune.t	.tygvar
string.t	.tygvar
parser.*>	.gvar
parser.match	.gvar
rune.compare	.gvar
_mdl.syntax.oftype_oftype.re	.gvar
mdl.syntax.whitespace	.gvar
parser.fail	.gvar	-- Temp
oftype.p	.apply	parser.match	rune.t	|	rune.compare	_mdl.syntax.oftype_oftype.re
	.app	oftype.p	mdl.syntax.whitespace
	.enter	parser.*>	rune.t	string.t	string.t
