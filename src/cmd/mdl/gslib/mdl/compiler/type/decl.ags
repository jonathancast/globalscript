#calculus: gsdl.string-code 0.7
#type: prefix

	.data

mdl.compiler.type.decl	.closure	_mdl.compiler.type.decl_c	_mdl.compiler.type.decl_ty

	.code

-- §section §gs{mdl.compiler.type.decl}

_mdl.compiler.type.decl_c	.expr
mdl.file.decl.t	.tygvar
_mdl.compiler.type.decl_k	.subcode
mdl.file.decl.t.out	.cogvar
d	.larg	mdl.file.decl.t
	.force	_mdl.compiler.type.decl_k
	.coerce	mdl.file.decl.t.out
	.enter	d

_mdl.compiler.type.decl_k	.forcecont
mdl.file.decl.prim.u	.tygvar
parser.pos.t	.tygvar
diff.list.t	.tygvar
rune.t	.tygvar
string.t	.tygvar
_mdl.compiler.type.decl_res.ty	.tygvar
either.t	.tygvar	-- Temp
either.right	.gvar
mdl.file.decl.inline.header	.gvar
d0	.karg	mdl.file.decl.prim.u
	.analyze	d0	inline.c	inline.header
		.case	inline.c
pos		.fkarg	0	parser.pos.t
ds		.fkarg	1	diff.list.t	rune.t
			.undef	either.t	string.t	_mdl.compiler.type.decl_res.ty
		.case	inline.header
pos		.fkarg	0	parser.pos.t
ds		.fkarg	1	diff.list.t	rune.t
r			.apply	mdl.file.decl.inline.header	|	pos	ds
res			.lrecord	res	r	|	_mdl.compiler.type.decl_res.ty
			.app	res
			.enter	either.right	string.t	_mdl.compiler.type.decl_res.ty
	-- > :: either.t	string.t	_mdl.compiler.type.decl_res.ty

	.type

-- §section §gs{mdl.compiler.type.decl}

_mdl.compiler.type.decl_ty	.tyexpr
mdl.file.decl.t	.tygvar
mdl.compiler.type.m	.tygvar
	.tylift
	.tyfun	mdl.file.decl.t
	.tyref	mdl.compiler.type.m	mdl.file.decl.t

_mdl.compiler.type.decl_res.ty	.tyexpr
_mdl.compiler.type.m_res.ty	.tygvar
mdl.file.decl.t	.tygvar
	.tyref	_mdl.compiler.type.m_res.ty	mdl.file.decl.t
