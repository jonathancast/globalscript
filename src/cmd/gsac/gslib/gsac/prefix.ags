	.prefix

	.data

gsac.prefix.empty	.closure	_gsac.prefix.empty_c

gsac.prefix.typecheck	.closure	_gsac.prefix.typecheck_c

gsac.prefix.items	.closure	_gsac.prefix.items_c

gsac.prefix.item.name	.closure	_gsac.prefix.item.name_c

gsac.prefix.item.≡	.closure	_gsac.prefix.item.≡_c

gsac.prefix.item.fmtgs	.closure	_gsac.prefix.item.fmtgs_c

	.code

# §section §gs{gsac.prefix.empty}

_gsac.prefix.empty_c	.expr
gsac.prefix.prim.u	.tygvar
r	.record	|	gsac.prefix.prim.u
	.lift
	.yield	r

# §section §gs{gsac.prefix.typecheck}

_gsac.prefix.typecheck_c	.expr
gsdl.cgs.typeenv.t	.tygvar
gsac.prefix.t	.tygvar
gsdl.cgs.symbol.t	.tygvar
graph.scc.t	.tygvar
gsac.prefix.item.t	.tygvar
list.t	.tygvar	# Temp
order.total.t	.tygvar	# Temp
graph.dependencies.t	.tygvar	# Temp
graph.lookup.t	.tygvar	# Temp
_gsac.prefix.typecheck_k	.subcode
list.t.out	.cogvar
graph.tsort	.gvar
list.map	.gvar
gsac.prefix.item.name	.gvar
list.nil	.gvar	# Temp
scc.item.ty	.tylet	graph.scc.t	gsac.prefix.item.t
env	.larg	gsdl.cgs.typeenv.t
pr	.larg	gsac.prefix.t
ord	.undefined	order.total.t	gsdl.cgs.symbol.t
deps	.undefined	graph.dependencies.t	gsdl.cgs.symbol.t	gsac.prefix.item.t
get	.undefined	graph.lookup.t	gsdl.cgs.symbol.t	gsac.prefix.item.t
pr.items	.apply	list.nil	gsac.prefix.item.t
	# TODO: Data items
	# TODO: Type items
	# TODO: Coercion items
	# NB: No code items; those aren't roots as they aren't part of the public interface.  End NB
items	.apply	list.map	gsac.prefix.item.t	gsdl.cgs.symbol.t	|	gsac.prefix.item.name	pr.items
	.force	_gsac.prefix.typecheck_k
	.coerce	list.t.out	scc.item.ty
	.app	ord	deps	get	items
	.enter	graph.tsort	gsdl.cgs.symbol.t	gsac.prefix.item.t

_gsac.prefix.typecheck_k	.forcecont
list.prim.u	.tygvar
graph.scc.t	.tygvar
gsac.prefix.item.t	.tygvar
list.t	.tygvar
either.t	.tygvar	# Temp
string.t	.tygvar	# Temp
gsdl.cgs.typeenv.t	.tygvar	# Temp
either.right	.gvar
gsdl.cgs.typeenv.empty	.gvar
scc.item.ty	.tylet	graph.scc.t	gsac.prefix.item.t
sccs0	.karg	list.prim.u	scc.item.ty
	.analyze	sccs0	:	nil
		.case	:
scc0		.fkarg	0	graph.scc.t	gsac.prefix.item.t
sccs1		.fkarg	1	list.t	scc.item.ty
			.undef	either.t	string.t	gsdl.cgs.typeenv.t
		.case	nil
			.app	gsdl.cgs.typeenv.empty
			.enter	either.right	string.t	gsdl.cgs.typeenv.t

# §section §gs{gsac.prefix.items}

_gsac.prefix.items_c	.expr
gsac.prefix.t	.tygvar
gsac.prefix.item.t	.tygvar	# Temp
list.nil	.gvar	# Temp
pr	.larg	gsac.prefix.t
	.enter	list.nil	gsac.prefix.item.t

# §section §gs{gsac.prefix.item.name}

_gsac.prefix.item.name_c	.expr
gsac.prefix.item.t	.tygvar
gsdl.cgs.symbol.t	.tygvar	# Temp
it	.larg	gsac.prefix.item.t
	.undef	gsdl.cgs.symbol.t

# §section §gs{gsac.prefix.item.≡}

_gsac.prefix.item.≡_c	.expr
gsac.prefix.item.t	.tygvar
bool.t	.tygvar	# Temp
it0	.larg	gsac.prefix.item.t
it1	.larg	gsac.prefix.item.t
	.undef	bool.t

# §section §gs{gsac.prefix.item.fmtgs}

_gsac.prefix.item.fmtgs_c	.expr
gsac.prefix.item.t	.tygvar
fmtgs.printer.t	.tygvar	# Temp
it	.larg	gsac.prefix.item.t
	.undef	fmtgs.printer.t

	.type

# §section §gs{gsac.prefix.t}

gsac.prefix.t	.tyexpr
gsac.prefix.prim.u	.tygvar
	.tylift
	.tyref	gsac.prefix.prim.u

gsac.prefix.prim.u	.tyexpr
	.typroduct

# §section §gs{gsac.prefix.item.t}

gsac.prefix.item.t	.tyabstract	*
gsac.prefix.item.prim.u	.tygvar
	.tylift
	.tyref	gsac.prefix.item.prim.u

gsac.prefix.item.prim.u	.tyexpr
	.tysum
