	.prefix

	.data

parser.parse	.closure	_parser.parse_c
_parser.parse_work	.closure	_parser.parse_work_c	_parser.parse_work_ty
_parser.parse_work_symbol_:_unexpected_prefix.s	.string	Un-expected\s
_parser.parse_work_expecting	.closure	_parser.parse_work_expecting_c	_parser.parse_work_expecting_ty
parser.exec	.closure	_parser.exec_c

parser.map	.closure	_parser.map_c
parser.unit	.closure	_parser.unit_c
parser.<*>	.closure	_parser.<*>_c
parser.*>	.closure	_parser.*>_c
parser.<*	.closure	_parser.<*_c
parser.lift2	.closure	_parser.lift2_c

parser.fail	.closure	_parser.fail_c
parser.fail.msg	.closure	_parser.fail.msg_c
parser.<|>	.closure	_parser.<|>_c

parser.symbol	.closure	_parser.symbol_c
_parser.symbol_msg	.string	Un-expected\sEOF;\sexpected\ssymbol
parser.symbol.matching.bool	.closure	_parser.symbol.matching.bool_c

parser.match	.closure	_parser.match_c
_parser.match_worker	.closure	_parser.match_worker_c	_parser.match_worker_ty
_parser.match_worker_class	.closure	_parser.match_worker_class_c	_parser.match_worker_class_ty

parser.prim.<|>	.closure	_parser.prim.<|>_c	_parser.prim.<|>_ty

parser.prim.unit.plus	.closure	_parser.prim.unit.plus_c
parser.prim.fail	.closure	_parser.prim.fail_c
parser.prim.fail.msg	.closure	_parser.prim.fail.msg_c
parser.prim.symbol	.closure	_parser.prim.symbol_c

parser.err.fmt	.closure	_parser.err.fmt_c
_parser.err.fmt_col.sp	.string	:\s
_parser.err.fmt_parse.failure.s	.string	:\sParse\sfailure

parser.err.≡	.closure	_parser.err.≡_c

parser.err.fmtgs	.closure	_parser.err.fmtgs_c
_parser.err.fmtgs_simple.failure_prefix	.string	simple.failure\s

parser.err.simple.failure	.closure	_parser.err.simple.failure_c
parser.err.message.failure	.closure	_parser.err.message.failure_c

parser.rune.advance	.closure	_parser.rune.advance_c

parser.pos.fmt	.closure	_parser.pos.fmt_c
_parser.pos.fmt_eof.suffix.s	.string	:\sat\sEOF

parser.pos.≡	.closure	_parser.pos.≡_c

parser.pos.fmtgs	.closure	_parser.pos.fmtgs_c
_parser.pos.fmtgs_prefix.s	.string	〈\s
_parser.pos.fmtgs_file.s	.string	'file\s∝\s
_parser.pos.fmtgs_line.s	.string	'line\s∝\s
_parser.pos.fmtgs_col.s	.string	'col\s∝\s
_parser.pos.fmtgs_semi.space.s	.string	;\s
_parser.pos.fmtgs_suffix.s	.string	〉

parser.pos.initial	.closure	_parser.pos.initial_c

parser.pos.next.line	.closure	_parser.pos.next.line_c
parser.pos.next.col	.closure	_parser.pos.next.col_c

	.code

# §section §gs{parser.parse}

_parser.parse_c	.expr
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.parse_work	.gvar
parser.exec	.gvar
adv	.larg	parser.advance.t	s
pr	.larg	print.t	s
pos	.larg	parser.pos.t
p	.larg	parser.t	s	α
p1	.apply	parser.exec	s	α	|	p
	.app	adv	pr	pos	p1
	.enter	_parser.parse_work	s	α

_parser.parse_work_c	.expr
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.parse_work_k	.subcode
parser.prim.t.out	.cogvar
adv	.larg	parser.advance.t	s
pr	.larg	print.t	s
pos	.larg	parser.pos.t
p	.larg	parser.prim.t	s	α
s	.larg	list.t	s
	.force	_parser.parse_work_k	s	α	|	adv	pr	pos	s
	.coerce	parser.prim.t.out	s	α
	.enter	p

_parser.parse_work_k	.forcecont
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
list.t	.tygvar
parser.prim.u	.tygvar
rune.t	.tygvar
parser.err.t	.tygvar
parser.prim.t	.tygvar
_parser.prim.u_symbol_0_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.parse_work_symbol_k	.subcode
_parser.parse_work_unit.plus_k	.subcode
list.t.out	.cogvar
either.left	.gvar
parser.err.simple.failure	.gvar
list.null	.gvar
parser.err.message.failure	.gvar
adv	.fv	parser.advance.t	s
pr	.fv	print.t	s
pos	.fv	parser.pos.t
s	.fv	list.t	s
p0	.karg	parser.prim.u	s	α
	.analyze	p0	fail	fail.msg	symbol	unit.plus
		.case	fail
eof			.apply	list.null	s	|	s
sf			.apply	parser.err.simple.failure	|	pos	eof
			.app	sf
			.enter	either.left	parser.err.t	α
		.case	fail.msg
msg		.fkarg	0	list.t	rune.t
eof			.apply	list.null	s	|	s
mf			.apply	parser.err.message.failure	|	pos	eof	msg
			.app	mf
			.enter	either.left	parser.err.t	α
		.case	symbol
sk		.fkarg	0	_parser.prim.u_symbol_0_ty	s	α
ek		.fkarg	1	parser.prim.t	s	α
			.force	_parser.parse_work_symbol_k	s	α	|	adv	pr	pos	s	sk	ek
			.coerce	list.t.out	s
			.enter	s
		.case	unit.plus
x		.fkarg	0	α
p1		.fkarg	1	parser.prim.t	s	α
			.force	_parser.parse_work_unit.plus_k	s	α	|	adv	pr	pos	s	x	p1
			.coerce	list.t.out	s
			.enter	s
	# > :: either.t	parser.err.t	α

_parser.parse_work_symbol_k	.forcecont
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
list.t	.tygvar
_parser.prim.u_symbol_0_ty	.tygvar
parser.prim.t	.tygvar
list.prim.u	.tygvar
rune.t	.tygvar
s	.tyfv	*
α	.tyfv	*
string.ty	.tylet	list.t	rune.t
list.string.ty	.tylet	list.t	string.ty
parser.ty	.tylet	parser.prim.t	s	α
_parser.parse_work_symbol_:_k	.subcode
either.t.out	.cogvar
_parser.parse_work	.gvar
adv	.fv	parser.advance.t	s
pr	.fv	print.t	s
pos	.fv	parser.pos.t
s	.fv	list.t	s
sk	.fv	_parser.prim.u_symbol_0_ty	s	α
ek	.fv	parser.prim.t	s	α
s0	.karg	list.prim.u	s
	.analyze	s0	:	nil
		.case	:
c		.fkarg	0	s
s1		.fkarg	1	list.t	s
			.force	_parser.parse_work_symbol_:_k	s	α	|	adv	pr	pos	c	s1
			.coerce	either.t.out	list.string.ty	parser.ty
			.app	c
			.enter	sk
		.case	nil
			.app	adv	pr	pos	ek	s
			.enter	_parser.parse_work	s	α

_parser.parse_work_symbol_:_k	.forcecont
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
either.prim.u	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.prim.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
s	.tyfv	*
α	.tyfv	*
string.ty	.tylet	list.t	rune.t
list.string.ty	.tylet	list.t	string.ty
parser.ty	.tylet	parser.prim.t	s	α
either.left	.gvar
parser.err.message.failure	.gvar
bool.false	.gvar
list.<>	.gvar
_parser.parse_work_symbol_:_unexpected_prefix.s	.gvar
_parser.parse_work_expecting	.gvar
_parser.parse_work	.gvar
adv	.fv	parser.advance.t	s
pr	.fv	print.t	s
pos	.fv	parser.pos.t
c	.fv	s
s1	.fv	list.t	s
e0	.karg	either.prim.u	list.string.ty	parser.ty
	.analyze	e0	left	right
		.case	left
exps		.fkarg	0	list.t	string.ty
c.s			.apply	pr	|	c
unexpected			.apply	list.<>	rune.t	|	_parser.parse_work_symbol_:_unexpected_prefix.s	c.s
expecting			.apply	_parser.parse_work_expecting	|	exps
msg			.apply	list.<>	rune.t	|	unexpected	expecting
err			.apply	parser.err.message.failure	|	pos	bool.false	msg
			.app	err
			.enter	either.left	parser.err.t	α
		.case	right
p		.fkarg	0	parser.prim.t	s	α
pos1			.apply	adv	|	c	pos
			.app	adv	pr	pos1	p	s1
			.enter	_parser.parse_work	s	α

_parser.parse_work_unit.plus_k	.forcecont
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.parse_work	.gvar
either.right	.gvar
adv	.fv	parser.advance.t	s
pr	.fv	print.t	s
pos	.fv	parser.pos.t
s	.fv	list.t	s
x	.fv	α
p1	.fv	parser.prim.t	s	α
s0	.karg	list.prim.u	s
	.analyze	s0	:	nil
		.case	:
c		.fkarg	0	s
s1		.fkarg	1	list.t	s
			.app	adv	pr	pos	p1	s
			.enter	_parser.parse_work	s	α
		.case	nil
			.app	x
			.enter	either.right	parser.err.t	α

_parser.parse_work_expecting_c	.expr
list.t	.tygvar
string.t	.tygvar
rune.t	.tygvar
_parser.parse_work_expecting_k	.subcode
list.t.out	.cogvar
exps	.larg	list.t	string.t
	.force	_parser.parse_work_expecting_k
	.coerce	list.t.out	string.t
	.enter	exps

_parser.parse_work_expecting_k	.forcecont
list.prim.u	.tygvar
string.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
list.nil	.gvar
exps0	.karg	list.prim.u	string.t
	.analyze	exps0	:	nil
		.case	:
e0		.fkarg	0	list.t	rune.t
es1		.fkarg	1	list.t	string.t
			.undef	list.t	rune.t
		.case	nil
			.enter	list.nil	rune.t

# §section §gs{parser.exec}

_parser.exec_c	.expr
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.exec_k_c	.subcode
p	.larg	parser.t	s	α
k	.alloc	_parser.exec_k_c	s	α
	.app	k
	.enter	p	α

_parser.exec_k_c	.expr
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
parser.prim.unit.plus	.gvar
parser.prim.fail	.gvar
x	.larg	α
fail	.apply	parser.prim.fail	s	α
	.app	x	fail
	.yield	parser.prim.unit.plus	s	α

# §section §gs{parser.map}

_parser.map_c	.expr
_parser.map_f_ty	.tygvar
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
β	.tyarg	*
_parser.map_res_c	.subcode
f	.larg	_parser.map_f_ty	α	β
p0	.larg	parser.t	s	α
res	.alloc	_parser.map_res_c	s	α	β	|	f	p0
	.enter	res

_parser.map_res_c	.expr
_parser.map_f_ty	.tygvar
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyarg	*
_parser.map_k0_c	.subcode
f	.fv	_parser.map_f_ty	α	β
p0	.fv	parser.t	s	α
k	.larg	_parser.t_k_ty	s	β	r
k0	.alloc	_parser.map_k0_c	s	α	β	r	|	f	k
	.app	k0
	.enter	p0	r

_parser.map_k0_c	.expr
_parser.map_f_ty	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyfv	*
f	.fv	_parser.map_f_ty	α	β
k	.fv	_parser.t_k_ty	s	β	r
x	.larg	α
fx	.apply	f	|	x
	.app	fx
	.enter	k

# §section §gs{parser.unit}

_parser.unit_c	.expr
s	.tyarg	*
α	.tyarg	*
_parser.unit_res_c	.subcode
x	.larg	α
res	.alloc	_parser.unit_res_c	s	α	|	x
	.enter	res

_parser.unit_res_c	.expr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyarg	*
x	.fv	α
k	.larg	_parser.t_k_ty	s	α	β
	.app	x
	.enter	k

# §section §gs{parser.<*>}

_parser.<*>_c	.expr
parser.t	.tygvar
_parser.<*>_f_ty	.tygvar
s	.tyarg	*
α	.tyarg	*
β	.tyarg	*
f_ty	.tylet	_parser.<*>_f_ty	α	β
_parser.<*>_res_c	.subcode
pf	.larg	parser.t	s	f_ty
px	.larg	parser.t	s	α
res	.alloc	_parser.<*>_res_c	s	α	β	|	pf	px
	.enter	res

_parser.<*>_res_c	.expr
parser.t	.tygvar
_parser.<*>_f_ty	.tygvar
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyarg	*
f_ty	.tylet	_parser.<*>_f_ty	α	β
_parser.<*>_kf_c	.subcode
pf	.fv	parser.t	s	f_ty
px	.fv	parser.t	s	α
k	.larg	_parser.t_k_ty	s	β	r
kf	.alloc	_parser.<*>_kf_c	s	α	β	r	|	px	k
	.app	kf
	.enter	pf	r

_parser.<*>_kf_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
_parser.<*>_f_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyfv	*
_parser.<*>_kx_c	.subcode
px	.fv	parser.t	s	α
k	.fv	_parser.t_k_ty	s	β	r
f	.larg	_parser.<*>_f_ty	α	β
kx	.alloc	_parser.<*>_kx_c	s	α	β	r	|	k	f
	.app	kx
	.enter	px	r

_parser.<*>_kx_c	.expr
_parser.t_k_ty	.tygvar
_parser.<*>_f_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyfv	*
k	.fv	_parser.t_k_ty	s	β	r
f	.fv	_parser.<*>_f_ty	α	β
x	.larg	α
fx	.apply	f	|	x
	.app	fx
	.enter	k

# §section §gs{parser.fail}

_parser.fail_c	.expr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyarg	*
α	.tyarg	*
β	.tyarg	*
parser.prim.fail	.gvar
k	.larg	_parser.t_k_ty	s	α	β
	.enter	parser.prim.fail	s	β

# §section §gs{parser.*>}

_parser.*>_c	.expr
parser.t	.tygvar
s	.tyarg	*
α0	.tyarg	*
α1	.tyarg	*
_parser.*>_res_c	.subcode
p0	.larg	parser.t	s	α0
p1	.larg	parser.t	s	α1
res	.alloc	_parser.*>_res_c	s	α0	α1	|	p0	p1
	.enter	res

_parser.*>_res_c	.expr
_parser.t_k_ty	.tygvar
parser.t	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
r	.tyarg	*
_parser.*>_k0_c	.subcode
p0	.fv	parser.t	s	α0
p1	.fv	parser.t	s	α1
k	.larg	_parser.t_k_ty	s	α1	r
k0	.alloc	_parser.*>_k0_c	s	α0	α1	r	|	p1	k
	.app	k0
	.enter	p0	r

_parser.*>_k0_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
r	.tyfv	*
p1	.fv	parser.t	s	α1
k	.fv	_parser.t_k_ty	s	α1	r
x0	.larg	α0
	.app	k
	.enter	p1	r

# §section §gs{parser.<*}

_parser.<*_c	.expr
parser.t	.tygvar
s	.tyarg	*
α0	.tyarg	*
α1	.tyarg	*
_parser.<*_res_c	.subcode
p0	.larg	parser.t	s	α0
p1	.larg	parser.t	s	α1
res	.alloc	_parser.<*_res_c	s	α0	α1	|	p0	p1
	.enter	res

_parser.<*_res_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
r	.tyarg	*
_parser.<*_k0_c	.subcode
p0	.fv	parser.t	s	α0
p1	.fv	parser.t	s	α1
k	.larg	_parser.t_k_ty	s	α0	r
k0	.alloc	_parser.<*_k0_c	s	α0	α1	r	|	p1	k
	.app	k0
	.enter	p0	r

_parser.<*_k0_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
r	.tyfv	*
_parser.<*_k1_c	.subcode
p1	.fv	parser.t	s	α1
k	.fv	_parser.t_k_ty	s	α0	r
x0	.larg	α0
k1	.alloc	_parser.<*_k1_c	s	α0	α1	r	|	k	x0
	.app	k1
	.enter	p1	r

_parser.<*_k1_c	.expr
_parser.t_k_ty	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
r	.tyfv	*
k	.fv	_parser.t_k_ty	s	α0	r
x0	.fv	α0
x1	.larg	α1
	.app	x0
	.enter	k

# §section §gs{parser.lift2}

_parser.lift2_c	.expr
_parser.lift2_f_ty	.tygvar
parser.t	.tygvar
s	.tyarg	*
α0	.tyarg	*
α1	.tyarg	*
β	.tyarg	*
_parser.lift2_res_c	.subcode
f	.larg	_parser.lift2_f_ty	α0	α1	β
px0	.larg	parser.t	s	α0
px1	.larg	parser.t	s	α1
res	.alloc	_parser.lift2_res_c	s	α0	α1	β	|	f	px0	px1
	.enter	res

_parser.lift2_res_c	.expr
_parser.lift2_f_ty	.tygvar
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
β	.tyfv	*
r	.tyarg	*
_parser.lift2_kx0_c	.subcode
f	.fv	_parser.lift2_f_ty	α0	α1	β
px0	.fv	parser.t	s	α0
px1	.fv	parser.t	s	α1
k	.larg	_parser.t_k_ty	s	β	r
kx0	.alloc	_parser.lift2_kx0_c	s	α0	α1	β	r	|	f	px1	k
	.app	kx0
	.enter	px0	r

_parser.lift2_kx0_c	.expr
_parser.lift2_f_ty	.tygvar
parser.t	.tygvar
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
β	.tyfv	*
r	.tyfv	*
_parser.lift2_kx1_c	.subcode
f	.fv	_parser.lift2_f_ty	α0	α1	β
px1	.fv	parser.t	s	α1
k	.fv	_parser.t_k_ty	s	β	r
x0	.larg	α0
kx1	.alloc	_parser.lift2_kx1_c	s	α0	α1	β	r	|	f	k	x0
	.app	kx1
	.enter	px1	r

_parser.lift2_kx1_c	.expr
_parser.lift2_f_ty	.tygvar
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α0	.tyfv	*
α1	.tyfv	*
β	.tyfv	*
r	.tyfv	*
f	.fv	_parser.lift2_f_ty	α0	α1	β
k	.fv	_parser.t_k_ty	s	β	r
x0	.fv	α0
x1	.larg	α1
f.x0.x1	.apply	f	|	x0	x1
	.app	f.x0.x1
	.enter	k

# §section §gs{parser.fail.msg}

_parser.fail.msg_c	.expr
list.t	.tygvar
rune.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.fail.msg_res_c	.subcode
msg	.larg	list.t	rune.t
res	.alloc	_parser.fail.msg_res_c	s	α	|	msg
	.enter	res

_parser.fail.msg_res_c	.expr
list.t	.tygvar
rune.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyarg	*
parser.prim.fail.msg	.gvar
msg	.fv	list.t	rune.t
k	.larg	_parser.t_k_ty	s	α	β
	.app	msg
	.yield	parser.prim.fail.msg	s	β

# §section §gs{parser.<|>}

_parser.<|>_c	.expr
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.<|>_res_c	.subcode
p0	.larg	parser.t	s	α
p1	.larg	parser.t	s	α
res	.alloc	_parser.<|>_res_c	s	α	|	p0	p1
	.enter	res

_parser.<|>_res_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
r	.tyarg	*
parser.prim.<|>	.gvar
p0	.fv	parser.t	s	α
p1	.fv	parser.t	s	α
k	.larg	_parser.t_k_ty	s	α	r
p0.k	.apply	p0	r	|	k
p1.k	.apply	p1	r	|	k
	.app	p0.k	p1.k
	.enter	parser.prim.<|>	s	r

# §section §gs{parser.symbol}

_parser.symbol_c	.expr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyarg	*
r	.tyarg	*
_parser.symbol_sk_c	.subcode
parser.prim.symbol	.gvar
parser.prim.fail.msg	.gvar
_parser.symbol_msg	.gvar
k	.larg	_parser.t_k_ty	s	s	r
sk	.alloc	_parser.symbol_sk_c	s	r	|	k
fail	.apply	parser.prim.fail.msg	s	r	|	_parser.symbol_msg
	.app	sk	fail
	.yield	parser.prim.symbol	s	r

_parser.symbol_sk_c	.expr
_parser.t_k_ty	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
r	.tyfv	*
string.ty	.tylet	list.t	rune.t
list.string.ty	.tylet	list.t	string.ty
parser.ty	.tylet	parser.prim.t	s	r
either.right	.gvar
k	.fv	_parser.t_k_ty	s	s	r
c	.larg	s
kc	.apply	k	|	c
	.app	kc
	.enter	either.right	list.string.ty	parser.ty

# §section §gs{parser.symbol.matching.bool}

_parser.symbol.matching.bool_c	.expr
_parser.symbol.matching.bool_pred_ty	.tygvar
s	.tyarg	*
_parser.symbol.matching.bool_res_c	.subcode
pred	.larg	_parser.symbol.matching.bool_pred_ty	s
res	.alloc	_parser.symbol.matching.bool_res_c	s	|	pred
	.enter	res

_parser.symbol.matching.bool_res_c	.expr
_parser.symbol.matching.bool_pred_ty	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
r	.tyarg	*
_parser.symbol.matching.bool_sk_c	.subcode
parser.prim.symbol	.gvar
parser.prim.fail.msg	.gvar
_parser.symbol_msg	.gvar
pred	.fv	_parser.symbol.matching.bool_pred_ty	s
k	.larg	_parser.t_k_ty	s	s	r
sk	.alloc	_parser.symbol.matching.bool_sk_c	s	r	|	pred	k
fail	.apply	parser.prim.fail.msg	s	r	|	_parser.symbol_msg
	.app	sk	fail
	.yield	parser.prim.symbol	s	r

_parser.symbol.matching.bool_sk_c	.expr
_parser.symbol.matching.bool_pred_ty	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
r	.tyfv	*
_parser.symbol.matching.bool_sk_k	.subcode
bool.t.out	.cogvar
pred	.fv	_parser.symbol.matching.bool_pred_ty	s
k	.fv	_parser.t_k_ty	s	s	r
c	.larg	s
	.force	_parser.symbol.matching.bool_sk_k	s	r	|	k	c
	.coerce	bool.t.out
	.app	c
	.enter	pred

_parser.symbol.matching.bool_sk_k	.forcecont
_parser.t_k_ty	.tygvar
bool.prim.u	.tygvar
list.t	.tygvar
string.t	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
r	.tyfv	*
list.string.t	.tylet	list.t	string.t
parser.ty	.tylet	parser.prim.t	s	r
either.left	.gvar
list.nil	.gvar
either.right	.gvar
k	.fv	_parser.t_k_ty	s	s	r
c	.fv	s
b0	.karg	bool.prim.u
	.analyze	b0	false	true
		.case	false
nil			.apply	list.nil	string.t
			.app	nil
			.enter	either.left	list.string.t	parser.ty
		.case	true
kc			.apply	k	|	c
			.app	kc
			.enter	either.right	list.string.t	parser.ty

# §section §gs{parser.match}

_parser.match_c	.expr
order.total.t	.tygvar
regex.t	.tygvar
parser.t	.tygvar
list.t	.tygvar
s	.tyarg	*
res.ty	.tylet	list.t	s
parser.<*>	.gvar
_parser.match_worker	.gvar
parser.unit	.gvar
list.nil	.gvar
cmp	.larg	order.total.t	s
re	.larg	regex.t	s
w	.apply	_parser.match_worker	s	|	cmp	re
nil	.apply	list.nil	s
nil.p	.apply	parser.unit	s	res.ty	|	nil
	.app	w	nil.p
	.enter	parser.<*>	s	res.ty	res.ty

_parser.match_worker_c	.expr
order.total.t	.tygvar
regex.t	.tygvar
s	.tyarg	*
_parser.match_worker_k	.subcode
regex.t.out	.cogvar
cmp	.larg	order.total.t	s
re	.larg	regex.t	s
	.force	_parser.match_worker_k	s	|	cmp	re
	.coerce	regex.t.out	s
	.enter	re

_parser.match_worker_k	.forcecont
order.total.t	.tygvar
regex.prim.u	.tygvar
regex.class.t	.tygvar
regex.t	.tygvar
parser.t	.tygvar
_parser.match_worker_res_ty	.tygvar
s	.tyfv	*
res_ty	.tylet	_parser.match_worker_res_ty	s
_parser.match_worker_id_c	.subcode
_parser.match_worker_neg.class_pred_c	.subcode
_parser.match_worker_co_c	.subcode
_parser.match_worker_symbol_pred_c	.subcode
_parser.match_worker_class	.gvar
parser.unit	.gvar
parser.lift2	.gvar
_parser.match_worker	.gvar
parser.<|>	.gvar
parser.map	.gvar
list.:	.gvar
parser.symbol.matching.bool	.gvar
cmp	.fv	order.total.t	s
re	.fv	regex.t	s
re0	.karg	regex.prim.u	s
	.analyze	re0	class	empty	neg.class	product	star	symbol
		.case	class
cl		.fkarg	0	regex.class.t	s
cons			.apply	list.:	s
pred			.apply	_parser.match_worker_class	s	|	cmp	cl
sym			.apply	parser.symbol.matching.bool	s	|	pred
			.app	cons	sym
			.enter	parser.map	s	s	res_ty
		.case	empty
id			.alloc	_parser.match_worker_id_c	s
			.app	id
			.enter	parser.unit	s	res_ty
		.case	neg.class
cl		.fkarg	0	regex.class.t	s
cons			.apply	list.:	s
pred			.alloc	_parser.match_worker_neg.class_pred_c	s	|	cmp	cl
sym			.apply	parser.symbol.matching.bool	s	|	pred
			.app	cons	sym
			.enter	parser.map	s	s	res_ty
		.case	product
re0.0		.fkarg	0	regex.t	s
re0.1		.fkarg	1	regex.t	s
co			.alloc	_parser.match_worker_co_c	s
p0			.apply	_parser.match_worker	s	|	cmp	re0.0
p1			.apply	_parser.match_worker	s	|	cmp	re0.1
			.app	co	p0	p1
			.enter	parser.lift2	s	res_ty	res_ty	res_ty
		.case	star
re0.0		.fkarg	0	regex.t	s
co			.alloc	_parser.match_worker_co_c	s
id			.alloc	_parser.match_worker_id_c	s
p0			.apply	parser.unit	s	res_ty	|	id
p1.0			.apply	_parser.match_worker	s	|	cmp	re0.0
p1.1			.apply	_parser.match_worker	s	|	cmp	re
p1			.apply	parser.lift2	s	res_ty	res_ty	res_ty	|	co	p1.0	p1.1
			.app	p0	p1
			.enter	parser.<|>	s	res_ty
		.case	symbol
c		.fkarg	0	s
cons			.apply	list.:	s
pred			.alloc	_parser.match_worker_symbol_pred_c	s	|	cmp	c
sym			.apply	parser.symbol.matching.bool	s	|	pred
			.app	cons	sym
			.enter	parser.map	s	s	res_ty
	# > :: parser.t	s	res_ty

_parser.match_worker_id_c	.expr
list.t	.tygvar
s	.tyfv	*
s	.larg	list.t	s
	.enter	s

_parser.match_worker_neg.class_pred_c	.expr
order.total.t	.tygvar
regex.class.t	.tygvar
s	.tyfv	*
bool.not	.gvar
_parser.match_worker_class	.gvar
cmp	.fv	order.total.t	s
cl	.fv	regex.class.t	s
c	.larg	s
b	.apply	_parser.match_worker_class	s	|	cmp	cl	c
	.app	b
	.enter	bool.not

_parser.match_worker_co_c	.expr
_parser.match_worker_res_ty	.tygvar
list.t	.tygvar
s	.tyfv	*
res_ty	.tylet	_parser.match_worker_res_ty	s
f0	.larg	res_ty
f1	.larg	res_ty
s	.larg	list.t	s
f1.s	.apply	f1	|	s
	.app	f1.s
	.enter	f0

_parser.match_worker_symbol_pred_c	.expr
order.total.t	.tygvar
s	.tyfv	*
_parser.match_worker_symbol_pred_k	.subcode
order.total.ord.t.out	.cogvar
cmp	.fv	order.total.t	s
c	.fv	s
c1	.larg	s
	.force	_parser.match_worker_symbol_pred_k
	.coerce	order.total.ord.t.out
	.app	c	c1
	.enter	cmp

_parser.match_worker_symbol_pred_k	.forcecont
order.total.ord.prim.u	.tygvar
bool.false	.gvar
bool.true	.gvar
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	eq
		.default
			.enter	bool.false
		.case	eq
			.enter	bool.true

_parser.match_worker_class_c	.expr
order.total.t	.tygvar
regex.class.t	.tygvar
s	.tyarg	*
_parser.match_worker_class_k	.subcode
regex.class.t.out	.cogvar
cmp	.larg	order.total.t	s
cl	.larg	regex.class.t	s
c	.larg	s
	.force	_parser.match_worker_class_k	s	|	cmp	c
	.coerce	regex.class.t.out	s
	.enter	cl

_parser.match_worker_class_k	.forcecont
order.total.t	.tygvar
regex.class.prim.u	.tygvar
regex.class.t	.tygvar
bool.t	.tygvar
s	.tyfv	*
_parser.match_worker_class_range_k1	.subcode
_parser.match_worker_class_symbol_k	.subcode
order.total.ord.t.out	.cogvar
bool.∨	.gvar
_parser.match_worker_class	.gvar
cmp	.fv	order.total.t	s
c	.fv	s
cl0	.karg	regex.class.prim.u	s
	.analyze	cl0	range	sum	symbol
		.case	range
c0		.fkarg	0	s
c1		.fkarg	1	s
                    	.force	_parser.match_worker_class_range_k1	s	|	cmp	c0	c
                    	.coerce	order.total.ord.t.out
                    	.app	c	c1
                    	.enter	cmp
		.case	sum
cl0.0		.fkarg	0	regex.class.t	s
cl0.1		.fkarg	1	regex.class.t	s
b0			.apply	_parser.match_worker_class	s	|	cmp	cl0.0	c
b1			.apply	_parser.match_worker_class	s	|	cmp	cl0.1	c
			.app	b0	b1
			.enter	bool.∨
		.case	symbol
c0		.fkarg	0	s
			.force	_parser.match_worker_class_symbol_k
			.coerce	order.total.ord.t.out
			.app	c	c0
			.enter	cmp
	# > :: parser.t s res_ty

_parser.match_worker_class_range_k1	.forcecont
order.total.t	.tygvar
order.total.ord.prim.u	.tygvar
s	.tyfv	*
_parser.match_worker_class_range_k2	.subcode
order.total.ord.t.out	.cogvar
bool.false	.gvar
cmp	.fv	order.total.t	s
c0	.fv	s
c	.fv	s
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	gt
		.default
			.force	_parser.match_worker_class_range_k2
			.coerce	order.total.ord.t.out
			.app	c0	c
			.enter	cmp
		.case	gt
			.enter	bool.false

_parser.match_worker_class_range_k2	.forcecont
order.total.ord.prim.u	.tygvar
bool.true	.gvar
bool.false	.gvar
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	gt
		.default
			.enter	bool.true
		.case	gt
			.enter	bool.false

_parser.match_worker_class_symbol_k	.forcecont
order.total.ord.prim.u	.tygvar
bool.false	.gvar
bool.true	.gvar
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	eq
		.default
			.enter	bool.false
		.case	eq
			.enter	bool.true

# §section §gs{parser.prim.<|>}

_parser.prim.<|>_c	.expr
parser.prim.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.prim.<|>_k0	.subcode
parser.prim.t.out	.cogvar
p0	.larg	parser.prim.t	s	α
p1	.larg	parser.prim.t	s	α
	.force	_parser.prim.<|>_k0	s	α	|	p1
	.coerce	parser.prim.t.out	s	α
	.enter	p0

_parser.prim.<|>_k0	.forcecont
parser.prim.t	.tygvar
parser.prim.u	.tygvar
list.t	.tygvar
rune.t	.tygvar
_parser.prim.u_symbol_0_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.prim.<|>_fail.msg_k1	.subcode
_parser.prim.<|>_symbol_k1	.subcode
parser.prim.t.out	.cogvar
parser.prim.unit.plus	.gvar
parser.prim.<|>	.gvar
p1	.fv	parser.prim.t	s	α
p0.0	.karg	parser.prim.u	s	α
	.analyze	p0.0	fail	fail.msg	symbol	unit.plus
		.case	fail
			.enter	p1
		.case	fail.msg
msg		.fkarg	0	list.t	rune.t
			.force	_parser.prim.<|>_fail.msg_k1	s	α
			.coerce	parser.prim.t.out	s	α
			.enter	p1
		.case	symbol
sk		.fkarg	0	_parser.prim.u_symbol_0_ty	s	α
ek		.fkarg	1	parser.prim.t	s	α
			.force	_parser.prim.<|>_symbol_k1	s	α	|	sk	ek
			.coerce	parser.prim.t.out	s	α
			.enter	p1
		.case	unit.plus
x		.fkarg	0	α
p0.1		.fkarg	1	parser.prim.t	s	α
p2			.apply	parser.prim.<|>	s	α	|	p0.1	p1
			.app	x	p2
			.yield	parser.prim.unit.plus	s	α

_parser.prim.<|>_fail.msg_k1	.forcecont
parser.prim.u	.tygvar
parser.prim.t	.tygvar
string.t	.tygvar
_parser.prim.u_symbol_0_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
parser.prim.t.in	.cogvar
p1.0	.karg	parser.prim.u	s	α
	.analyze	p1.0	fail	fail.msg	symbol	unit.plus
		.case	fail
			.undef	parser.prim.t	s	α
		.case	fail.msg
msg.1		.fkarg	0	string.t
			.undef	parser.prim.t	s	α
		.case	symbol
sk		.fkarg	0	_parser.prim.u_symbol_0_ty	s	α
ek		.fkarg	1	parser.prim.t	s	α
			.coerce	parser.prim.t.in	s	α
			.lift
			.yield	p1.0
		.case	unit.plus
x		.fkarg	0	α
p1.1		.fkarg	1	parser.prim.t	s	α
			.undef	parser.prim.t	s	α

_parser.prim.<|>_symbol_k1	.forcecont
_parser.prim.u_symbol_0_ty	.tygvar
parser.prim.t	.tygvar
parser.prim.u	.tygvar
list.t	.tygvar
rune.t	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.prim.<|>_symbol_sk2_c	.subcode
parser.prim.symbol	.gvar
parser.prim.<|>	.gvar
sk	.fv	_parser.prim.u_symbol_0_ty	s	α
ek	.fv	parser.prim.t	s	α
p1.0	.karg	parser.prim.u	s	α
	.analyze	p1.0	fail	fail.msg	symbol	unit.plus
		.case	fail
			.undef	parser.prim.t	s	α
		.case	fail.msg
msg		.fkarg	0	list.t	rune.t
			.undef	parser.prim.t	s	α
		.case	symbol
sk1		.fkarg	0	_parser.prim.u_symbol_0_ty	s	α
ek1		.fkarg	1	parser.prim.t	s	α
sk2			.alloc	_parser.prim.<|>_symbol_sk2_c	s	α	|	sk	sk1
ek2			.apply	parser.prim.<|>	s	α	|	ek	ek1
			.app	sk2	ek2
			.yield	parser.prim.symbol	s	α
		.case	unit.plus
x		.fkarg	0	α
p1.1		.fkarg	1	parser.prim.t	s	α
			.undef	parser.prim.t	s	α

_parser.prim.<|>_symbol_sk2_c	.expr
_parser.prim.u_symbol_0_ty	.tygvar
either.t	.tygvar
list.t	.tygvar
string.t	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
list.string.t	.tylet	list.t	string.t
parser.ty	.tylet	parser.prim.t	s	α
_parser.prim.<|>_symbol_sk2_k0	.subcode
either.t.out	.cogvar
sk	.fv	_parser.prim.u_symbol_0_ty	s	α
sk1	.fv	_parser.prim.u_symbol_0_ty	s	α
c	.larg	s
	.force	_parser.prim.<|>_symbol_sk2_k0	s	α	|	sk1	c
	.coerce	either.t.out	list.string.t	parser.ty
	.app	c
	.enter	sk

_parser.prim.<|>_symbol_sk2_k0	.forcecont
_parser.prim.u_symbol_0_ty	.tygvar
either.prim.u	.tygvar
list.t	.tygvar
string.t	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
list.string.t	.tylet	list.t	string.t
parser.ty	.tylet	parser.prim.t	s	α
_parser.prim.<|>_symbol_sk2_k1	.subcode
either.t.out	.cogvar
sk1	.fv	_parser.prim.u_symbol_0_ty	s	α
c	.fv	s
e0.0	.karg	either.prim.u	list.string.t	parser.ty
	.force	_parser.prim.<|>_symbol_sk2_k1	s	α	|	e0.0
	.coerce	either.t.out	list.string.t	parser.ty
	.app	c
	.enter	sk1

_parser.prim.<|>_symbol_sk2_k1	.forcecont
either.prim.u	.tygvar
list.t	.tygvar
string.t	.tygvar
parser.prim.t	.tygvar
either.t	.tygvar
s	.tyfv	*
α	.tyfv	*
list.string.t	.tylet	list.t	string.t
parser.ty	.tylet	parser.prim.t	s	α
either.left	.gvar
list.<>	.gvar
either.right	.gvar
parser.prim.<|>	.gvar
e0.0	.fv	either.prim.u	list.string.t	parser.ty
e1.0	.karg	either.prim.u	list.string.t	parser.ty
	.analyze	e0.0	left	right
		.case	left
exp0		.fkarg	0	list.t	string.t
			.analyze	e1.0	left	right
				.case	left
exp1				.fkarg	0	list.t	string.t
exp2					.apply	list.<>	string.t	|	exp0	exp1
					.app	exp2
					.enter	either.left	list.string.t	parser.ty
				.case	right
p1.1				.fkarg	0	parser.prim.t	s	α
					.app	p1.1
					.enter	either.right	list.string.t	parser.ty
		.case	right
p0.1		.fkarg	0	parser.prim.t	s	α
			.analyze	e1.0	left	right
				.case	left
exp1				.fkarg	0	list.t	string.t
					.app	p0.1
					.enter	either.right	list.string.t	parser.ty
				.case	right
p1.1				.fkarg	0	parser.prim.t	s	α
p2					.apply	parser.prim.<|>	s	α	|	p0.1	p1.1
					.app	p2
					.enter	either.right	list.string.t	parser.ty

# §section Constructors

_parser.prim.unit.plus_c	.expr
parser.prim.t	.tygvar
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
x	.arg	α
p	.arg	parser.prim.t	s	α
un	.constr	res.u	unit.plus	0	x	1	p
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	un

_parser.prim.fail_c	.expr
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
f	.constr	res.u	fail
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	f

_parser.prim.fail.msg_c	.expr
list.t	.tygvar
rune.t	.tygvar
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
msg	.arg	list.t	rune.t
f	.constr	res.u	fail.msg	0	msg
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	f

_parser.prim.symbol_c	.expr
_parser.prim.u_symbol_0_ty	.tygvar
parser.prim.t	.tygvar
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
sk	.arg	_parser.prim.u_symbol_0_ty	s	α
ek	.arg	parser.prim.t	s	α
s	.constr	res.u	symbol	0	sk	1	ek
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	s

# §section §gs{parser.err.fmt}

_parser.err.fmt_c	.expr
parser.err.t	.tygvar
_parser.err.fmt_k	.subcode
parser.err.t.out	.cogvar
e	.larg	parser.err.t
	.force	_parser.err.fmt_k
	.coerce	parser.err.t.out
	.enter	e

_parser.err.fmt_k	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
list.<>	.gvar
parser.pos.fmt	.gvar
_parser.err.fmt_col.sp	.gvar
_parser.err.fmt_parse.failure.s	.gvar
e0	.karg	parser.err.prim.u
	.analyze	e0	message.failure	simple.failure
		.case	message.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
msg		.fkarg	2	list.t	rune.t
pos.s			.apply	parser.pos.fmt	|	eof	pos
s1			.apply	list.<>	rune.t	|	_parser.err.fmt_col.sp	msg
			.app	pos.s	s1
			.enter	list.<>	rune.t
		.case	simple.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
pos.s			.apply	parser.pos.fmt	|	eof	pos
			.app	pos.s	_parser.err.fmt_parse.failure.s
			.enter	list.<>	rune.t

# §section §gs{parser.err.≡}

_parser.err.≡_c	.expr
parser.err.t	.tygvar
_parser.err.≡_k0	.subcode
parser.err.t.out	.cogvar
e0	.larg	parser.err.t
e1	.larg	parser.err.t
	.force	_parser.err.≡_k0	|	e1
	.coerce	parser.err.t.out
	.enter	e0

_parser.err.≡_k0	.forcecont
parser.err.t	.tygvar
parser.err.prim.u	.tygvar
_parser.err.≡_k1	.subcode
parser.err.t.out	.cogvar
e1	.fv	parser.err.t
e0.0	.karg	parser.err.prim.u
	.force	_parser.err.≡_k1	|	e0.0
	.coerce	parser.err.t.out
	.enter	e1

_parser.err.≡_k1	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.pos.≡	.gvar
e0.0	.fv	parser.err.prim.u
e1.0	.karg	parser.err.prim.u
	.analyze	e0.0	message.failure	simple.failure
		.case	message.failure
pos0		.fkarg	0	parser.pos.t
eof0		.fkarg	1	bool.t
msg0		.fkarg	2	list.t	rune.t
			.undef	bool.t
		.case	simple.failure
pos0		.fkarg	0	parser.pos.t
eof1		.fkarg	1	bool.t
			.danalyze	e0.0	simple.failure
				.default
					.undef	bool.t
				.case	simple.failure
pos1				.fkarg	0	parser.pos.t
eof1				.fkarg	1	bool.t
					.app	pos0	pos1
					.enter	parser.pos.≡

# §section §gs{parser.err.fmtgs}

_parser.err.fmtgs_c	.expr
parser.err.t	.tygvar
_parser.err.fmtgs_k	.subcode
parser.err.t.out	.cogvar
e	.larg	parser.err.t
	.force	_parser.err.fmtgs_k
	.coerce	parser.err.t.out
	.enter	e

_parser.err.fmtgs_k	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
fmtgs.printer.t	.tygvar
fmtgs.prec	.gvar
fmtgs.prec.app	.gvar
diff.list.prepend	.gvar
_parser.err.fmtgs_simple.failure_prefix	.gvar
diff.list.<>	.gvar
parser.pos.fmtgs	.gvar
diff.list.:	.gvar
rune.space	.gvar
bool.fmtgs	.gvar
fmtgs.prec.arg	.gvar
e0	.karg	parser.err.prim.u
	.analyze	e0	message.failure	simple.failure
		.case	message.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
msg		.fkarg	2	list.t	rune.t
			.undef	fmtgs.printer.t
		.case	simple.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
pos.s			.apply	parser.pos.fmtgs	|	pos	fmtgs.prec.arg
eof.s			.apply	bool.fmtgs	|	eof	fmtgs.prec.arg
s1			.apply	diff.list.:	rune.t	|	rune.space	pos.s
s2			.apply	diff.list.<>	rune.t	|	eof.s	s1
ds			.apply	diff.list.prepend	rune.t	|	_parser.err.fmtgs_simple.failure_prefix	s2
			.app	fmtgs.prec.app	ds
			.enter	fmtgs.prec

# §section §gs{parser.err.t} constructors

_parser.err.simple.failure_c	.expr
parser.pos.t	.tygvar
bool.t	.tygvar
parser.err.prim.u	.tygvar
parser.err.t.in	.cogvar
pos	.arg	parser.pos.t
eof	.arg	bool.t
c	.constr	parser.err.prim.u	simple.failure	0	pos	1	eof
	.coerce	parser.err.t.in
	.lift
	.yield	c

_parser.err.message.failure_c	.expr
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.err.prim.u	.tygvar
parser.err.t.in	.cogvar
pos	.arg	parser.pos.t
eof	.arg	bool.t
msg	.arg	list.t	rune.t
c	.constr	parser.err.prim.u	message.failure	0	pos	1	eof	2	msg
	.coerce	parser.err.t.in
	.lift
	.yield	c

# §section §gs{parser.rune.advance}

_parser.rune.advance_c	.expr
rune.t	.tygvar
parser.pos.t	.tygvar
parser.pos.next.col	.gvar
r	.larg	rune.t
pos	.larg	parser.pos.t
	.app	pos
	.enter	parser.pos.next.col

# §section §gs{parser.pos.fmt}

_parser.pos.fmt_c	.expr
bool.t	.tygvar
parser.pos.t	.tygvar
_parser.pos.fmt_k	.subcode
bool.t.out	.cogvar
eof	.larg	bool.t
pos	.larg	parser.pos.t
	.force	_parser.pos.fmt_k	|	pos
	.coerce	bool.t.out
	.enter	eof

_parser.pos.fmt_k	.forcecont
parser.pos.t	.tygvar
bool.prim.u	.tygvar
rune.t	.tygvar
_parser.pos.fmt_true_k	.subcode
bool.t.out	.cogvar
list.<>	.gvar
ibio.file.name.out	.gvar
list.:	.gvar
rune.colon	.gvar
natural.fmtdecimal	.gvar
bool.∨	.gvar
natural.>	.gvar
natural.1	.gvar
pos	.fv	parser.pos.t
eof0	.karg	bool.prim.u
	.analyze	eof0	false	true
		.case	false
fn			.lfield	file	pos
line			.lfield	line	pos
col			.lfield	col	pos
fn.s			.apply	ibio.file.name.out	|	fn
line.s			.apply	natural.fmtdecimal	|	line
col.s			.apply	natural.fmtdecimal	|	col
s3			.apply	list.:	rune.t	|	rune.colon	col.s
s2			.apply	list.<>	rune.t	|	line.s	s3
s1			.apply	list.:	rune.t	|	rune.colon	s2
			.app	fn.s	s1
			.enter	list.<>	rune.t
		.case	true
line			.lfield	line	pos
col			.lfield	col	pos
b0			.apply	natural.>	|	line	natural.1
b1			.apply	natural.>	|	col	natural.1
			.force	_parser.pos.fmt_true_k	|	pos
			.coerce	bool.t.out
			.app	b0	b1
			.enter	bool.∨

_parser.pos.fmt_true_k	.forcecont
parser.pos.t	.tygvar
bool.prim.u	.tygvar
rune.t	.tygvar
ibio.file.name.out	.gvar
list.<>	.gvar
_parser.pos.fmt_eof.suffix.s	.gvar
pos	.fv	parser.pos.t
b0	.karg	bool.prim.u
	.analyze	b0	false	true
		.case	false
fn			.lfield	file	pos
			.app	fn
			.enter	ibio.file.name.out
		.case	true
fn			.lfield	file	pos
fn.s			.apply	ibio.file.name.out	|	fn
			.app	fn.s	_parser.pos.fmt_eof.suffix.s
			.enter	list.<>	rune.t

# §section §gs{parser.pos.≡}

_parser.pos.≡_c	.expr
parser.pos.t	.tygvar
bool.∧	.gvar
ibio.file.name.≡	.gvar
natural.≡	.gvar
pos0	.larg	parser.pos.t
pos1	.larg	parser.pos.t
pos0.file	.lfield	file	pos0
pos0.line	.lfield	line	pos0
pos0.col	.lfield	col	pos0
pos1.file	.lfield	file	pos1
pos1.line	.lfield	line	pos1
pos1.col	.lfield	col	pos1
b0	.apply	ibio.file.name.≡	|	pos0.file	pos1.file
b1	.apply	natural.≡	|	pos0.line	pos1.line
b2	.apply	natural.≡	|	pos0.col	pos1.col
b3	.apply	bool.∧	|	b1	b2
	.app	b0	b3
	.enter	bool.∧

# §section §gs{parser.pos.fmtgs}

_parser.pos.fmtgs_c	.expr
parser.pos.t	.tygvar
rune.t	.tygvar
fmtgs.prec	.gvar
fmtgs.prec.arg	.gvar
diff.list.<>	.gvar
_parser.pos.fmtgs_prefix.s	.gvar
_parser.pos.fmtgs_file.s	.gvar
ibio.file.name.fmtgs	.gvar
fmtgs.prec.app	.gvar
diff.list.prepend	.gvar
_parser.pos.fmtgs_semi.space.s	.gvar
_parser.pos.fmtgs_line.s	.gvar
natural.fmtgs	.gvar
_parser.pos.fmtgs_col.s	.gvar
diff.list.fromlist	.gvar
_parser.pos.fmtgs_suffix.s	.gvar
pos	.larg	parser.pos.t
fn	.lfield	file	pos
line	.lfield	line	pos
col	.lfield	col	pos
fn.s	.apply	ibio.file.name.fmtgs	|	fn	fmtgs.prec.app
line.s	.apply	natural.fmtgs	|	line	fmtgs.prec.app
col.s	.apply	natural.fmtgs	|	col	fmtgs.prec.app
s9	.apply	diff.list.fromlist	rune.t	|	_parser.pos.fmtgs_suffix.s
s8	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_semi.space.s	s9
s7	.apply	diff.list.<>	rune.t	|	col.s	s8
s6	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_col.s	s7
s5	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_semi.space.s	s6
s4	.apply	diff.list.<>	rune.t	|	line.s	s5
s3	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_line.s	s4
s2	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_semi.space.s	s3
s1	.apply	diff.list.<>	rune.t	|	fn.s	s2
s0	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_file.s	s1
ds	.apply	diff.list.prepend	rune.t	|	_parser.pos.fmtgs_prefix.s	s0
	.app	fmtgs.prec.arg	ds
	.enter	fmtgs.prec

# §section §gs{parser.pos.initial}

_parser.pos.initial_c	.expr
ibio.file.name.t	.tygvar
natural.1	.gvar
fn	.larg	ibio.file.name.t
r	.record	col	natural.1	file	fn	line	natural.1
	.lift
	.yield	r

# §section §gs{parser.pos.next.line}

_parser.pos.next.line_c	.expr
parser.pos.t	.tygvar
natural.+	.gvar
natural.1	.gvar
pos	.larg	parser.pos.t
fn	.lfield	file	pos
line	.lfield	line	pos
col	.lfield	col	pos
line.1	.apply	natural.+	|	line	natural.1
r	.record	col	col	file	fn	line	line.1
	.lift
	.yield	r

# §section §gs{parser.pos.next.col}
_parser.pos.next.col_c	.expr
parser.pos.t	.tygvar
natural.+	.gvar
natural.1	.gvar
pos	.larg	parser.pos.t
fn	.lfield	file	pos
line	.lfield	line	pos
col	.lfield	col	pos
col.1	.apply	natural.+	|	col	natural.1
r	.record	col	col.1	file	fn	line	line
	.lift
	.yield	r

	.type

# §section §gs{parser.t}

parser.t	.tyexpr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
β	.tyforall	*
	.tylift
	.tyfun	_parser.t_k_ty	s	α	β
	.tyref	parser.prim.t	s	β

_parser.t_k_ty	.tyexpr
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	parser.prim.t	s	β

parser.prim.t	.tyabstract	**^*^
parser.prim.u	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tylift
	.tyref	parser.prim.u	s	α

parser.prim.u	.tyexpr
_parser.prim.u_fail.ty	.tygvar
_parser.prim.u_fail.msg.ty	.tygvar
_parser.prim.u_symbol.ty	.tygvar
_parser.prim.u_unit.plus.ty	.tygvar
s	.tylambda	*
α	.tylambda	*
symbol.ty	.tylet	_parser.prim.u_symbol.ty	s	α
unit.plus.ty	.tylet	_parser.prim.u_unit.plus.ty	s	α
	.tysum	fail	_parser.prim.u_fail.ty	fail.msg	_parser.prim.u_fail.msg.ty	symbol	symbol.ty	unit.plus	unit.plus.ty

_parser.prim.u_fail.ty	.tyexpr
	.tyubproduct

_parser.prim.u_fail.msg.ty	.tyexpr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
	.tyubproduct	0	string.ty

_parser.prim.u_unit.plus.ty	.tyexpr
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
1.ty	.tylet	parser.prim.t	s	α
	.tyubproduct	0	α	1	1.ty

_parser.prim.u_symbol.ty	.tyexpr
_parser.prim.u_symbol_0_ty	.tygvar
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
0_ty	.tylet	_parser.prim.u_symbol_0_ty	s	α
1_ty	.tylet	parser.prim.t	s	α
	.tyubproduct	0	0_ty	1	1_ty

_parser.prim.u_symbol_0_ty	.tyexpr
either.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
string.ty	.tylet	list.t	rune.t
list.string.ty	.tylet	list.t	string.ty
parser.ty	.tylet	parser.prim.t	s	α
	.tylift
	.tyfun	s
	.tyref	either.t	list.string.ty	parser.ty

# §section §gs{parser.err.t}

parser.err.t	.tyabstract	*
parser.err.prim.u	.tygvar
	.tylift
	.tyref	parser.err.prim.u

parser.err.prim.u	.tyexpr
_parser.err.prim.u_message.failure_ty	.tygvar
_parser.err.prim.u_simple.failure_ty	.tygvar
	.tysum	message.failure	_parser.err.prim.u_message.failure_ty	simple.failure	_parser.err.prim.u_simple.failure_ty

_parser.err.prim.u_message.failure_ty	.tyexpr
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
	.tyubproduct	0	parser.pos.t	1	bool.t	2	string.ty

_parser.err.prim.u_simple.failure_ty	.tyexpr
parser.pos.t	.tygvar
bool.t	.tygvar
	.tyubproduct	0	parser.pos.t	1	bool.t

# §section §gs{parser.pos.t}

parser.pos.t	.tyexpr
parser.pos.u	.tygvar
	.tylift
	.tyref	parser.pos.u

parser.pos.u	.tyexpr
natural.t	.tygvar
ibio.file.name.t	.tygvar
	.typroduct	col	natural.t	file	ibio.file.name.t	line	natural.t

# §section §gs{parser.advance.t}

parser.advance.t	.tyexpr
parser.pos.t	.tygvar
s	.tylambda	*
	.tylift
	.tyfun	s
	.tylift
	.tyfun	parser.pos.t
	.tyref	parser.pos.t

# §section §gs{parser.parse}

_parser.parse_work_ty	.tyexpr
parser.advance.t	.tygvar
print.t	.tygvar
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
s	.tyforall	*
α	.tyforall	*
	.tylift
	.tyfun	parser.advance.t	s
	.tylift
	.tyfun	print.t	s
	.tylift
	.tyfun	parser.pos.t
	.tylift
	.tyfun	parser.prim.t	s	α
	.tylift
	.tyfun	list.t	s
	.tyref	either.t	parser.err.t	α

_parser.parse_work_expecting_ty	.tyexpr
list.t	.tygvar
string.t	.tygvar
rune.t	.tygvar
	.tylift
	.tyfun	list.t	string.t
	.tyref	list.t	rune.t

# §section §gs{parser.map}

_parser.map_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	β

# §section §gs{parser.<*>}

_parser.<*>_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	β

# §section §gs{parser.lift2}

_parser.lift2_f_ty	.tyexpr
α0	.tylambda	*
α1	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α0
	.tylift
	.tyfun	α1
	.tyref	β

# §section §gs{parser.symbol.matching.bool}

_parser.symbol.matching.bool_pred_ty	.tyexpr
bool.t	.tygvar
s	.tylambda	*
	.tylift
	.tyfun	s
	.tyref	bool.t

# §section §gs{parser.match}

_parser.match_worker_ty	.tyexpr
order.total.t	.tygvar
regex.t	.tygvar
parser.t	.tygvar
_parser.match_worker_res_ty	.tygvar
s	.tyforall	*
res_ty	.tylet	_parser.match_worker_res_ty	s
	.tylift
	.tyfun	order.total.t	s
	.tylift
	.tyfun	regex.t	s
	.tyref	parser.t	s	res_ty

_parser.match_worker_res_ty	.tyexpr
list.t	.tygvar
s	.tylambda	*
	.tylift
	.tyfun	list.t	s
	.tyref	list.t	s

_parser.match_worker_class_ty	.tyexpr
order.total.t	.tygvar
regex.class.t	.tygvar
bool.t	.tygvar
s	.tyforall	*
	.tylift
	.tyfun	order.total.t	s
	.tylift
	.tyfun	regex.class.t	s
	.tylift
	.tyfun	s
	.tyref	bool.t

# §section §gs{parser.prim.<|>}

_parser.prim.<|>_ty	.tyexpr
parser.prim.t	.tygvar
s	.tyforall	*
α	.tyforall	*
	.tylift
	.tyfun	parser.prim.t	s	α
	.tylift
	.tyfun	parser.prim.t	s	α
	.tyref	parser.prim.t	s	α

	.coercion

parser.prim.t.in	.tycoercion
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tydefinition	parser.prim.t	s	α

parser.prim.t.out	.tycoercion
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tyinvert
	.tydefinition	parser.prim.t	s	α

parser.err.t.in	.tycoercion
parser.err.t	.tygvar
	.tydefinition	parser.err.t

parser.err.t.out	.tycoercion
parser.err.t	.tygvar
	.tyinvert
	.tydefinition	parser.err.t
