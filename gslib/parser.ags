	.prefix

	.data

parser.parse	.closure	_parser.parse_c
_parser.parse_work	.closure	_parser.parse_work_c	_parser.parse_work_ty
parser.exec	.closure	_parser.exec_c

parser.map	.closure	_parser.map_c
parser.unit	.closure	_parser.unit_c

parser.fail	.closure	_parser.fail_c
parser.fail.msg	.closure	_parser.fail.msg_c

parser.prim.unit.plus	.closure	_parser.prim.unit.plus_c
parser.prim.fail	.closure	_parser.prim.fail_c
parser.prim.fail.msg	.closure	_parser.prim.fail.msg_c

parser.err.fmt	.closure	_parser.err.fmt_c
_parser.err.fmt_col.sp	.string	:\s
_parser.err.fmt_parse.failure.s	.string	:\sParse\sfailure

parser.err.≡	.closure	_parser.err.≡_c

parser.err.print	.closure	_parser.err.print_c
_parser.err.print_simple.failure_prefix	.string	simple.failure\s

parser.err.simple.failure	.closure	_parser.err.simple.failure_c
parser.err.message.failure	.closure	_parser.err.message.failure_c

parser.pos.fmt	.closure	_parser.pos.fmt_c
_parser.pos.fmt_line.fake.s	.string	1

parser.pos.≡	.closure	_parser.pos.≡_c
parser.pos.print	.closure	_parser.pos.print_c
_parser.pos.print_s	.string	〈〉

parser.pos.initial	.closure	_parser.pos.initial_c

parser.pos.next.col	.closure	_parser.pos.next.col_c

	.code

# §section §gs{parser.parse}

_parser.parse_c	.expr
parser.pos.t	.tygvar
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.parse_work	.gvar
parser.exec	.gvar
pos	.larg	parser.pos.t
p	.larg	parser.t	s	α
p1	.apply	parser.exec	s	α	|	p
	.app	pos	p1
	.enter	_parser.parse_work	s	α

_parser.parse_work_c	.expr
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.parse_work_k	.subcode
parser.prim.t.out	.cogvar
pos	.larg	parser.pos.t
p	.larg	parser.prim.t	s	α
s	.larg	list.t	s
	.force	_parser.parse_work_k	s	α	|	pos	s
	.coerce	parser.prim.t.out	s	α
	.enter	p

_parser.parse_work_k	.forcecont
parser.pos.t	.tygvar
list.t	.tygvar
parser.prim.u	.tygvar
rune.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.parse_work_unit.plus_k	.subcode
list.t.out	.cogvar
either.left	.gvar
parser.err.simple.failure	.gvar
list.null	.gvar
parser.err.message.failure	.gvar
pos	.fv	parser.pos.t
s	.fv	list.t	s
p0	.karg	parser.prim.u	s	α
	.analyze	p0	fail	fail.msg	unit.plus
		.case	fail
eof			.apply	list.null	s	|	s
sf			.apply	parser.err.simple.failure	|	pos	eof
			.app	sf
			.enter	either.left	parser.err.t	α
		.case	fail.msg
msg		.fkarg	0	list.t	rune.t
eof			.apply	list.null	s	|	s
mf			.apply	parser.err.message.failure	|	pos	eof	msg
			.app	mf
			.enter	either.left	parser.err.t	α
		.case	unit.plus
x		.fkarg	0	α
p1		.fkarg	1	parser.prim.t	s	α
			.force	_parser.parse_work_unit.plus_k	s	α	|	pos	s	x	p1
			.coerce	list.t.out	s
			.enter	s

_parser.parse_work_unit.plus_k	.forcecont
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
s	.tyfv	*
α	.tyfv	*
_parser.parse_work	.gvar
either.right	.gvar
pos	.fv	parser.pos.t
s	.fv	list.t	s
x	.fv	α
p1	.fv	parser.prim.t	s	α
s0	.karg	list.prim.u	s
	.analyze	s0	:	nil
		.case	:
c		.fkarg	0	s
s1		.fkarg	1	list.t	s
			.app	pos	p1	s
			.enter	_parser.parse_work	s	α
		.case	nil
			.app	x
			.enter	either.right	parser.err.t	α

# §section §gs{parser.exec}

_parser.exec_c	.expr
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.exec_k_c	.subcode
p	.larg	parser.t	s	α
k	.alloc	_parser.exec_k_c	s	α
	.app	k
	.enter	p	α

_parser.exec_k_c	.expr
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
parser.prim.unit.plus	.gvar
parser.prim.fail	.gvar
x	.larg	α
fail	.apply	parser.prim.fail	s	α
	.app	x	fail
	.yield	parser.prim.unit.plus	s	α

# §section §gs{parser.map}

_parser.map_c	.expr
_parser.map_f_ty	.tygvar
parser.t	.tygvar
s	.tyarg	*
α	.tyarg	*
β	.tyarg	*
_parser.map_res_c	.subcode
f	.larg	_parser.map_f_ty	α	β
p0	.larg	parser.t	s	α
res	.alloc	_parser.map_res_c	s	α	β	|	p0
	.enter	res

_parser.map_res_c	.expr
parser.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyarg	*
_parser.map_k0_c	.subcode
p0	.fv	parser.t	s	α
k	.larg	_parser.t_k_ty	s	β	r
k0	.alloc	_parser.map_k0_c	s	α	β	r
	.app	k0
	.enter	p0	r

_parser.map_k0_c	.expr
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyfv	*
r	.tyfv	*
x	.larg	α
	.undef	parser.prim.t	s	r

# §section §gs{parser.unit}

_parser.unit_c	.expr
s	.tyarg	*
α	.tyarg	*
_parser.unit_res_c	.subcode
x	.larg	α
res	.alloc	_parser.unit_res_c	s	α	|	x
	.enter	res

_parser.unit_res_c	.expr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyarg	*
x	.fv	α
k	.larg	_parser.t_k_ty	s	α	β
	.app	x
	.enter	k

# §section §gs{parser.fail}

_parser.fail_c	.expr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tyarg	*
α	.tyarg	*
β	.tyarg	*
parser.prim.fail	.gvar
k	.larg	_parser.t_k_ty	s	α	β
	.enter	parser.prim.fail	s	β

# §section Sgs{parser.fail.msg}

_parser.fail.msg_c	.expr
list.t	.tygvar
rune.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.fail.msg_res_c	.subcode
msg	.larg	list.t	rune.t
res	.alloc	_parser.fail.msg_res_c	s	α	|	msg
	.enter	res

_parser.fail.msg_res_c	.expr
list.t	.tygvar
rune.t	.tygvar
_parser.t_k_ty	.tygvar
s	.tyfv	*
α	.tyfv	*
β	.tyarg	*
parser.prim.fail.msg	.gvar
msg	.fv	list.t	rune.t
k	.larg	_parser.t_k_ty	s	α	β
	.app	msg
	.yield	parser.prim.fail.msg	s	β

# §section Constructors

_parser.prim.unit.plus_c	.expr
parser.prim.t	.tygvar
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
x	.arg	α
p	.arg	parser.prim.t	s	α
un	.constr	res.u	unit.plus	0	x	1	p
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	un

_parser.prim.fail_c	.expr
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
f	.constr	res.u	fail
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	f

_parser.prim.fail.msg_c	.expr
list.t	.tygvar
rune.t	.tygvar
parser.prim.u	.tygvar
s	.tyarg	*
α	.tyarg	*
res.u	.tylet	parser.prim.u	s	α
parser.prim.t.in	.cogvar
msg	.arg	list.t	rune.t
f	.constr	res.u	fail.msg	0	msg
	.coerce	parser.prim.t.in	s	α
	.lift
	.yield	f

# §seciton §gs{parser.err.fmt}

_parser.err.fmt_c	.expr
parser.err.t	.tygvar
_parser.err.fmt_k	.subcode
parser.err.t.out	.cogvar
e	.larg	parser.err.t
	.force	_parser.err.fmt_k
	.coerce	parser.err.t.out
	.enter	e

_parser.err.fmt_k	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
list.<>	.gvar
parser.pos.fmt	.gvar
_parser.err.fmt_col.sp	.gvar
_parser.err.fmt_parse.failure.s	.gvar
e0	.karg	parser.err.prim.u
	.analyze	e0	message.failure	simple.failure
		.case	message.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
msg		.fkarg	2	list.t	rune.t
pos.s			.apply	parser.pos.fmt	|	eof	pos
s1			.apply	list.<>	rune.t	|	_parser.err.fmt_col.sp	msg
			.app	pos.s	s1
			.enter	list.<>	rune.t
		.case	simple.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
pos.s			.apply	parser.pos.fmt	|	eof	pos
			.app	pos.s	_parser.err.fmt_parse.failure.s
			.enter	list.<>	rune.t

# §section §gs{parser.err.≡}

_parser.err.≡_c	.expr
parser.err.t	.tygvar
_parser.err.≡_k0	.subcode
parser.err.t.out	.cogvar
e0	.larg	parser.err.t
e1	.larg	parser.err.t
	.force	_parser.err.≡_k0	|	e1
	.coerce	parser.err.t.out
	.enter	e0

_parser.err.≡_k0	.forcecont
parser.err.t	.tygvar
parser.err.prim.u	.tygvar
_parser.err.≡_k1	.subcode
parser.err.t.out	.cogvar
e1	.fv	parser.err.t
e0.0	.karg	parser.err.prim.u
	.force	_parser.err.≡_k1	|	e0.0
	.coerce	parser.err.t.out
	.enter	e1

_parser.err.≡_k1	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.pos.≡	.gvar
e0.0	.fv	parser.err.prim.u
e1.0	.karg	parser.err.prim.u
	.analyze	e0.0	message.failure	simple.failure
		.case	message.failure
pos0		.fkarg	0	parser.pos.t
eof0		.fkarg	1	bool.t
msg0		.fkarg	2	list.t	rune.t
			.undef	bool.t
		.case	simple.failure
pos0		.fkarg	0	parser.pos.t
eof1		.fkarg	1	bool.t
			.danalyze	e0.0	simple.failure
				.default
					.undef	bool.t
				.case	simple.failure
pos1				.fkarg	0	parser.pos.t
eof1				.fkarg	1	bool.t
					.app	pos0	pos1
					.enter	parser.pos.≡

# §section §gs{parser.err.print}

_parser.err.print_c	.expr
parser.err.t	.tygvar
_parser.err.print_k	.subcode
parser.err.t.out	.cogvar
e	.larg	parser.err.t
	.force	_parser.err.print_k
	.coerce	parser.err.t.out
	.enter	e

_parser.err.print_k	.forcecont
parser.err.prim.u	.tygvar
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
list.<>	.gvar
_parser.err.print_simple.failure_prefix	.gvar
parser.pos.print	.gvar
list.:	.gvar
rune.space	.gvar
bool.print	.gvar
e0	.karg	parser.err.prim.u
	.analyze	e0	message.failure	simple.failure
		.case	message.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
msg		.fkarg	2	list.t	rune.t
			.undef	list.t	rune.t
		.case	simple.failure
pos		.fkarg	0	parser.pos.t
eof		.fkarg	1	bool.t
pos.s			.apply	parser.pos.print	|	pos
eof.s			.apply	bool.print	|	eof
s1			.apply	list.:	rune.t	|	rune.space	pos.s
s2			.apply	list.<>	rune.t	|	eof.s	s1
			.app	_parser.err.print_simple.failure_prefix	s2
			.enter	list.<>	rune.t

# §section §gs{parser.err.t} constructors

_parser.err.simple.failure_c	.expr
parser.pos.t	.tygvar
bool.t	.tygvar
parser.err.prim.u	.tygvar
parser.err.t.in	.cogvar
pos	.arg	parser.pos.t
eof	.arg	bool.t
c	.constr	parser.err.prim.u	simple.failure	0	pos	1	eof
	.coerce	parser.err.t.in
	.lift
	.yield	c

_parser.err.message.failure_c	.expr
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
parser.err.prim.u	.tygvar
parser.err.t.in	.cogvar
pos	.arg	parser.pos.t
eof	.arg	bool.t
msg	.arg	list.t	rune.t
c	.constr	parser.err.prim.u	message.failure	0	pos	1	eof	2	msg
	.coerce	parser.err.t.in
	.lift
	.yield	c

# §section §gs{parser.pos.fmt}

_parser.pos.fmt_c	.expr
bool.t	.tygvar
parser.pos.t	.tygvar
_parser.pos.fmt_k	.subcode
bool.t.out	.cogvar
eof	.larg	bool.t
pos	.larg	parser.pos.t
	.force	_parser.pos.fmt_k	|	pos
	.coerce	bool.t.out
	.enter	eof

_parser.pos.fmt_k	.forcecont
parser.pos.t	.tygvar
bool.prim.u	.tygvar
rune.t	.tygvar
list.<>	.gvar
ibio.file.name.print	.gvar
list.:	.gvar
rune.colon	.gvar
_parser.pos.fmt_line.fake.s	.gvar
natural.fmtdecimal	.gvar
pos	.fv	parser.pos.t
eof0	.karg	bool.prim.u
	.analyze	eof0	false	true
		.case	false
fn			.lfield	file	pos
col			.lfield	col	pos
fn.s			.apply	ibio.file.name.print	|	fn
col.s			.apply	natural.fmtdecimal	|	col
s3			.apply	list.:	rune.t	|	rune.colon	col.s
s2			.apply	list.<>	rune.t	|	_parser.pos.fmt_line.fake.s	s3
s1			.apply	list.:	rune.t	|	rune.colon	s2
			.app	fn.s	s1
			.enter	list.<>	rune.t
		.case	true
fn			.lfield	file	pos
			.app	fn
			.enter	ibio.file.name.print

# §section §gs{parser.pos.≡}

_parser.pos.≡_c	.expr
parser.pos.t	.tygvar
bool.∧	.gvar
ibio.file.name.≡	.gvar
natural.≡	.gvar
pos0	.larg	parser.pos.t
pos1	.larg	parser.pos.t
pos0.file	.lfield	file	pos0
pos0.col	.lfield	col	pos0
pos1.file	.lfield	file	pos1
pos1.col	.lfield	col	pos1
b0	.apply	ibio.file.name.≡	|	pos0.file	pos1.file
b1	.apply	natural.≡	|	pos0.col	pos1.col
	.app	b0	b1
	.enter	bool.∧

# §section §gs{parser.pos.print}

_parser.pos.print_c	.expr
parser.pos.t	.tygvar
_parser.pos.print_s	.gvar
pos	.larg	parser.pos.t
	.enter	_parser.pos.print_s

# §section §gs{parser.pos.initial}

_parser.pos.initial_c	.expr
ibio.file.name.t	.tygvar
natural.1	.gvar
fn	.larg	ibio.file.name.t
r	.record	col	natural.1	file	fn
	.lift
	.yield	r

# §section §gs{parser.pos.next.col}
_parser.pos.next.col_c	.expr
parser.pos.t	.tygvar
natural.+	.gvar
natural.1	.gvar
pos	.larg	parser.pos.t
fn	.lfield	file	pos
col	.lfield	col	pos
col.1	.apply	natural.+	|	col	natural.1
r	.record	col	col.1	file	fn
	.lift
	.yield	r

	.type

# §section §gs{parser.t}

parser.t	.tyexpr
_parser.t_k_ty	.tygvar
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
β	.tyforall	*
	.tylift
	.tyfun	_parser.t_k_ty	s	α	β
	.tyref	parser.prim.t	s	β

_parser.t_k_ty	.tyexpr
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	parser.prim.t	s	β

parser.prim.t	.tyabstract	**^*^
parser.prim.u	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tylift
	.tyref	parser.prim.u	s	α

parser.prim.u	.tyexpr
_parser.prim.u_fail.ty	.tygvar
_parser.prim.u_fail.msg.ty	.tygvar
_parser.prim.u_unit.plus.ty	.tygvar
s	.tylambda	*
α	.tylambda	*
unit.plus.ty	.tylet	_parser.prim.u_unit.plus.ty	s	α
	.tysum	fail	_parser.prim.u_fail.ty	fail.msg	_parser.prim.u_fail.msg.ty	unit.plus	unit.plus.ty

_parser.prim.u_fail.ty	.tyexpr
	.tyubproduct

_parser.prim.u_fail.msg.ty	.tyexpr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
	.tyubproduct	0	string.ty

_parser.prim.u_unit.plus.ty	.tyexpr
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
1.ty	.tylet	parser.prim.t	s	α
	.tyubproduct	0	α	1	1.ty

# §section §gs{parser.err.t}

parser.err.t	.tyabstract	*
parser.err.prim.u	.tygvar
	.tylift
	.tyref	parser.err.prim.u

parser.err.prim.u	.tyexpr
_parser.err.prim.u_message.failure_ty	.tygvar
_parser.err.prim.u_simple.failure_ty	.tygvar
	.tysum	message.failure	_parser.err.prim.u_message.failure_ty	simple.failure	_parser.err.prim.u_simple.failure_ty

_parser.err.prim.u_message.failure_ty	.tyexpr
parser.pos.t	.tygvar
bool.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
	.tyubproduct	0	parser.pos.t	1	bool.t	2	string.ty

_parser.err.prim.u_simple.failure_ty	.tyexpr
parser.pos.t	.tygvar
bool.t	.tygvar
	.tyubproduct	0	parser.pos.t	1	bool.t

# §section §gs{parser.pos.t}

parser.pos.t	.tyexpr
parser.pos.u	.tygvar
	.tylift
	.tyref	parser.pos.u

parser.pos.u	.tyexpr
natural.t	.tygvar
ibio.file.name.t	.tygvar
	.typroduct	col	natural.t	file	ibio.file.name.t

# §section §gs{parser.parse}

_parser.parse_work_ty	.tyexpr
parser.pos.t	.tygvar
parser.prim.t	.tygvar
list.t	.tygvar
either.t	.tygvar
parser.err.t	.tygvar
s	.tyforall	*
α	.tyforall	*
	.tylift
	.tyfun	parser.pos.t
	.tylift
	.tyfun	parser.prim.t	s	α
	.tylift
	.tyfun	list.t	s
	.tyref	either.t	parser.err.t	α

# §section §gs{_parser.map_f_ty}

_parser.map_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	β

	.coercion

parser.prim.t.in	.tycoercion
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tydefinition	parser.prim.t	s	α

parser.prim.t.out	.tycoercion
parser.prim.t	.tygvar
s	.tylambda	*
α	.tylambda	*
	.tyinvert
	.tydefinition	parser.prim.t	s	α

parser.err.t.in	.tycoercion
parser.err.t	.tygvar
	.tydefinition	parser.err.t

parser.err.t.out	.tycoercion
parser.err.t	.tygvar
	.tyinvert
	.tydefinition	parser.err.t
