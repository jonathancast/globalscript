#calculus: gsdl.string-code 0.6

	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test_tsort_single.elem	_test_tsort_two.elems	_test_tsort_dependency

_test_tsort_single.elem	.closure	_test_tsort_single.elem_c
_test_tsort_single.elem_label	.string	tsort\sa\ssingle\selement\swith\sno\sdependencies

_test_tsort_two.elems	.closure	_test_tsort_two.elems_c
_test_tsort_two.elems_label	.string	tsort\stwo\selements\swith\sno\sdependencies

_test_tsort_dependency	.closure	_test_tsort_dependency_c
_test_tsort_dependency_label	.string	tsort\stwo\selements\swith\sone\sdependency

_fixtures.val.compare	.closure	_fixtures.val.compare_c

_fixtures.val.fmtgs	.closure	_fixtures.val.fmtgs_c
_fixtures.val.fmtgs_key.s	.string	key
_fixtures.val.fmtgs_val.s	.string	val

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

-- §section §gs{tsort} a single element with no dependencies

_test_tsort_single.elem_c	.expr
list.t	.tygvar
graph.scc.t	.tygvar
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_single.elem_val.deps_c	.subcode
_test_tsort_single.elem_val.look_c	.subcode
test.property.label	.gvar
_test_tsort_single.elem_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
graph.scc.≡	.gvar
_fixtures.val.compare	.gvar
list.fmtgs.byDefault	.gvar
graph.scc.fmtgs	.gvar
_fixtures.val.fmtgs	.gvar
graph.tsort	.gvar
natural.compare	.gvar
list.singleton	.gvar
graph.scc.nonrecursive	.gvar
natural.0	.gvar
bool.true	.gvar
scc.ty	.tylet	graph.scc.t	_fixtures.val.t
list.scc.ty	.tylet	list.t	scc.ty
scc.≡	.apply	graph.scc.≡	_fixtures.val.t	|	_fixtures.val.compare
list.scc.≡	.apply	list.≡	scc.ty	|	scc.≡
scc.fmtgs	.apply	graph.scc.fmtgs	_fixtures.val.t	|	_fixtures.val.fmtgs
list.scc.fmtgs	.apply	list.fmtgs.byDefault	scc.ty	|	scc.fmtgs
val.deps	.closure	_test_tsort_single.elem_val.deps_c
val0	.lrecord	key	natural.0	val	bool.true	|	_fixtures.val.t
val.look	.closure	_test_tsort_single.elem_val.look_c
ks	.apply	list.singleton	natural.t	|	natural.0
actual	.apply	graph.tsort	natural.t	_fixtures.val.t	|	natural.compare	val.deps	val.look	ks
scc0	.apply	graph.scc.nonrecursive	_fixtures.val.t	|	val0
expected	.apply	list.singleton	scc.ty	|	scc0
test	.apply	test.assert.eq	list.scc.ty	|	list.scc.≡	list.scc.fmtgs	actual	expected
	.app	_test_tsort_single.elem_label	test
	.enter	test.property.label

_test_tsort_single.elem_val.deps_c	.expr
_fixtures.val.t	.tygvar
natural.t	.tygvar
list.nil	.gvar
v	.larg	_fixtures.val.t
	.enter	list.nil	natural.t

_test_tsort_single.elem_val.look_c	.expr
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_single.elem_val.look_k	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.0	.gvar
val0	.fv	_fixtures.val.t
k	.larg	natural.t
	.force	_test_tsort_single.elem_val.look_k
	.coerce	bool.t.out
	.app	k	natural.0
	.enter	natural.≡

_test_tsort_single.elem_val.look_k	.forcecont
_fixtures.val.t	.tygvar
bool.prim.u	.tygvar
maybe.t	.tygvar	-- Temp
maybe.just	.gvar
val0	.fv	_fixtures.val.t
b0	.karg	bool.prim.u	-- Is §gs{k ≡ 0}?
	.analyze	b0	false	true
		.case	false
			.undef	maybe.t	_fixtures.val.t
		.case	true
			.app	val0
			.yield	maybe.just	_fixtures.val.t

-- §section §gs{tsort} two elements with no dependencies

_test_tsort_two.elems_c	.expr
list.t	.tygvar
graph.scc.t	.tygvar
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_two.elems_val.deps_c	.subcode
_test_tsort_two.elems_val.look_c	.subcode
test.property.label	.gvar
_test_tsort_two.elems_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
graph.scc.≡	.gvar
_fixtures.val.compare	.gvar
list.fmtgs.byDefault	.gvar
graph.scc.fmtgs	.gvar
_fixtures.val.fmtgs	.gvar
graph.tsort	.gvar
natural.compare	.gvar
natural.0	.gvar
bool.true	.gvar
natural.1	.gvar
bool.false	.gvar
list.:	.gvar
list.singleton	.gvar
graph.scc.nonrecursive	.gvar
scc.ty	.tylet	graph.scc.t	_fixtures.val.t
list.scc.ty	.tylet	list.t	scc.ty
scc.≡	.apply	graph.scc.≡	_fixtures.val.t	|	_fixtures.val.compare
list.scc.≡	.apply	list.≡	scc.ty	|	scc.≡
scc.fmtgs	.apply	graph.scc.fmtgs	_fixtures.val.t	|	_fixtures.val.fmtgs
list.scc.fmtgs	.apply	list.fmtgs.byDefault	scc.ty	|	scc.fmtgs
val.deps	.closure	_test_tsort_two.elems_val.deps_c
val0	.lrecord	key	natural.0	val	bool.true	|	_fixtures.val.t
val1	.lrecord	key	natural.1	val	bool.false	|	_fixtures.val.t
val.look	.closure	_test_tsort_two.elems_val.look_c
ks1	.apply	list.singleton	natural.t	|	natural.1
ks	.apply	list.:	natural.t	|	natural.0	ks1
actual	.apply	graph.tsort	natural.t	_fixtures.val.t	|	natural.compare	val.deps	val.look	ks
scc0	.apply	graph.scc.nonrecursive	_fixtures.val.t	|	val0
scc1	.apply	graph.scc.nonrecursive	_fixtures.val.t	|	val1
sccs1	.apply	list.singleton	scc.ty	|	scc1
expected	.apply	list.:	scc.ty	|	scc0	sccs1
test	.apply	test.assert.eq	list.scc.ty	|	list.scc.≡	list.scc.fmtgs	actual	expected
	.app	_test_tsort_two.elems_label	test
	.enter	test.property.label

_test_tsort_two.elems_val.deps_c	.expr
_fixtures.val.t	.tygvar
natural.t	.tygvar
list.nil	.gvar
v	.larg	_fixtures.val.t
	.enter	list.nil	natural.t

_test_tsort_two.elems_val.look_c	.expr
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_two.elems_val.look_k	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.0	.gvar
val0	.fv	_fixtures.val.t
val1	.fv	_fixtures.val.t
k	.larg	natural.t
	.force	_test_tsort_two.elems_val.look_k
	.coerce	bool.t.out
	.app	k	natural.0
	.enter	natural.≡

_test_tsort_two.elems_val.look_k	.forcecont
_fixtures.val.t	.tygvar
natural.t	.tygvar
bool.prim.u	.tygvar
_test_tsort_two.elems_val.look_k1	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.1	.gvar
maybe.just	.gvar
val0	.fv	_fixtures.val.t
val1	.fv	_fixtures.val.t
k	.fv	natural.t
b0	.karg	bool.prim.u	-- Is §gs{k ≡ 0}?
	.analyze	b0	false	true
		.case	false
			.force	_test_tsort_two.elems_val.look_k1
			.coerce	bool.t.out
			.app	k	natural.1
			.enter	natural.≡
		.case	true
			.app	val0
			.yield	maybe.just	_fixtures.val.t

_test_tsort_two.elems_val.look_k1	.forcecont
_fixtures.val.t	.tygvar
bool.prim.u	.tygvar
maybe.t	.tygvar	-- Temp
maybe.just	.gvar
val1	.fv	_fixtures.val.t
b0	.karg	bool.prim.u	-- Is §gs{k ≡ 1}?
	.analyze	b0	false	true
		.case	false
			.undef	maybe.t	_fixtures.val.t
		.case	true
			.app	val1
			.yield	maybe.just	_fixtures.val.t

-- §section §gs{tsort} two elements with one dependency

_test_tsort_dependency_c	.expr
list.t	.tygvar
graph.scc.t	.tygvar
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_dependency_val.deps_c	.subcode
_test_tsort_dependency_val.look_c	.subcode
test.property.label	.gvar
_test_tsort_dependency_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
graph.scc.≡	.gvar
_fixtures.val.compare	.gvar
list.fmtgs.byDefault	.gvar
graph.scc.fmtgs	.gvar
_fixtures.val.fmtgs	.gvar
graph.tsort	.gvar
natural.compare	.gvar
natural.0	.gvar
bool.true	.gvar
natural.1	.gvar
bool.false	.gvar
list.:	.gvar
list.singleton	.gvar
graph.scc.nonrecursive	.gvar
scc.ty	.tylet	graph.scc.t	_fixtures.val.t
list.sccy.ty	.tylet	list.t	scc.ty
scc.≡	.apply	graph.scc.≡	_fixtures.val.t	|	_fixtures.val.compare
list.scc.≡	.apply	list.≡	scc.ty	|	scc.≡
scc.fmtgs	.apply	graph.scc.fmtgs	_fixtures.val.t	|	_fixtures.val.fmtgs
list.scc.fmtgs	.apply	list.fmtgs.byDefault	scc.ty	|	scc.fmtgs
val.deps	.closure	_test_tsort_dependency_val.deps_c
val0	.lrecord	key	natural.0	val	bool.true	|	_fixtures.val.t
val1	.lrecord	key	natural.1	val	bool.false	|	_fixtures.val.t
val.look	.closure	_test_tsort_dependency_val.look_c
ks1	.apply	list.singleton	natural.t	|	natural.1
ks	.apply	list.:	natural.t	|	natural.0	ks1
actual	.apply	graph.tsort	natural.t	_fixtures.val.t	|	natural.compare	val.deps	val.look	ks
scc0	.apply	graph.scc.nonrecursive	_fixtures.val.t	|	val1	-- §gs{val0} depends on §gs{val0} so output in reverse order
scc1	.apply	graph.scc.nonrecursive	_fixtures.val.t	|	val0
expected1	.apply	list.singleton	scc.ty	|	scc1
expected	.apply	list.:	scc.ty	|	scc0	expected1
test	.apply	test.assert.eq	list.sccy.ty	|	list.scc.≡	list.scc.fmtgs	actual	expected
	.app	_test_tsort_dependency_label	test
	.enter	test.property.label

_test_tsort_dependency_val.deps_c	.expr
_fixtures.val.t	.tygvar
_test_tsort_dependency_val.deps_k	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.0	.gvar
v	.larg	_fixtures.val.t
v.key	.lfield	key	v
	.force	_test_tsort_dependency_val.deps_k
	.coerce	bool.t.out
	.app	v.key	natural.0
	.enter	natural.≡

_test_tsort_dependency_val.deps_k	.forcecont
bool.prim.u	.tygvar
natural.t	.tygvar
list.nil	.gvar
list.singleton	.gvar
natural.1	.gvar
b0	.karg	bool.prim.u	-- §gs{#key v ≡ 0}
	.analyze	b0	false	true
		.case	false
			.enter	list.nil	natural.t
		.case	true
			.app	natural.1
			.enter	list.singleton	natural.t

_test_tsort_dependency_val.look_c	.expr
_fixtures.val.t	.tygvar
natural.t	.tygvar
_test_tsort_dependency_val.look_k	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.0	.gvar
val0	.fv	_fixtures.val.t
val1	.fv	_fixtures.val.t
v	.larg	natural.t
	.force	_test_tsort_dependency_val.look_k
	.coerce	bool.t.out
	.app	v	natural.0
	.enter	natural.≡

_test_tsort_dependency_val.look_k	.forcecont
natural.t	.tygvar
_fixtures.val.t	.tygvar
bool.prim.u	.tygvar
_test_tsort_dependency_val.look_false_k	.subcode
bool.t.out	.cogvar
natural.≡	.gvar
natural.1	.gvar
maybe.just	.gvar
v	.fv	natural.t
val0	.fv	_fixtures.val.t
val1	.fv	_fixtures.val.t
b0	.karg	bool.prim.u	-- §gs{v ≡ 0}
	.analyze	b0	false	true
		.case	false
			.force	_test_tsort_dependency_val.look_false_k
			.coerce	bool.t.out
			.app	v	natural.1
			.enter	natural.≡
		.case	true
			.app	val0
			.yield	maybe.just	_fixtures.val.t

_test_tsort_dependency_val.look_false_k	.forcecont
_fixtures.val.t	.tygvar
bool.prim.u	.tygvar
maybe.t	.tygvar	-- Temp
maybe.just	.gvar
val1	.fv	_fixtures.val.t
b0	.karg	bool.prim.u	-- §gs{v ≡ 1}
	.analyze	b0	false	true
		.case	false
			.undef	maybe.t	_fixtures.val.t
		.case	true
			.app	val1
			.yield	maybe.just	_fixtures.val.t

-- §section Test fixtures

-- §subsection §gs{_fixtures.val.compare}

_fixtures.val.compare_c	.expr
_fixtures.val.t	.tygvar
_fixtures.val.compare_k	.subcode
order.total.ord.t.out	.cogvar
natural.compare	.gvar
v0	.larg	_fixtures.val.t
v1	.larg	_fixtures.val.t
v0.key	.lfield	key	v0
v1.key	.lfield	key	v1
	.force	_fixtures.val.compare_k
	.coerce	order.total.ord.t.out
	.app	v0.key	v1.key
	.enter	natural.compare

_fixtures.val.compare_k	.forcecont
_fixtures.val.t	.tygvar
order.total.ord.prim.u	.tygvar
order.total.ord.t	.tygvar	-- Temp
bool.compare	.gvar
v0	.fv	_fixtures.val.t
v1	.fv	_fixtures.val.t
o0	.karg	order.total.ord.prim.u
	.analyze	o0	eq	gt	lt
		.case	eq
v0.val			.lfield	val	v0
v1.val			.lfield	val	v1
			.app	v0.val	v1.val
			.enter	bool.compare
		.case	gt
			.undef	order.total.ord.t
		.case	lt
			.undef	order.total.ord.t

-- §subsection §gs{_fixtures.val.fmtgs}

_fixtures.val.fmtgs_c	.expr
_fixtures.val.t	.tygvar
fmtgs.record.field.printer.t	.tygvar
fmtgs.record	.gvar
list.:	.gvar
_fixtures.val.fmtgs_key.s	.gvar
natural.fmtgs	.gvar
list.singleton	.gvar
_fixtures.val.fmtgs_val.s	.gvar
bool.fmtgs	.gvar
v	.larg	_fixtures.val.t
v.key	.lfield	key	v
v.key.pr	.apply	natural.fmtgs	|	v.key
f.pr.key	.lrecord	field	_fixtures.val.fmtgs_key.s	val	v.key.pr	|	fmtgs.record.field.printer.t
v.val	.lfield	val	v
v.val.pr	.apply	bool.fmtgs	|	v.val
f.pr.val	.lrecord	field	_fixtures.val.fmtgs_val.s	val	v.val.pr	|	fmtgs.record.field.printer.t
fs.pr1	.apply	list.singleton	fmtgs.record.field.printer.t	|	f.pr.val
fs.pr	.apply	list.:	fmtgs.record.field.printer.t	|	f.pr.key	fs.pr1
	.app	fs.pr
	.enter	fmtgs.record

	.type

-- §section Test fixtures

_fixtures.val.t	.tyexpr
natural.t	.tygvar
bool.t	.tygvar
	.tylift
	.typroduct	key	natural.t	val	bool.t
