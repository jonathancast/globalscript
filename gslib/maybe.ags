	.prefix

	.data

maybe.nothing	.closure	_maybe.nothing_c
maybe.just	.closure	_maybe.just_c

maybe.≡	.closure	_maybe.≡_c

maybe.fmtgs	.closure	_maybe.fmtgs_c
_maybe.fmtgs_just.s	.string	just
_maybe.fmtgs_nothing.s	.string	nothing

	.code

# §section Constructors

_maybe.nothing_c	.expr
maybe.prim.u	.tygvar
α	.tyarg	*
res.u	.tylet	maybe.prim.u	α
maybe.t.in	.cogvar
n	.constr	res.u	nothing
	.coerce	maybe.t.in	α
	.lift
	.yield	n

_maybe.just_c	.expr
maybe.prim.u	.tygvar
α	.tyarg	*
res.u	.tylet	maybe.prim.u	α
maybe.t.in	.cogvar
x	.arg	α
j	.constr	res.u	just	0	x
	.coerce	maybe.t.in	α
	.lift
	.yield	j

# §section §gs{maybe.≡}

_maybe.≡_c	.expr
_maybe.≡_eq_ty	.tygvar
maybe.t	.tygvar
α	.tyarg	*
_maybe.≡_k0	.subcode
maybe.t.out	.cogvar
eq	.larg	_maybe.≡_eq_ty	α
mb0	.larg	maybe.t	α
mb1	.larg	maybe.t	α
	.force	_maybe.≡_k0	α	|	eq	mb1
	.coerce	maybe.t.out	α
	.enter	mb0

_maybe.≡_k0	.forcecont
_maybe.≡_eq_ty	.tygvar
maybe.t	.tygvar
maybe.prim.u	.tygvar
α	.tyfv	*
_maybe.≡_k1	.subcode
maybe.t.out	.cogvar
eq	.fv	_maybe.≡_eq_ty	α
mb1	.fv	maybe.t	α
mb0.0	.karg	maybe.prim.u	α
	.force	_maybe.≡_k1	α	|	eq	mb0.0
	.coerce	maybe.t.out	α
	.enter	mb1

_maybe.≡_k1	.forcecont
_maybe.≡_eq_ty	.tygvar
maybe.prim.u	.tygvar
bool.t	.tygvar
α	.tyfv	*
bool.false	.gvar
bool.true	.gvar
eq	.fv	_maybe.≡_eq_ty	α
mb0.0	.fv	maybe.prim.u	α
mb1.0	.karg	maybe.prim.u	α
	.analyze	mb0.0	just	nothing
		.case	just
x0		.fkarg	0	α
			.analyze	mb1.0	just	nothing
				.case	just
x1				.fkarg	0	α
					.app	x0	x1
					.enter	eq
				.case	nothing
					.enter	bool.false
		.case	nothing
			.analyze	mb1.0	just	nothing
				.case	just
x1				.fkarg	0	α
					.undef	bool.t
				.case	nothing
					.enter	bool.true

# §section §gs{maybe.fmtgs}

_maybe.fmtgs_c	.expr
_maybe.fmtgs_pr_ty	.tygvar
maybe.t	.tygvar
α	.tyarg	*
_maybe.fmtgs_k	.subcode
maybe.t.out	.cogvar
pr	.larg	_maybe.fmtgs_pr_ty	α
mb	.larg	maybe.t	α
	.force	_maybe.fmtgs_k	α	|	pr
	.coerce	maybe.t.out	α
	.enter	mb

_maybe.fmtgs_k	.forcecont
fmtgs.t	.tygvar
maybe.prim.u	.tygvar
list.t	.tygvar
rune.t	.tygvar
α	.tyfv	*
list.<>	.gvar
list.:	.gvar
rune.space	.gvar
_maybe.fmtgs_just.s	.gvar
_maybe.fmtgs_nothing.s	.gvar
pr	.fv	fmtgs.t	α
mb0	.karg	maybe.prim.u	α
	.analyze	mb0	just	nothing
		.case	just
x		.fkarg	0	α
s2			.apply	pr	|	x
s1			.apply	list.:	rune.t	|	rune.space	s2
			.app	_maybe.fmtgs_just.s	s1
			.enter	list.<>	rune.t
		.case	nothing
			.enter	_maybe.fmtgs_nothing.s

	.type

maybe.t	.tyabstract	**^
maybe.prim.u	.tygvar
α	.tylambda	*
	.tylift
	.tyref	maybe.prim.u	α

maybe.prim.u	.tyexpr
_maybe.prim.u_just_ty	.tygvar
_maybe.prim.u_nothing_ty	.tygvar
α	.tylambda	*
just_ty	.tylet	_maybe.prim.u_just_ty	α
	.tysum	just	just_ty	nothing	_maybe.prim.u_nothing_ty

_maybe.prim.u_just_ty	.tyexpr
α	.tylambda	*
	.tyubproduct	0	α

_maybe.prim.u_nothing_ty	.tyexpr
	.tyubproduct

# §section §gs{maybe.≡}

_maybe.≡_eq_ty	.tyexpr
bool.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	α
	.tylift
	.tyfun	α
	.tyref	bool.t

# §section §gs{maybe.fmtgs}

_maybe.fmtgs_pr_ty	.tyexpr
list.t	.tygvar
rune.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	list.t	rune.t

	.coercion

maybe.t.in	.tycoercion
maybe.t	.tygvar
α	.tylambda	*
	.tydefinition	maybe.t	α

maybe.t.out	.tycoercion
maybe.t	.tygvar
α	.tylambda	*
	.tyinvert
	.tydefinition	maybe.t	α
