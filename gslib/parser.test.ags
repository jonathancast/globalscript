	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.unit	_test.err.≡.simple.failure.simple.failure	_test.err.print.simple.failure	_test.pos.eq.x.x	_test.pos.print

_test.unit	.closure	_test.unit_c
_test.unit_label	.string	parser.unit
_test.unit_test_fail.msg	.string	Constructor\sis\snot\sunit.plus
_test.unit_test_succ.msg	.string	Constructor\sis\sunit.plus

_test.err.≡.simple.failure.simple.failure	.closure	_test.err.≡.simple.failure.simple.failure_c
_test.err.≡.simple.failure.simple.failure_label	.string	simple.failure\s≡\ssimple.failure
_test.err.≡.simple.failure.simple.failure_fail.msg	.string	simple.failure\s≠\ssimple.failure
_test.err.≡.simple.failure.simple.failure_succ.msg	.string	simple.failure\s≡\ssimple.failure

_test.err.print.simple.failure	.closure	_test.err.print.simple.failure_c
_test.err.print.simple.failure_label	.string	err.print\ssimple.failure
_test.err.print.simple.failure_expected	.string	simple.failure\s〈〉

_test.pos.eq.x.x	.closure	_test.pos.eq.x.x_c
_test.pos.eq.x.x_label	.string	parser.pos.≡\sx\sx
_test.pos.eq.x.x_fail.msg	.string	pos.initial\sfn\s≠\spos.initial\sfn
_test.pos.eq.x.x_succ.msg	.string	pos.initial\sfn\s≡\spos.initial\sfn

_test.pos.print	.closure	_test.pos.print_c
_test.pos.print_label	.string	pos.print\spos.initial
_test.pos.print_expected	.string	〈〉

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{parser.unit}

_test.unit_c	.expr
_test.unit_test_c	.subcode
test.property.label	.gvar
_test.unit_label	.gvar
test	.alloc	_test.unit_test_c
	.app	_test.unit_label	test
	.enter	test.property.label

_test.unit_test_c	.expr
rune.t	.tygvar
record.empty	.tygvar
_test.unit_test_k	.subcode
parser.prim.t.out	.cogvar
parser.exec	.gvar
parser.unit	.gvar
record.empty	.gvar
unit	.apply	parser.unit	rune.t	record.empty	|	record.empty
	.force	_test.unit_test_k
	.coerce	parser.prim.t.out	rune.t	record.empty
	.app	unit
	.enter	parser.exec	rune.t	record.empty

_test.unit_test_k	.forcecont
parser.prim.u	.tygvar
rune.t	.tygvar
record.empty	.tygvar
parser.prim.t	.tygvar
test.property.false	.gvar
_test.unit_test_fail.msg	.gvar
test.property.true	.gvar
_test.unit_test_succ.msg	.gvar
u0	.karg	parser.prim.u	rune.t	record.empty
	.danalyze	u0	unit.plus
		.default
			.app	_test.unit_test_fail.msg
			.enter	test.property.false
		.case	unit.plus
x		.fkarg	0	record.empty
p1		.fkarg	1	parser.prim.t	rune.t	record.empty
			.app	_test.unit_test_succ.msg
			.enter	test.property.true

# §section §gs{parser.err.print simple.failure}

_test.err.print.simple.failure_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.err.print.simple.failure_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
parser.err.print	.gvar
parser.err.simple.failure	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.err.print.simple.failure_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos
sf.s	.apply	parser.err.print	|	sf
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	sf.s	_test.err.print.simple.failure_expected
	.app	_test.err.print.simple.failure_label	test
	.enter	test.property.label

# §section §gs{simple.failure ≡ simple.failure}

_test.err.≡.simple.failure.simple.failure_c	.expr
test.property.label	.gvar
_test.err.≡.simple.failure.simple.failure_label	.gvar
test.assert	.gvar
_test.err.≡.simple.failure.simple.failure_fail.msg	.gvar
_test.err.≡.simple.failure.simple.failure_succ.msg	.gvar
parser.err.≡	.gvar
parser.err.simple.failure	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos
b	.apply	parser.err.≡	|	sf	sf
test	.apply	test.assert	|	_test.err.≡.simple.failure.simple.failure_fail.msg	_test.err.≡.simple.failure.simple.failure_succ.msg	b
	.app	_test.err.≡.simple.failure.simple.failure_label	test
	.enter	test.property.label

# > test.property.label qq{...} $
# >     test.assert qq{...} qq{...} $
# >         parser.err.≡ sf sf
# > where
# >     'sf ∝ parser.err.simple.failure (parser.pos.initial parser.test.assert.fixtures.sample.file.name)

# §section §gs{parser.pos.≡ x x}

_test.pos.eq.x.x_c	.expr
test.property.label	.gvar
_test.pos.eq.x.x_label	.gvar
test.assert	.gvar
_test.pos.eq.x.x_fail.msg	.gvar
_test.pos.eq.x.x_succ.msg	.gvar
parser.pos.≡	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
b	.apply	parser.pos.≡	|	pos	pos
test	.apply	test.assert	|	_test.pos.eq.x.x_fail.msg	_test.pos.eq.x.x_succ.msg	b
	.app	_test.pos.eq.x.x_label	test
	.enter	test.property.label

# §section §gs{parser.pos.print simple.failure}

_test.pos.print_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.pos.print_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
parser.pos.print	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.print_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
pos.s	.apply	parser.pos.print	|	pos
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	pos.s	_test.pos.print_expected
	.app	_test.pos.print_label	test
	.enter	test.property.label
