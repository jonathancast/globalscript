	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.fail.nil	_test.err.≡.simple.failure.simple.failure	_test.err.print.simple.failure	_test.pos.eq.x.x	_test.pos.eq.diff.file	_test.pos.print

_test.fail.nil	.closure	_test.fail.nil_c
_test.fail.nil_label	.string	parse\sfail\sqq{}

_test.err.≡.simple.failure.simple.failure	.closure	_test.err.≡.simple.failure.simple.failure_c
_test.err.≡.simple.failure.simple.failure_label	.string	simple.failure\s≡\ssimple.failure
_test.err.≡.simple.failure.simple.failure_fail.msg	.string	simple.failure\s≠\ssimple.failure
_test.err.≡.simple.failure.simple.failure_succ.msg	.string	simple.failure\s≡\ssimple.failure

_test.err.print.simple.failure	.closure	_test.err.print.simple.failure_c
_test.err.print.simple.failure_label	.string	err.print\ssimple.failure
_test.err.print.simple.failure_expected	.string	simple.failure\s〈〉

_test.pos.eq.x.x	.closure	_test.pos.eq.x.x_c
_test.pos.eq.x.x_label	.string	parser.pos.≡\sx\sx
_test.pos.eq.x.x_fail.msg	.string	pos.initial\sfn\s≠\spos.initial\sfn
_test.pos.eq.x.x_succ.msg	.string	pos.initial\sfn\s≡\spos.initial\sfn

_test.pos.eq.diff.file	.closure	_test.pos.eq.diff.file_c
_test.pos.eq.diff.file_label	.string	parser.pos.≡\s(pos.initial\sfn<./foo>)\s(pos.initial\sfn<./bar>)
_test.pos.eq.diff.file_false.msg	.string	pos.initial\sfn<./foo>\s≠\spos.initial\sfn<./bar>
_test.pos.eq.diff.file_true.msg	.string	pos.initial\sfn<./foo>\s≡\spos.initial\sfn<./bar>
_test.pos.eq.diff.file_foo.s	.string	./foo
_test.pos.eq.diff.file_bar.s	.string	./bar

_test.pos.print	.closure	_test.pos.print_c
_test.pos.print_label	.string	pos.print\spos.initial
_test.pos.print_expected	.string	〈〉

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{parse fail qq{}}

_test.fail.nil_c	.expr
rune.t	.tygvar
record.empty	.tygvar
_test.fail.nil_k_c	.subcode
test.property.label	.gvar
_test.fail.nil_label	.gvar
parser.test.assert.fails	.gvar
record.empty.print	.gvar
parser.fail	.gvar
list.nil	.gvar
fail	.apply	parser.fail	rune.t	record.empty
nil	.apply	list.nil	rune.t
k	.alloc	_test.fail.nil_k_c
test	.apply	parser.test.assert.fails	rune.t	record.empty	|	record.empty.print	fail	nil	k
	.app	_test.fail.nil_label	test
	.enter	test.property.label

_test.fail.nil_k_c	.expr
parser.err.t	.tygvar
test.assert.eq	.gvar
parser.err.≡	.gvar
parser.err.print	.gvar
parser.err.simple.failure	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
err	.larg	parser.err.t
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
expected	.apply	parser.err.simple.failure	|	pos
	.app	parser.err.≡	parser.err.print	err	expected
	.enter	test.assert.eq	parser.err.t

# §section §gs{simple.failure ≡ simple.failure}

_test.err.≡.simple.failure.simple.failure_c	.expr
test.property.label	.gvar
_test.err.≡.simple.failure.simple.failure_label	.gvar
test.assert	.gvar
_test.err.≡.simple.failure.simple.failure_fail.msg	.gvar
_test.err.≡.simple.failure.simple.failure_succ.msg	.gvar
parser.err.≡	.gvar
parser.err.simple.failure	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos
b	.apply	parser.err.≡	|	sf	sf
test	.apply	test.assert	|	_test.err.≡.simple.failure.simple.failure_fail.msg	_test.err.≡.simple.failure.simple.failure_succ.msg	b
	.app	_test.err.≡.simple.failure.simple.failure_label	test
	.enter	test.property.label

# > test.property.label qq{...} $
# >     test.assert qq{...} qq{...} $
# >         parser.err.≡ sf sf
# > where
# >     'sf ∝ parser.err.simple.failure (parser.pos.initial parser.test.assert.fixtures.sample.file.name)

# §section §gs{parser.err.print simple.failure}

_test.err.print.simple.failure_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.err.print.simple.failure_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
parser.err.print	.gvar
parser.err.simple.failure	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.err.print.simple.failure_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos
sf.s	.apply	parser.err.print	|	sf
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	sf.s	_test.err.print.simple.failure_expected
	.app	_test.err.print.simple.failure_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ x x}

_test.pos.eq.x.x_c	.expr
test.property.label	.gvar
_test.pos.eq.x.x_label	.gvar
test.assert	.gvar
_test.pos.eq.x.x_fail.msg	.gvar
_test.pos.eq.x.x_succ.msg	.gvar
parser.pos.≡	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
b	.apply	parser.pos.≡	|	pos	pos
test	.apply	test.assert	|	_test.pos.eq.x.x_fail.msg	_test.pos.eq.x.x_succ.msg	b
	.app	_test.pos.eq.x.x_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ (pos.initial fn<./foo>) (pos.initial fn<./bar>)}

_test.pos.eq.diff.file_c	.expr
test.property.label	.gvar
_test.pos.eq.diff.file_label	.gvar
test.deny	.gvar
_test.pos.eq.diff.file_false.msg	.gvar
_test.pos.eq.diff.file_true.msg	.gvar
parser.pos.≡	.gvar
parser.pos.initial	.gvar
ibio.file.name.read	.gvar
_test.pos.eq.diff.file_foo.s	.gvar
_test.pos.eq.diff.file_bar.s	.gvar
foo.fn	.apply	ibio.file.name.read	|	_test.pos.eq.diff.file_foo.s
foo.pos	.apply	parser.pos.initial	|	foo.fn
bar.fn	.apply	ibio.file.name.read	|	_test.pos.eq.diff.file_bar.s
bar.pos	.apply	parser.pos.initial	|	bar.fn
b	.apply	parser.pos.≡	|	foo.pos	bar.pos
test	.apply	test.deny	|	_test.pos.eq.diff.file_false.msg	_test.pos.eq.diff.file_true.msg	b
	.app	_test.pos.eq.diff.file_label	test
	.enter	test.property.label

# §section §gs{parser.pos.print simple.failure}

_test.pos.print_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.pos.print_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
parser.pos.print	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.print_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
pos.s	.apply	parser.pos.print	|	pos
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	pos.s	_test.pos.print_expected
	.app	_test.pos.print_label	test
	.enter	test.property.label
