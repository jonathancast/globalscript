	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.fail.nil	_test.fail.msg.nil	_test.unit.nil	_test.symbol.nil	_test.symbol.cons	_test.many.fail.nil	_test.many.fail.cons	_test.match	_test.err	_test.pos	_test.rune.advance.x

_test.fail.nil	.closure	_test.fail.nil_c
_test.fail.nil_label	.string	parse\sfail\sqq{}

_test.fail.msg.nil	.closure	_test.fail.msg.nil_c
_test.fail.msg.nil_label	.string	parse\sfail.msg\sqq{}
_test.fail.msg.nil_sample.msg	.string	User-supplied\serror
_test.fail.msg.nil_err.fmt.expected	.string	./parse-data:$:\sUser-supplied\serror

_test.unit.nil	.closure	_test.unit.nil_c
_test.unit.nil_label	.string	parse\s(unit\strue)\sqq{}

_test.symbol.nil	.closure	_test.symbol.nil_c
_test.symbol.nil_label	.string	parse\ssymbol\sqq{}
_test.symbol.nil_expected	.string	./parse-data:$:\sUn-expected\sEOF;\sexpected\ssymbol

_test.symbol.cons	.closure	_test.symbol.cons_c
_test.symbol.cons_label	.string	parse\ssymbol\sqq{n}
_test.symbol.cons_string	.string	n

_test.many.fail.nil	.closure	_test.many.fail.nil_c
_test.many.fail.nil_label	.string	parse\s(many\sfail)\sqq{}

_test.many.fail.cons	.closure	_test.many.fail.cons_c
_test.many.fail.cons_label	.string	parse\s(many\sfail)\sqq{x}
_test.many.fail.cons_input	.string	x

_test.rune.advance.x	.closure	_test.rune.advance.x_c
_test.rune.advance.x_label	.string	parser.rune.advance\sr/x/

# §section §gs{parser.match}

_test.match	.closure	_test.match_c
_test.match_label	.string	parser.match

_tests.match	.list	test.property.t	_test.match.empty.nil	_test.match.range.above	_test.match.range.upper	_test.match.range.below	_test.match.star	_test.match.neg.in.class	_test.match.multi.char.class

_test.match.empty.nil	.closure	_test.match.empty.nil_c
_test.match.empty.nil_label	.string	parse\sm//\sqq{}

_test.match.range.above	.closure	_test.match.range.above_c
_test.match.range.above_label	.string	parse\sm/[a-z]/\sqq{\\{}
_test.match.range.above_re	.regex	[a-z]
_test.match.range.above_input	.string	{
_test.match.range.above_expected	.string	./parse-data:1:1:\sUn-expected\s{

_test.match.range.upper	.closure	_test.match.range.upper_c
_test.match.range.upper_label	.string	parse\sm/[a-z]/\sqq{z}
_test.match.range.upper_re	.regex	[a-z]
_test.match.range.upper_input	.string	z

_test.match.range.below	.closure	_test.match.range.below_c
_test.match.range.below_label	.string	parse\sm/[a-z]/\sqq{`}
_test.match.range.below_re	.regex	[a-z]
_test.match.range.below_input	.string	`
_test.match.range.below_expected	.string	./parse-data:1:1:\sUn-expected\s`

_test.match.star	.closure	_test.match.star_c
_test.match.star_label	.string	parse\sm/a*/\sqq{aa}
_test.match.star_re	.regex	a*
_test.match.star_input	.string	aa

_test.match.neg.in.class	.closure	_test.match.neg.in.class_c
_test.match.neg.in.class_label	.string	parser\sm/[^a]/\sqq{a}
_test.match.neg.in.class_re	.regex	[^a]
_test.match.neg.in.class_input	.string	a

_test.match.multi.char.class	.closure	_test.match.multi.char.class_c
_test.match.multi.char.class_label	.string	parser\sm/[ab]/\sqq{b}
_test.match.multi.char.class_re	.regex	[ab]
_test.match.multi.char.class_input	.string	b

# §section §gs{parser.err}

_tests.err	.list	test.property.t	_test.err.fmt.simple.failure	_test.err.≡.simple.failure.simple.failure	_test.err.fmtgs.simple.failure

_test.err	.closure	_test.err_c
_test.err_label	.string	parser.err

_test.err.fmt.simple.failure	.closure	_test.err.fmt.simple.failure_c
_test.err.fmt.simple.failure_label	.string	parser.err.fmt\ssimple.failure
_test.err.fmt.simple.failure_expected	.string	./parse-data:$:\sParse\sfailure

_test.err.≡.simple.failure.simple.failure	.closure	_test.err.≡.simple.failure.simple.failure_c
_test.err.≡.simple.failure.simple.failure_label	.string	simple.failure\s≡\ssimple.failure
_test.err.≡.simple.failure.simple.failure_fail.msg	.string	simple.failure\s≠\ssimple.failure
_test.err.≡.simple.failure.simple.failure_succ.msg	.string	simple.failure\s≡\ssimple.failure

_test.err.fmtgs.simple.failure	.closure	_test.err.fmtgs.simple.failure_c
_test.err.fmtgs.simple.failure_label	.string	err.fmtgs\ssimple.failure\strue
_test.err.fmtgs.simple.failure_expected	.string	simple.failure\strue\s〈\s'file\s∝\sfn<./parse-data>;\s'line\s∝\s1;\s'col\s∝\s1;\s〉

# §section §gs{parser.pos}

_tests.pos	.list	test.property.t	_test.pos.fmt.not.eof	_test.pos.fmt.next.line	_test.pos.fmt.eof	_test.pos.fmt.eof.next.line	_test.pos.eq.x.x	_test.pos.eq.diff.file	_test.pos.eq.diff.line	_test.pos.eq.diff.col	_test.pos.fmtgs	

_test.pos	.closure	_test.pos_c
_test.pos_label	.string	parser.pos

_test.pos.fmt.not.eof	.closure	_test.pos.fmt.not.eof_c
_test.pos.fmt.not.eof_label	.string	pos.fmt\sfalse\sinitial.pos
_test.pos.fmt.not.eof_expected	.string	./parse-data:1:1

_test.pos.fmt.next.line	.closure	_test.pos.fmt.next.line_c
_test.pos.fmt.next.line_label	.string	pos.fmt\sfalse\s(parser.pos.next.line\sinitial.pos)
_test.pos.fmt.next.line_expected	.string	./parse-data:2:1

_test.pos.fmt.eof	.closure	_test.pos.fmt.eof_c
_test.pos.fmt.eof_label	.string	pos.fmt\strue\sinitial.pos
_test.pos.fmt.eof_expected	.string	./parse-data:$

_test.pos.fmt.eof.next.line	.closure	_test.pos.fmt.eof.next.line_c
_test.pos.fmt.eof.next.line_label	.string	pos.fmt\strue\s(next.line\sinitial.pos)
_test.pos.fmt.eof.next.line_expected	.string	./parse-data:$

_test.pos.eq.x.x	.closure	_test.pos.eq.x.x_c
_test.pos.eq.x.x_label	.string	parser.pos.≡\sx\sx
_test.pos.eq.x.x_fail.msg	.string	pos.initial\sfn\s≠\spos.initial\sfn
_test.pos.eq.x.x_succ.msg	.string	pos.initial\sfn\s≡\spos.initial\sfn

_test.pos.eq.diff.file	.closure	_test.pos.eq.diff.file_c
_test.pos.eq.diff.file_label	.string	parser.pos.≡\s(pos.initial\sfn<./foo>)\s(pos.initial\sfn<./bar>)
_test.pos.eq.diff.file_false.msg	.string	pos.initial\sfn<./foo>\s≠\spos.initial\sfn<./bar>
_test.pos.eq.diff.file_true.msg	.string	pos.initial\sfn<./foo>\s≡\spos.initial\sfn<./bar>
_test.pos.eq.diff.file_foo.s	.string	./foo
_test.pos.eq.diff.file_bar.s	.string	./bar

_test.pos.eq.diff.line	.closure	_test.pos.eq.diff.line_c
_test.pos.eq.diff.line_label	.string	parser.pos.≡\s(pos.next.line\sx)\sx
_test.pos.eq.diff.line_false.msg	.string	pos.next.line\sx\s≠\sx
_test.pos.eq.diff.line_true.msg	.string	pos.next.line\sx\s≡\sx
_test.pos.eq.diff.line_foo.s	.string	./foo

_test.pos.eq.diff.col	.closure	_test.pos.eq.diff.col_c
_test.pos.eq.diff.col_label	.string	parser.pos.≡\s(pos.next.col\sx)\sx
_test.pos.eq.diff.col_false.msg	.string	pos.next.col\sx\s≠\sx
_test.pos.eq.diff.col_true.msg	.string	pos.next.col\sx\s≡\sx
_test.pos.eq.diff.col_foo.s	.string	./foo

_test.pos.fmtgs	.closure	_test.pos.fmtgs_c
_test.pos.fmtgs_label	.string	pos.fmtgs\spos.initial
_test.pos.fmtgs_expected	.string	〈\s'file\s∝\sfn<./parse-data>;\s'line\s∝\s1;\s'col\s∝\s1;\s〉

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{parse fail qq{}}

_test.fail.nil_c	.expr
rune.t	.tygvar
record.empty	.tygvar
_test.fail.nil_k_c	.subcode
test.property.label	.gvar
_test.fail.nil_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
record.empty.fmtgs	.gvar
parser.fail	.gvar
list.nil	.gvar
fail	.apply	parser.fail	rune.t	record.empty
nil	.apply	list.nil	rune.t
k	.alloc	_test.fail.nil_k_c
test	.apply	parser.test.assert.fails	rune.t	record.empty	|	parser.rune.advance	rune.print	record.empty.fmtgs	fail	nil	k
	.app	_test.fail.nil_label	test
	.enter	test.property.label

_test.fail.nil_k_c	.expr
parser.err.t	.tygvar
test.assert.eq	.gvar
parser.err.≡	.gvar
parser.err.fmtgs	.gvar
parser.err.simple.failure	.gvar
bool.true	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
err	.larg	parser.err.t
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
expected	.apply	parser.err.simple.failure	|	pos	bool.true
	.app	parser.err.≡	parser.err.fmtgs	err	expected
	.enter	test.assert.eq	parser.err.t

# §section §gs{parse fail.msg qq{}}

_test.fail.msg.nil_c	.expr
rune.t	.tygvar
record.empty	.tygvar
_test.fail.msg.nil_k_c	.subcode
test.property.label	.gvar
_test.fail.msg.nil_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
record.empty.fmtgs	.gvar
parser.fail.msg	.gvar
_test.fail.msg.nil_sample.msg	.gvar
list.nil	.gvar
parser	.apply	parser.fail.msg	rune.t	record.empty	|	_test.fail.msg.nil_sample.msg
nil	.apply	list.nil	rune.t
k	.alloc	_test.fail.msg.nil_k_c
test	.apply	parser.test.assert.fails	rune.t	record.empty	|	parser.rune.advance	rune.print	record.empty.fmtgs	parser	nil	k
	.app	_test.fail.msg.nil_label	test
	.enter	test.property.label

_test.fail.msg.nil_k_c	.expr
parser.err.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.err.fmt	.gvar
_test.fail.msg.nil_err.fmt.expected	.gvar
err	.larg	parser.err.t
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
err.fmt	.apply	parser.err.fmt	|	err
	.app	string.≡	string.fmtgs	err.fmt	_test.fail.msg.nil_err.fmt.expected
	.enter	test.assert.eq	string.ty

# §section §gs{parse unit qq{}}

_test.unit.nil_c	.expr
rune.t	.tygvar
bool.t	.tygvar
_test.unit.nil_k_c	.subcode
test.property.label	.gvar
_test.unit.nil_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.unit	.gvar
bool.true	.gvar
list.nil	.gvar
parser	.apply	parser.unit	rune.t	bool.t	|	bool.true
nil	.apply	list.nil	rune.t
k	.alloc	_test.unit.nil_k_c
test	.apply	parser.test.assert.passes	rune.t	bool.t	|	parser.rune.advance	rune.print	parser	nil	k
	.app	_test.unit.nil_label	test
	.enter	test.property.label

_test.unit.nil_k_c	.expr
bool.t	.tygvar
test.assert.eq	.gvar
bool.≡	.gvar
bool.fmtgs	.gvar
bool.true	.gvar
x	.larg	bool.t
	.app	bool.≡	bool.fmtgs	x	bool.true
	.enter	test.assert.eq	bool.t

# §section §gs{parse symbol qq{}}

_test.symbol.nil_c	.expr
rune.t	.tygvar
_test.symbol.nil_k_c	.subcode
test.property.label	.gvar
_test.symbol.nil_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
rune.fmtgs	.gvar
parser.symbol	.gvar
list.nil	.gvar
sym	.apply	parser.symbol	rune.t
nil	.apply	list.nil	rune.t
k	.alloc	_test.symbol.nil_k_c
test	.apply	parser.test.assert.fails	rune.t	rune.t	|	parser.rune.advance	rune.print	rune.fmtgs	sym	nil	k
	.app	_test.symbol.nil_label	test
	.enter	test.property.label

_test.symbol.nil_k_c	.expr
parser.err.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.err.fmt	.gvar
_test.symbol.nil_expected	.gvar
err	.larg	parser.err.t
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
err.s	.apply	parser.err.fmt	|	err
	.app	string.≡	string.fmtgs	err.s	_test.symbol.nil_expected
	.enter	test.assert.eq	string.ty

# §section §gs{parse symbol qq{n}}

_test.symbol.cons_c	.expr
rune.t	.tygvar
_test.symbol.cons_k	.subcode
test.property.label	.gvar
_test.symbol.cons_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.symbol	.gvar
_test.symbol.cons_string	.gvar
symbol	.apply	parser.symbol	rune.t
k	.alloc	_test.symbol.cons_k
test	.apply	parser.test.assert.passes	rune.t	rune.t	|	parser.rune.advance	rune.print	symbol	_test.symbol.cons_string	k
	.app	_test.symbol.cons_label	test
	.enter	test.property.label

_test.symbol.cons_k	.expr
rune.t	.tygvar
test.assert.eq	.gvar
rune.≡	.gvar
rune.fmtgs	.gvar
rune.latin.letter.n	.gvar
r	.larg	rune.t
	.app	rune.≡	rune.fmtgs	r	rune.latin.letter.n
	.enter	test.assert.eq	rune.t

# §section §gs{parse (many fail) qq{}}

_test.many.fail.nil_c	.expr
rune.t	.tygvar
list.t	.tygvar
bool.t	.tygvar
list.bool.t	.tylet	list.t	bool.t
_test.many.fail.nil_k_c	.subcode
test.property.label	.gvar
_test.many.fail.nil_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.many	.gvar
parser.fail	.gvar
list.nil	.gvar
fail	.apply	parser.fail	rune.t	bool.t
parser	.apply	parser.many	rune.t	bool.t	|	fail
nil	.apply	list.nil	rune.t
k	.alloc	_test.many.fail.nil_k_c
test	.apply	parser.test.assert.passes	rune.t	list.bool.t	|	parser.rune.advance	rune.print	parser	nil	k
	.app	_test.many.fail.nil_label	test
	.enter	test.property.label

_test.many.fail.nil_k_c	.expr
list.t	.tygvar
bool.t	.tygvar
list.bool.t	.tylet	list.t	bool.t
test.assert.eq	.gvar
list.≡	.gvar
bool.≡	.gvar
list.fmtgs	.gvar
bool.fmtgs.list	.gvar
list.nil	.gvar
actual	.larg	list.bool.t
list.bool.≡	.apply	list.≡	bool.t	|	bool.≡
list.bool.fmtgs	.apply	list.fmtgs	bool.t	|	bool.fmtgs.list
expected	.apply	list.nil	bool.t
	.app	list.bool.≡	list.bool.fmtgs	actual	expected
	.enter	test.assert.eq	list.bool.t

# §section §gs{parse (many fail) qq{x}}

_test.many.fail.cons_c	.expr
rune.t	.tygvar
list.t	.tygvar
bool.t	.tygvar
list.bool.t	.tylet	list.t	bool.t
_test.many.fail.cons_k_c	.subcode
test.property.label	.gvar
_test.many.fail.cons_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
list.fmtgs	.gvar
bool.fmtgs.list	.gvar
parser.many	.gvar
parser.fail	.gvar
_test.many.fail.cons_input	.gvar
list.bool.fmtgs	.apply	list.fmtgs	bool.t	|	bool.fmtgs.list
fail	.apply	parser.fail	rune.t	bool.t
parser	.apply	parser.many	rune.t	bool.t	|	fail
k	.alloc	_test.many.fail.cons_k_c
test	.apply	parser.test.assert.fails	rune.t	list.bool.t	|	parser.rune.advance	rune.print	list.bool.fmtgs	parser	_test.many.fail.cons_input	k
	.app	_test.many.fail.cons_label	test
	.enter	test.property.label

_test.many.fail.cons_k_c	.expr
parser.err.t	.tygvar
test.true	.gvar
err	.larg	parser.err.t
	.enter	test.true

# §section §gs{_test.match}

_test.match_c	.expr
test.property.label	.gvar
_test.match_label	.gvar
test.all	.gvar
_tests.match	.gvar
test	.apply	test.all	|	_tests.match
	.app	_test.match_label	test
	.enter	test.property.label

# §section §gs{parse m// qq{}}

_test.match.empty.nil_c	.expr
string.t	.tygvar
rune.t	.tygvar
_test.match.empty.nil_k_c	.subcode
test.property.label	.gvar
_test.match.empty.nil_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.match	.gvar
rune.compare	.gvar
regex.empty	.gvar
list.nil	.gvar
empty	.apply	regex.empty	rune.t
parser	.apply	parser.match	rune.t	|	rune.compare	empty
nil	.apply	list.nil	rune.t
k	.alloc	_test.match.empty.nil_k_c
test	.apply	parser.test.assert.passes	rune.t	string.t	|	parser.rune.advance	rune.print	parser	nil	k
	.app	_test.match.empty.nil_label	test
	.enter	test.property.label

_test.match.empty.nil_k_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
list.nil	.gvar
s	.larg	list.t	rune.t
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
nil	.apply	list.nil	rune.t
	.app	string.≡	string.fmtgs	s	nil
	.enter	test.assert.eq	string.ty

# §section §gs{parse m/[a-z]/ qq{\\\{}}

_test.match.range.above_c	.expr
rune.t	.tygvar
list.t	.tygvar
string.ty	.tylet	list.t	rune.t
_test.match.range.above_k_c	.subcode
test.property.label	.gvar
_test.match.range.above_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
string.fmtgs	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.range.above_re	.gvar
_test.match.range.above_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.range.above_re
k	.alloc	_test.match.range.above_k_c
test	.apply	parser.test.assert.fails	rune.t	string.ty	|	parser.rune.advance	rune.print	string.fmtgs	parser	_test.match.range.above_input	k
	.app	_test.match.range.above_label	test
	.enter	test.property.label

_test.match.range.above_k_c	.expr
parser.err.t	.tygvar
string.t	.tygvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
parser.err.fmt	.gvar
_test.match.range.above_expected	.gvar
err	.larg	parser.err.t
err.s	.apply	parser.err.fmt	|	err
	.app	string.≡	string.fmtgs	err.s	_test.match.range.above_expected
	.enter	test.assert.eq	string.t

# §section §gs{parse m/[a-z]/ qq{z}}

_test.match.range.upper_c	.expr
rune.t	.tygvar
string.t	.tygvar
_test.match.range.upper_k_c	.subcode
test.property.label	.gvar
_test.match.range.upper_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
string.fmtgs	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.range.upper_re	.gvar
_test.match.range.upper_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.range.upper_re
k	.alloc	_test.match.range.upper_k_c
test	.apply	parser.test.assert.passes	rune.t	string.t	|	parser.rune.advance	rune.print	parser	_test.match.range.upper_input	k
	.app	_test.match.range.upper_label	test
	.enter	test.property.label

_test.match.range.upper_k_c	.expr
string.t	.tygvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
_test.match.range.upper_input	.gvar
res	.larg	string.t
	.app	string.≡	string.fmtgs	res	_test.match.range.upper_input
	.enter	test.assert.eq	string.t

# §section §gs{parse m/[a-z]/ qq{`}}

_test.match.range.below_c	.expr
rune.t	.tygvar
string.t	.tygvar
_test.match.range.below_k_c	.subcode
test.property.label	.gvar
_test.match.range.below_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
string.fmtgs	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.range.below_re	.gvar
_test.match.range.below_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.range.below_re
k	.alloc	_test.match.range.below_k_c
test	.apply	parser.test.assert.fails	rune.t	string.t	|	parser.rune.advance	rune.print	string.fmtgs	parser	_test.match.range.below_input	k
	.app	_test.match.range.below_label	test
	.enter	test.property.label

_test.match.range.below_k_c	.expr
parser.err.t	.tygvar
string.t	.tygvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
parser.err.fmt	.gvar
_test.match.range.below_expected	.gvar
err	.larg	parser.err.t
err.s	.apply	parser.err.fmt	|	err
	.app	string.≡	string.fmtgs	err.s	_test.match.range.below_expected
	.enter	test.assert.eq	string.t

# §section §gs{parse m/a*/ qq{aa}}

_test.match.star_c	.expr
rune.t	.tygvar
string.t	.tygvar
_test.match.star_k_c	.subcode
test.property.label	.gvar
_test.match.star_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.star_re	.gvar
_test.match.star_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.star_re
k	.alloc	_test.match.star_k_c
test	.apply	parser.test.assert.passes	rune.t	string.t	|	parser.rune.advance	rune.print	parser	_test.match.star_input	k
	.app	_test.match.star_label	test
	.enter	test.property.label

_test.match.star_k_c	.expr
string.t	.tygvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
_test.match.star_input	.gvar
s	.larg	string.t
	.app	string.≡	string.fmtgs	s	_test.match.star_input
	.enter	test.assert.eq	string.t

# §section §gs{parse m/[^a] qq{a}}

_test.match.neg.in.class_c	.expr
rune.t	.tygvar
string.t	.tygvar
_test.match.neg.in.class_k_c	.subcode
test.property.label	.gvar
_test.match.neg.in.class_label	.gvar
parser.test.assert.fails	.gvar
parser.rune.advance		.gvar
rune.print	.gvar
string.fmtgs	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.neg.in.class_re	.gvar
_test.match.neg.in.class_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.neg.in.class_re
k	.alloc	_test.match.neg.in.class_k_c
test	.apply	parser.test.assert.fails	rune.t	string.t	|	parser.rune.advance	rune.print	string.fmtgs	parser	_test.match.neg.in.class_input	k
	.app	_test.match.neg.in.class_label	test
	.enter	test.property.label

_test.match.neg.in.class_k_c	.expr
parser.err.t	.tygvar
test.true	.gvar
err	.larg	parser.err.t
	.enter	test.true

# §section §gs{parse m/[ab] qq{a}}

_test.match.multi.char.class_c	.expr
rune.t	.tygvar
string.t	.tygvar
_test.match.multi.char.class_k_c	.subcode
test.property.label	.gvar
_test.match.multi.char.class_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
parser.match	.gvar
rune.compare	.gvar
_test.match.multi.char.class_re	.gvar
_test.match.multi.char.class_input	.gvar
parser	.apply	parser.match	rune.t	|	rune.compare	_test.match.multi.char.class_re
k	.alloc	_test.match.multi.char.class_k_c
test	.apply	parser.test.assert.passes	rune.t	string.t	|	parser.rune.advance	rune.print	parser	_test.match.multi.char.class_input	k
	.app	_test.match.multi.char.class_label	test
	.enter	test.property.label

_test.match.multi.char.class_k_c	.expr
string.t	.tygvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
_test.match.multi.char.class_input	.gvar
s	.larg	string.t
	.app	string.≡	string.fmtgs	s	_test.match.multi.char.class_input
	.enter	test.assert.eq	string.t

# §section §gs{_test.err}

_test.err_c	.expr
test.all	.gvar
_tests.err	.gvar
test.property.label	.gvar
_test.err_label	.gvar
test	.apply	test.all	|	_tests.err
	.app	_test.err_label	test
	.enter	test.property.label

# §section §gs{parser.err.fmt simple.failure}

_test.err.fmt.simple.failure_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.err.fmt.simple.failure_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.err.fmt	.gvar
parser.err.simple.failure	.gvar
bool.true	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.err.fmt.simple.failure_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos	bool.true
actual	.apply	parser.err.fmt	|	sf
test	.apply	test.assert.eq	string.ty	|	string.≡	string.fmtgs	actual	_test.err.fmt.simple.failure_expected
	.app	_test.err.fmt.simple.failure_label	test
	.enter	test.property.label

# §section §gs{simple.failure ≡ simple.failure}

_test.err.≡.simple.failure.simple.failure_c	.expr
test.property.label	.gvar
_test.err.≡.simple.failure.simple.failure_label	.gvar
test.assert	.gvar
_test.err.≡.simple.failure.simple.failure_fail.msg	.gvar
_test.err.≡.simple.failure.simple.failure_succ.msg	.gvar
parser.err.≡	.gvar
parser.err.simple.failure	.gvar
bool.true	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos	bool.true
b	.apply	parser.err.≡	|	sf	sf
test	.apply	test.assert	|	_test.err.≡.simple.failure.simple.failure_fail.msg	_test.err.≡.simple.failure.simple.failure_succ.msg	b
	.app	_test.err.≡.simple.failure.simple.failure_label	test
	.enter	test.property.label

# > test.property.label qq{...} $
# >     test.assert qq{...} qq{...} $
# >         parser.err.≡ sf sf
# > where
# >     'sf ∝ parser.err.simple.failure (parser.pos.initial parser.test.assert.fixtures.sample.file.name)

# §section §gs{parser.err.fmtgs simple.failure}

_test.err.fmtgs.simple.failure_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.err.fmtgs.simple.failure_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.err.fmtgs	.gvar
parser.err.simple.failure	.gvar
bool.true	.gvar
fmtgs.prec.app	.gvar
list.nil	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.err.fmtgs.simple.failure_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
sf	.apply	parser.err.simple.failure	|	pos	bool.true
snil	.apply	list.nil	rune.t
sf.s	.apply	parser.err.fmtgs	|	sf	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.ty	|	string.≡	string.fmtgs	sf.s	_test.err.fmtgs.simple.failure_expected
	.app	_test.err.fmtgs.simple.failure_label	test
	.enter	test.property.label

# §section §gs{_test.pos}

_test.pos_c	.expr
test.property.label	.gvar
_test.pos_label	.gvar
test.all	.gvar
_tests.pos	.gvar
test	.apply	test.all	|	_tests.pos
	.app	_test.pos_label	test
	.enter	test.property.label

# §section §gs{parser.pos.fmt false initial.pos}

_test.pos.fmt.not.eof_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.pos.fmt.not.eof_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.pos.fmt	.gvar
bool.false	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.fmt.not.eof_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
actual	.apply	parser.pos.fmt	|	bool.false	pos
test	.apply	test.assert.eq	string.ty	|	string.≡	string.fmtgs	actual	_test.pos.fmt.not.eof_expected
	.app	_test.pos.fmt.not.eof_label	test
	.enter	test.property.label

# §section §gs{parser.pos.fmt false (next.line initial.pos)}

_test.pos.fmt.next.line_c	.expr
string.t	.tygvar
test.property.label	.gvar
_test.pos.fmt.next.line_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
parser.pos.fmt	.gvar
bool.false	.gvar
parser.pos.next.line	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.fmt.next.line_expected	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
pos1	.apply	parser.pos.next.line	|	pos
actual	.apply	parser.pos.fmt	|	bool.false	pos1
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.pos.fmt.next.line_expected
	.app	_test.pos.fmt.next.line_label	test
	.enter	test.property.label

# §section §gs{parser.pos.fmt true initial.pos}

_test.pos.fmt.eof_c	.expr
string.t	.tygvar
test.property.label	.gvar
_test.pos.fmt.eof_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
parser.pos.fmt	.gvar
bool.true	.gvar
parser.pos.next.col	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.fmt.eof_expected	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
actual	.apply	parser.pos.fmt	|	bool.true	pos
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.pos.fmt.eof_expected
	.app	_test.pos.fmt.eof_label	test
	.enter	test.property.label

# §section §gs{parser.pos.fmt true (next.line initial.pos)}

_test.pos.fmt.eof.next.line_c	.expr
string.t	.tygvar
test.property.label	.gvar
_test.pos.fmt.eof.next.line_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
parser.pos.fmt	.gvar
bool.true	.gvar
parser.pos.next.line	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
_test.pos.fmt.eof.next.line_expected	.gvar
pos0	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
pos1	.apply	parser.pos.next.line	|	pos0
actual	.apply	parser.pos.fmt	|	bool.true	pos1
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.pos.fmt.eof.next.line_expected
	.app	_test.pos.fmt.eof.next.line_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ x x}

_test.pos.eq.x.x_c	.expr
test.property.label	.gvar
_test.pos.eq.x.x_label	.gvar
test.assert	.gvar
_test.pos.eq.x.x_fail.msg	.gvar
_test.pos.eq.x.x_succ.msg	.gvar
parser.pos.≡	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
b	.apply	parser.pos.≡	|	pos	pos
test	.apply	test.assert	|	_test.pos.eq.x.x_fail.msg	_test.pos.eq.x.x_succ.msg	b
	.app	_test.pos.eq.x.x_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ (pos.initial fn<./foo>) (pos.initial fn<./bar>)}

_test.pos.eq.diff.file_c	.expr
test.property.label	.gvar
_test.pos.eq.diff.file_label	.gvar
test.deny	.gvar
_test.pos.eq.diff.file_false.msg	.gvar
_test.pos.eq.diff.file_true.msg	.gvar
parser.pos.≡	.gvar
parser.pos.initial	.gvar
ibio.file.name.in	.gvar
_test.pos.eq.diff.file_foo.s	.gvar
_test.pos.eq.diff.file_bar.s	.gvar
foo.fn	.apply	ibio.file.name.in	|	_test.pos.eq.diff.file_foo.s
foo.pos	.apply	parser.pos.initial	|	foo.fn
bar.fn	.apply	ibio.file.name.in	|	_test.pos.eq.diff.file_bar.s
bar.pos	.apply	parser.pos.initial	|	bar.fn
b	.apply	parser.pos.≡	|	foo.pos	bar.pos
test	.apply	test.deny	|	_test.pos.eq.diff.file_false.msg	_test.pos.eq.diff.file_true.msg	b
	.app	_test.pos.eq.diff.file_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ (pos.next.line x) x}

_test.pos.eq.diff.line_c	.expr
test.property.label	.gvar
_test.pos.eq.diff.line_label	.gvar
test.deny	.gvar
_test.pos.eq.diff.line_false.msg	.gvar
_test.pos.eq.diff.line_true.msg	.gvar
parser.pos.≡	.gvar
parser.pos.next.line	.gvar
parser.pos.initial	.gvar
ibio.file.name.in	.gvar
_test.pos.eq.diff.line_foo.s	.gvar
foo.fn	.apply	ibio.file.name.in	|	_test.pos.eq.diff.line_foo.s
foo.pos	.apply	parser.pos.initial	|	foo.fn
foo.pos.1	.apply	parser.pos.next.line	|	foo.pos
b	.apply	parser.pos.≡	|	foo.pos.1	foo.pos
test	.apply	test.deny	|	_test.pos.eq.diff.line_false.msg	_test.pos.eq.diff.line_true.msg	b
	.app	_test.pos.eq.diff.line_label	test
	.enter	test.property.label

# §section §gs{parser.pos.≡ (pos.next.col x) x}

_test.pos.eq.diff.col_c	.expr
test.property.label	.gvar
_test.pos.eq.diff.col_label	.gvar
test.deny	.gvar
_test.pos.eq.diff.col_false.msg	.gvar
_test.pos.eq.diff.col_true.msg	.gvar
parser.pos.≡	.gvar
parser.pos.next.col	.gvar
parser.pos.initial	.gvar
ibio.file.name.in	.gvar
_test.pos.eq.diff.col_foo.s	.gvar
foo.fn	.apply	ibio.file.name.in	|	_test.pos.eq.diff.col_foo.s
foo.pos	.apply	parser.pos.initial	|	foo.fn
foo.pos.1	.apply	parser.pos.next.col	|	foo.pos
b	.apply	parser.pos.≡	|	foo.pos.1	foo.pos
test	.apply	test.deny	|	_test.pos.eq.diff.col_false.msg	_test.pos.eq.diff.col_true.msg	b
	.app	_test.pos.eq.diff.col_label	test
	.enter	test.property.label

# §section §gs{parser.pos.fmtgs pos.initial}

_test.pos.fmtgs_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.pos.fmtgs_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.fmtgs	.gvar
rune.fmtgs.list	.gvar
parser.pos.fmtgs	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
fmtgs.prec.arg	.gvar
list.nil	.gvar
_test.pos.fmtgs_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.fmtgs	.apply	list.fmtgs	rune.t	|	rune.fmtgs.list
pos	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
snil	.apply	list.nil	rune.t
pos.s	.apply	parser.pos.fmtgs	|	pos	fmtgs.prec.arg	snil
test	.apply	test.assert.eq	string.ty	|	string.≡	string.fmtgs	pos.s	_test.pos.fmtgs_expected
	.app	_test.pos.fmtgs_label	test
	.enter	test.property.label

# §section §gs{parser.rune.advance r/x/}

_test.rune.advance.x_c	.expr
parser.pos.t	.tygvar
test.property.label	.gvar
_test.rune.advance.x_label	.gvar
test.assert.eq	.gvar
parser.pos.≡	.gvar
parser.pos.fmtgs	.gvar
parser.rune.advance	.gvar
rune.latin.letter.x	.gvar
parser.pos.initial	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
parser.pos.next.col	.gvar
pos0	.apply	parser.pos.initial	|	parser.test.assert.fixtures.sample.file.name
actual	.apply	parser.rune.advance	|	rune.latin.letter.x	pos0
expected	.apply	parser.pos.next.col	|	pos0
test	.apply	test.assert.eq	parser.pos.t	|	parser.pos.≡	parser.pos.fmtgs	actual	expected
	.app	_test.rune.advance.x_label	test
	.enter	test.property.label
