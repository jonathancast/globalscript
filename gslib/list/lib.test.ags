	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.length.nil	_test.length.singleton

_test.length.nil	.closure	_test.length.nil_c
_test.length.nil_label	.string	length\snil

_test.length.singleton	.closure	_test.length.singleton_c
_test.length.singleton_label	.string	length\s[false]

_fixture.nil	.closure	_fixture.nil_c
_fixture.singleton	.closure	_fixture.singleton_c

_1	.closure	_1_c

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{length nil}

_test.length.nil_c	.expr
_test.length.nil_test_c	.subcode
test.property.label	.gvar
_test.length.nil_label	.gvar
test	.alloc	_test.length.nil_test_c
	.app	_test.length.nil_label	test
	.enter	test.property.label

_test.length.nil_test_c	.expr
natural.t	.tygvar
_test.length.nil_test_actual_c	.subcode
test.assert.eq	.gvar
natural.≡	.gvar
natural.fmtgs	.gvar
natural.0	.gvar
actual	.alloc	_test.length.nil_test_actual_c
	.app	natural.≡	natural.fmtgs	actual	natural.0
	.enter	test.assert.eq	natural.t

_test.length.nil_test_actual_c	.expr
bool.t	.tygvar
list.lib.length	.gvar
_fixture.nil	.gvar
	.app	_fixture.nil
	.enter	list.lib.length	bool.t

# §section §gs{length [false]}

_test.length.singleton_c	.expr
_test.length.singleton_test_c	.subcode
test.property.label	.gvar
_test.length.singleton_label	.gvar
test	.alloc	_test.length.singleton_test_c
	.app	_test.length.singleton_label	test
	.enter	test.property.label

_test.length.singleton_test_c	.expr
natural.t	.tygvar
_test.length.singleton_test_actual_c	.subcode
test.assert.eq	.gvar
natural.≡	.gvar
natural.fmtgs	.gvar
_1	.gvar
actual	.alloc	_test.length.singleton_test_actual_c
	.app	natural.≡ natural.fmtgs	actual	_1
	.enter	test.assert.eq	natural.t

_test.length.singleton_test_actual_c	.expr
bool.t	.tygvar
list.lib.length	.gvar
_fixture.singleton	.gvar
	.app	_fixture.singleton
	.enter	list.lib.length	bool.t

# §section Test fixtures

_fixture.nil_c	.expr
bool.t	.tygvar
list.nil	.gvar
	.enter	list.nil	bool.t

_fixture.singleton_c	.expr
bool.t	.tygvar
list.:	.gvar
bool.false	.gvar
_fixture.nil	.gvar
	.app	bool.false	_fixture.nil
	.enter	list.:	bool.t

_1_c	.expr
natural.t.in	.cogvar
1	.natural	1
	.coerce	natural.t.in
	.lift
	.yield	1
