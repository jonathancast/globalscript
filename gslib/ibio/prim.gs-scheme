module 'ibio.prim ∝ 〈
    module 'unwrapped ∝ api ibio.prim.basic
        | ∀ 's. (iptr.u s) read (iport.u s) (acceptor.u s 〈〉)
        | ∀ 's. 〈〉 write (oport.u s) (list.t s)
        | ∀ 'α. α abort (list.t rune)
    ;
    module 'wrapped ∝ newtype 'ι 'ο α.
        iport.u ι → oport.u ο → oport.u rune → unwrapped.m α
    ;
    instance module monad.c (wrapped.t 'ι 'ο) = monad.asHaskell 〈
        'unit = λ 'x. wrappend.in $ λ 'i 'o 'e. b.unit x;
        'a '>>= 'f = wrapped.in $ λ 'i 'o 'e.
            b.>>= (wrapped.out a i o e) (λ 'x. wrapped.out (f x) i o e)
        ;
    〉 where
        module 'b ∝ instance module monad.c unwrapped.m
    ;
〉
