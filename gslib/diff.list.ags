#calculus: gsdl.string-code 0.1

	.prefix

	.data

diff.list.nil	.closure	_diff.list.nil_c
diff.list.:	.closure	_diff.list.:_c
diff.list.singleton	.closure	_diff.list.singleton_c
diff.list.<>	.closure	_diff.list.<>_c
diff.list.snoc	.closure	_diff.list.snoc_c

diff.list.concat	.closure	_diff.list.concat_c

diff.list.prepend	.closure	_diff.list.prepend_c
diff.list.postpend	.closure	_diff.list.postpend_c

diff.list.replicate	.closure	_diff.list.replicate_c
_diff.list.replicate_w	.closure	_diff.list.replicate_w_c	_diff.list.replicate_w_ty

diff.list.tolist	.closure	_diff.list.tolist_c
diff.list.fromlist	.closure	_diff.list.fromlist_c

	.code

-- §section §gs{diff.list.nil}

_diff.list.nil_c	.expr
list.t	.tygvar
α	.tyarg	*
ys0	.larg	list.t	α
	.enter	ys0

-- §section §gs{diff.list.:}

_diff.list.:_c	.expr
diff.list.t	.tygvar
list.t	.tygvar
list.:	.gvar
α	.tyarg	*
x	.larg	α
xn	.larg	diff.list.t	α
ys0	.larg	list.t	α
ys1	.apply	xn	|	ys0
	.app	x	ys1
	.enter	list.:	α

-- §section §gs{diff.list.singleton}

_diff.list.singleton_c	.expr
list.t	.tygvar
list.:	.gvar
α	.tyarg	*
x	.larg	α
ys0	.larg	list.t	α
	.app	x	ys0
	.enter	list.:	α

-- §section §gs{diff.list.<>}

_diff.list.<>_c	.expr
diff.list.t	.tygvar
list.t	.tygvar
α	.tyarg	*
xn0	.larg	diff.list.t	α
xn1	.larg	diff.list.t	α
ys0	.larg	list.t	α
ys1	.apply	xn1	|	ys0
	.app	ys1
	.enter	xn0

-- §section §gs{diff.list.snoc}

_diff.list.snoc_c	.expr
diff.list.t	.tygvar
list.t	.tygvar
list.:	.gvar
α	.tyarg	*
xn	.larg	diff.list.t	α
x	.larg	α
ys	.larg	list.t	α
ys1	.apply	list.:	α	|	x	ys
	.app	ys1
	.enter	xn

-- §section §gs{diff.list.concat}

_diff.list.concat_c	.expr
diff.list.t	.tygvar
list.foldr	.gvar
diff.list.<>	.gvar
diff.list.nil	.gvar
α	.tyarg	*
diff.list.ty	.tylet	diff.list.t	α
<>	.apply	diff.list.<>	α
nil	.apply	diff.list.nil	α
	.app	<>	nil
	.enter	list.foldr	diff.list.ty	diff.list.ty

-- §section §gs{diff.list.prepend}

_diff.list.prepend_c	.expr
list.t	.tygvar
diff.list.t	.tygvar
list.<>	.gvar
α	.tyarg	*
xn0	.larg	list.t	α
xn1	.larg	diff.list.t	α
ys0	.larg	list.t	α
ys1	.apply	xn1	|	ys0
	.app	xn0	ys1
	.enter	list.<>	α

-- §section §gs{diff.list.postpend}

_diff.list.postpend_c	.expr
list.t	.tygvar
diff.list.t	.tygvar
list.<>	.gvar
α	.tyarg	*
xn0	.larg	diff.list.t	α
xn1	.larg	list.t	α
ys0	.larg	list.t	α
ys1	.apply	list.<>	α	|	xn1	ys0
	.app	ys1
	.enter	xn0

-- §section §gs{diff.list.replicate}

_diff.list.replicate_c	.expr
natural.t	.tygvar
_diff.list.replicate_k	.subcode
natural.t.out	.cogvar
α	.tyarg	*
n	.larg	natural.t
c	.larg	α
	.force	_diff.list.replicate_k
	.coerce	natural.t.out
	.enter	n

_diff.list.replicate_k	.forcecont
natural.prim.u	.tygvar
_diff.list.replicate_w	.gvar
α	.tyfv	*
c	.fv	α
n0	.karg	natural.prim.u
	.app	n0	c
	.yield	_diff.list.replicate_w	α

_diff.list.replicate_w_c	.expr
natural.prim.u	.tygvar
_diff.list.replicate_w_k0	.subcode
_diff.list.replicate_w_k1	.subcode
natural.prim.-	.gvar
1	.natural	1
α	.tyarg	*
n	.arg	natural.prim.u
c	.arg	α
	.ubanalyze	0	_diff.list.replicate_w_k0	1	_diff.list.replicate_w_k1
	.app	n	1
	.yield	natural.prim.-

_diff.list.replicate_w_k0	.ubcasecont
diff.list.nil	.gvar
α	.tyfv	*
c	.fv	α
	.enter	diff.list.nil	α

_diff.list.replicate_w_k1	.ubcasecont
natural.prim.u	.tygvar
diff.list.:	.gvar
_diff.list.replicate_w	.gvar
α	.tyfv	*
c	.fv	α
n1	.karg	natural.prim.u
ds	.apply	_diff.list.replicate_w	α	|	n1	c
	.app	c	ds
	.enter	diff.list.:	α

-- §section §gs{diff.list.tolist}

_diff.list.tolist_c	.expr
diff.list.t	.tygvar
list.nil	.gvar
α	.tyarg	*
xn0	.larg	diff.list.t	α
nil	.apply	list.nil	α
	.app	nil
	.enter	xn0

-- §section §gs{diff.list.fromlist}

_diff.list.fromlist_c	.expr
list.t	.tygvar
list.<>	.gvar
α	.tyarg	*
xn0	.larg	list.t	α
ys0	.larg	list.t	α
	.app	xn0	ys0
	.enter	list.<>	α

	.type

diff.list.t	.tyexpr
list.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	α

-- §section §gs{diff.list.replicate}

_diff.list.replicate_w_ty	.tyexpr
natural.prim.u	.tygvar
diff.list.t	.tygvar
α	.tyforall	*
	.tyfun	natural.prim.u
	.tyfun	α
	.tyref	diff.list.t	α
