	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.fmtgs.product	_test.lift.eq.product	_test.parser.empty.product

_test.fmtgs.product	.closure	_test.fmtgs.product_c
_test.fmtgs.product_label	.string	fmtgs\s(product\s[])
_test.fmtgs.product_expected	.string	product\s[]

_test.lift.eq.product	.closure	_test.lift.eq.product_c
_test.lift.eq.product_label	.string	lift\s(product\snil)\s≡\sproduct\snil
_test.lift.eq.product_false	.string	lift\s(product\snil)\s≠\sproduct\snil
_test.lift.eq.product_true	.string	lift\s(product\snil)\s≡\sproduct\snil

_test.parser.empty.product	.closure	_test.parser.empty.product_c
_test.parser.empty.product_label	.string	parse\sqq{"Π〈〉}
_test.parser.empty.product_input	.string	"Π〈〉

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{fmtgs (product [])}

_test.fmtgs.product_c	.expr
string.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs.product_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
gsdl.cgs.gstype.fmtgs	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
fmtgs.prec.app	.gvar
_test.fmtgs.product_expected	.gvar
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
snil	.apply	list.nil	rune.t
actual	.apply	gsdl.cgs.gstype.fmtgs	|	empty.prod	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs.product_expected
	.app	_test.fmtgs.product_label	test
	.enter	test.property.label

# §section §gs{lift (product nil) ≡ product nil}

_test.lift.eq.product_c	.expr
gsdl.cgs.gstype.field.t	.tygvar
test.property.label	.gvar
_test.lift.eq.product_label	.gvar
test.deny	.gvar
_test.lift.eq.product_false	.gvar
_test.lift.eq.product_true	.gvar
gsdl.cgs.gstype.≡	.gvar
gsdl.cgs.gstype.lift	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.product	.apply	gsdl.cgs.gstype.product	|	nil
lift.empty.product	.apply	gsdl.cgs.gstype.lift	|	empty.product
eq	.apply	gsdl.cgs.gstype.≡	|	lift.empty.product	empty.product
test	.apply	test.deny	|	_test.lift.eq.product_false	_test.lift.eq.product_true	eq
	.app	_test.lift.eq.product_label	test
	.enter	test.property.label

# §section §gs{parse qq{"Π〈〉}}

_test.parser.empty.product_c	.expr
rune.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
_test.parser.empty.product_k_c	.subcode
test.property.label	.gvar
_test.parser.empty.product_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.gstype.parser	.gvar
_test.parser.empty.product_input	.gvar
k	.alloc	_test.parser.empty.product_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.gstype.t	|	parser.rune.advance	rune.print	gsdl.cgs.gstype.parser	_test.parser.empty.product_input	k
	.app	_test.parser.empty.product_label	test
	.enter	test.property.label

_test.parser.empty.product_k_c	.expr
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.assert.eq	.gvar
gsdl.cgs.gstype.≡	.gvar
gsdl.cgs.gstype.fmtgs	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
actual	.larg	gsdl.cgs.gstype.t
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
expected	.apply	gsdl.cgs.gstype.product	|	nil
	.app	gsdl.cgs.gstype.≡	gsdl.cgs.gstype.fmtgs	actual	expected
	.enter	test.assert.eq	gsdl.cgs.gstype.t
