	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.eq.gstype.nothing.just	_test.fmtgs	_test.parse.empty.document	_test.parse.expr.document	_test.parse.typesig.document

_test.eq.gstype.nothing.just	.closure	_test.eq.gstype.nothing.just_c
_test.eq.gstype.nothing.just_label	.string	〈\s'gstype\s∝\snothing;\s〉\s≡\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.eq.gstype.nothing.just_false	.string	〈\s'gstype\s∝\snothing;\s〉\s≠\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.eq.gstype.nothing.just_true	.string	〈\s'gstype\s∝\snothing;\s〉\s≡\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉

_test.fmtgs	.closure	_test.fmtgs_c
_test.fmtgs_label	.string	document.fmtgs\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.fmtgs_expected	.string	〈\s'gstype\s∝\sjust\s(product\s[]);\s〉

_test.parse.empty.document	.closure	_test.parse.empty.document_c
_test.parse.empty.document_label	.string	parse\sdocument.parser\sqq{::\s"Π〈〉;}
_test.parse.empty.document_input	.string	::\s"Π〈〉;

_test.parse.expr.document	.closure	_test.parse.expr.document_c
_test.parse.expr.document_label	.string	parse\sdocument.parser\sqq{"defn\sbool.t\s"⊲;}
_test.parse.expr.document_input	.string	"defn\sbool.t\s"⊲;

_test.parse.typesig.document	.closure	_test.parse.typesig.document_c
_test.parse.typesig.document_label	.string	parse\sdocument.parser\sqq{"defn\sbool.t\s"⊲\s::\sbool.t;}
_test.parse.typesig.document_input	.string	"defn\sbool.t\s"⊲\s::\sbool.t;

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{〈 'gstype ∝ nothing; 〉 ≡ 〈 'gstype ∝ just (product []); 〉}

_test.eq.gstype.nothing.just_c	.expr
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.property.label	.gvar
_test.eq.gstype.nothing.just_label	.gvar
test.deny	.gvar
_test.eq.gstype.nothing.just_false	.gvar
_test.eq.gstype.nothing.just_true	.gvar
gsdl.cgs.document.≡	.gvar
maybe.nothing	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
nothing	.apply	maybe.nothing	gsdl.cgs.gstype.t
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
doc0	.lrecord	gstype	nothing	pos	pos
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
doc1	.lrecord	gstype	just.empty.prod	pos	pos
b	.apply	gsdl.cgs.document.≡	|	doc0	doc1
test	.apply	test.deny	|	_test.eq.gstype.nothing.just_false	_test.eq.gstype.nothing.just_true	b
	.app	_test.eq.gstype.nothing.just_label	test
	.enter	test.property.label

# §section §gs{document.fmtgs 〈 'gstype ∝ just (product list.nil); 〉}

_test.fmtgs_c	.expr
string.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
fmtgs.prec.app	.gvar
_test.fmtgs_expected	.gvar
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
doc	.lrecord	gstype	just.empty.prod	pos	pos
snil	.apply	list.nil	rune.t
actual	.apply	gsdl.cgs.document.fmtgs	|	doc	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs_expected
	.app	_test.fmtgs_label	test
	.enter	test.property.label

# §section §gs{parse qq{:: "Π〈〉}}

_test.parse.empty.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.empty.document_k_c	.subcode
test.property.label	.gvar
_test.parse.empty.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.empty.document_input	.gvar
k	.alloc	_test.parse.empty.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.empty.document_input	k
	.app	_test.parse.empty.document_label	test
	.enter	test.property.label

_test.parse.empty.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.assert.eq	.gvar
gsdl.cgs.document.≡	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
actual	.larg	gsdl.cgs.document.t
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
expected	.lrecord	gstype	just.empty.prod	pos	pos
	.app	gsdl.cgs.document.≡	gsdl.cgs.document.fmtgs	actual	expected
	.enter	test.assert.eq	gsdl.cgs.document.t

# §section §gs{parse qq{"defn bool.t ⊲}}

_test.parse.expr.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.expr.document_k_c	.subcode
test.property.label	.gvar
_test.parse.expr.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.expr.document_input	.gvar
k	.alloc	_test.parse.expr.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.expr.document_input	k
	.app	_test.parse.expr.document_label	test
	.enter	test.property.label

_test.parse.expr.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
test.true	.gvar
actual	.larg	gsdl.cgs.document.t
	.enter	test.true

# §section §gs{parse qq{"defn bool.t ⊲ :: bool.t}}

_test.parse.typesig.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.typesig.document_k_c	.subcode
test.property.label	.gvar
_test.parse.typesig.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.typesig.document_input	.gvar
k	.alloc	_test.parse.typesig.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.typesig.document_input	k
	.app	_test.parse.typesig.document_label	test
	.enter	test.property.label

_test.parse.typesig.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
test.true	.gvar
actual	.larg	gsdl.cgs.document.t
	.enter	test.true
