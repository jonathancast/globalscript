#calculus: gsdl.string-code 0.3

	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.eq.gstype.nothing.just	_test.eq.expr.nothing.just	_test.fmtgs	_test.parse.empty.document	_test.parse.expr.document	_test.parse.typesig.document	_test.freevars.expr.document

_test.eq.gstype.nothing.just	.closure	_test.eq.gstype.nothing.just_c
_test.eq.gstype.nothing.just_label	.string	〈\s'gstype\s∝\snothing;\s〉\s≡\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.eq.gstype.nothing.just_false	.string	〈\s'gstype\s∝\snothing;\s〉\s≠\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.eq.gstype.nothing.just_true	.string	〈\s'gstype\s∝\snothing;\s〉\s≡\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉

_test.eq.expr.nothing.just	.closure	_test.eq.expr.nothing.just_c
_test.eq.expr.nothing.just_label	.string	〈\s'expr\s∝\snothing;\s〉\s≡\s〈\s'expr\s∝\sjust\serror;\s〉
_test.eq.expr.nothing.just_false	.string	〈\s'expr\s∝\snothing;\s〉\s≠\s〈\s'expr\s∝\sjust\serror;\s〉
_test.eq.expr.nothing.just_true	.string	〈\s'expr\s∝\snothing;\s〉\s≡\s〈\s'expr\s∝\sjust\serror;\s〉

_test.fmtgs	.closure	_test.fmtgs_c
_test.fmtgs_label	.string	document.fmtgs\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.fmtgs_expected	.string	〈\s'expr\s∝\snothing;\s'gstype\s∝\sjust\s(product\s[]);\s〉

_test.parse.empty.document	.closure	_test.parse.empty.document_c
_test.parse.empty.document_label	.string	parse\sdocument.parser\sqq{::\s"Π〈〉;}
_test.parse.empty.document_input	.string	::\s"Π〈〉;

_test.parse.expr.document	.closure	_test.parse.expr.document_c
_test.parse.expr.document_label	.string	parse\sdocument.parser\sqq{"defn\sbool.t\s"⊲;}
_test.parse.expr.document_input	.string	"defn\sbool.t\s"⊲;
_test.parse.expr.document_bool.s	.string	bool
_test.parse.expr.document_t.s	.string	t

_test.parse.typesig.document	.closure	_test.parse.typesig.document_c
_test.parse.typesig.document_label	.string	parse\sdocument.parser\sqq{"defn\sbool.t\s"⊲\s::\sbool.t;}
_test.parse.typesig.document_input	.string	"defn\sbool.t\s"⊲\s::\sbool.t;

_test.freevars.expr.document	.closure	_test.freevars.expr.document_c
_test.freevars.expr.document_label	.string	freevars\s〈\s'expr\s∝\sjust\s_;\s〉
_test.freevars.expr.document_t.s	.string	t

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

-- §section §gs{〈 'gstype ∝ nothing; 〉 ≡ 〈 'gstype ∝ just (product []); 〉}

_test.eq.gstype.nothing.just_c	.expr
gsdl.cgs.gsexpr.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.property.label	.gvar
_test.eq.gstype.nothing.just_label	.gvar
test.deny	.gvar
_test.eq.gstype.nothing.just_false	.gvar
_test.eq.gstype.nothing.just_true	.gvar
gsdl.cgs.document.≡	.gvar
maybe.nothing	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
nothing.gsexpr	.apply	maybe.nothing	gsdl.cgs.gsexpr.t
nothing	.apply	maybe.nothing	gsdl.cgs.gstype.t
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
doc0	.lrecord	expr	nothing.gsexpr	gstype	nothing	pos	pos
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
doc1	.lrecord	expr	nothing.gsexpr	gstype	just.empty.prod	pos	pos
b	.apply	gsdl.cgs.document.≡	|	doc0	doc1
test	.apply	test.deny	|	_test.eq.gstype.nothing.just_false	_test.eq.gstype.nothing.just_true	b
	.app	_test.eq.gstype.nothing.just_label	test
	.enter	test.property.label

-- §section §gs{〈 'expr ∝ nothing; 〉 ≡ 〈 'expr ∝ just error; 〉}

_test.eq.expr.nothing.just_c	.expr
gsdl.cgs.gsexpr.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.property.label	.gvar
_test.eq.expr.nothing.just_label	.gvar
test.deny	.gvar
_test.eq.expr.nothing.just_false	.gvar
_test.eq.expr.nothing.just_true	.gvar
gsdl.cgs.document.≡	.gvar
maybe.nothing	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
nothing.gsexpr	.apply	maybe.nothing	gsdl.cgs.gsexpr.t
nothing.gstype	.apply	maybe.nothing	gsdl.cgs.gstype.t
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
doc0	.lrecord	expr	nothing.gsexpr	gstype	nothing.gstype	pos	pos
e	.undefined	gsdl.cgs.gsexpr.t
just.e	.apply	maybe.just	gsdl.cgs.gsexpr.t	|	e
doc1	.lrecord	expr	just.e	gstype	nothing.gstype	pos	pos
b	.apply	gsdl.cgs.document.≡	|	doc0	doc1
test	.apply	test.deny	|	_test.eq.expr.nothing.just_false	_test.eq.expr.nothing.just_true	b
	.app	_test.eq.expr.nothing.just_label	test
	.enter	test.property.label

-- §section §gs{document.fmtgs 〈 'gstype ∝ just (product list.nil); 〉}

_test.fmtgs_c	.expr
string.t	.tygvar
gsdl.cgs.gsexpr.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
gsdl.cgs.document.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.nothing	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
fmtgs.prec.app	.gvar
_test.fmtgs_expected	.gvar
nothing	.apply	maybe.nothing	gsdl.cgs.gsexpr.t
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
doc	.lrecord	expr	nothing	gstype	just.empty.prod	pos	pos	|	gsdl.cgs.document.t
snil	.apply	list.nil	rune.t
actual	.apply	gsdl.cgs.document.fmtgs	|	doc	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs_expected
	.app	_test.fmtgs_label	test
	.enter	test.property.label

-- §section §gs{parse qq{:: "Π〈〉}}

_test.parse.empty.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.empty.document_k_c	.subcode
test.property.label	.gvar
_test.parse.empty.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.empty.document_input	.gvar
k	.closure	_test.parse.empty.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.empty.document_input	k
	.app	_test.parse.empty.document_label	test
	.enter	test.property.label

_test.parse.empty.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
gsdl.cgs.gsexpr.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
test.assert.eq	.gvar
gsdl.cgs.document.≡	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.nothing	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
actual	.larg	gsdl.cgs.document.t
nothing	.apply	maybe.nothing	gsdl.cgs.gsexpr.t
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name
expected	.lrecord	expr	nothing	gstype	just.empty.prod	pos	pos	|	gsdl.cgs.document.t
	.app	gsdl.cgs.document.≡	gsdl.cgs.document.fmtgs	actual	expected
	.enter	test.assert.eq	gsdl.cgs.document.t

-- §section §gs{parse qq{"defn bool.t ⊲}}

_test.parse.expr.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.expr.document_k_c	.subcode
test.property.label	.gvar
_test.parse.expr.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.expr.document_input	.gvar
k	.closure	_test.parse.expr.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.expr.document_input	k
	.app	_test.parse.expr.document_label	test
	.enter	test.property.label

_test.parse.expr.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
gsdl.cgs.gsexpr.t	.tygvar
gsdl.sourcepos.t	.tygvar
gsdl.var.component.t	.tygvar
gsdl.cgs.gskind.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
test.assert.eq	.gvar
gsdl.cgs.document.≡	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.just	.gvar
gsdl.cgs.gsexpr.pos	.gvar
natural.1	.gvar
parser.test.assert.fixtures.sample.file.name	.gvar
gsdl.cgs.gsexpr.expr.heavy.cast	.gvar
gsdl.cgs.gscoercion.pos	.gvar
gsdl.cgs.gscoercion.defn	.gvar
gsdl.var.basevar	.gvar
list.:	.gvar
gsdl.var.component.alphanum	.gvar
_test.parse.expr.document_bool.s	.gvar
list.singleton	.gvar
_test.parse.expr.document_t.s	.gvar
gsdl.cgs.gsexpr.cast.source.missing	.gvar
maybe.nothing	.gvar
actual	.larg	gsdl.cgs.document.t
pos	.lrecord	0.col	natural.1	0.line	natural.1	file	parser.test.assert.fixtures.sample.file.name	|	gsdl.sourcepos.t
bool.c	.apply	gsdl.var.component.alphanum	|	_test.parse.expr.document_bool.s
t.c	.apply	gsdl.var.component.alphanum	|	_test.parse.expr.document_t.s
bool.t.v.cs1	.apply	list.singleton	gsdl.var.component.t	|	t.c
bool.t.v.cs	.apply	list.:	gsdl.var.component.t	|	bool.c	bool.t.v.cs1
bool.t.v	.apply	gsdl.var.basevar	|	bool.t.v.cs
nothing	.apply	maybe.nothing	gsdl.cgs.gskind.t
co1	.apply	gsdl.cgs.gscoercion.defn	|	bool.t.v	nothing
co	.apply	gsdl.cgs.gscoercion.pos	|	pos	co1
ee	.apply	gsdl.cgs.gsexpr.cast.source.missing	|	pos
cast1	.apply	gsdl.cgs.gsexpr.expr.heavy.cast	|	co	ee
cast	.apply	gsdl.cgs.gsexpr.pos	|	pos	cast1
just.cast	.apply	maybe.just	gsdl.cgs.gsexpr.t	|	cast
gstype.nothing	.apply	maybe.nothing	gsdl.cgs.gstype.t
expected	.lrecord	expr	just.cast	gstype	gstype.nothing	pos	pos	|	gsdl.cgs.document.t
	.app	gsdl.cgs.document.≡	gsdl.cgs.document.fmtgs	actual	expected
	.enter	test.assert.eq	gsdl.cgs.document.t

-- §section §gs{parse qq{"defn bool.t ⊲ :: bool.t}}

_test.parse.typesig.document_c	.expr
rune.t	.tygvar
gsdl.cgs.document.t	.tygvar
_test.parse.typesig.document_k_c	.subcode
test.property.label	.gvar
_test.parse.typesig.document_label	.gvar
parser.test.assert.passes	.gvar
parser.rune.advance	.gvar
rune.print	.gvar
gsdl.cgs.document.parser	.gvar
_test.parse.typesig.document_input	.gvar
k	.closure	_test.parse.typesig.document_k_c
test	.apply	parser.test.assert.passes	rune.t	gsdl.cgs.document.t	|	parser.rune.advance	rune.print	gsdl.cgs.document.parser	_test.parse.typesig.document_input	k
	.app	_test.parse.typesig.document_label	test
	.enter	test.property.label

_test.parse.typesig.document_k_c	.expr
gsdl.cgs.document.t	.tygvar
test.true	.gvar
actual	.larg	gsdl.cgs.document.t
	.enter	test.true

-- §section §gs{freevars 〈 'expr ∝ just _; 〉}

_test.freevars.expr.document_c	.expr
ordered.set.t	.tygvar
gsdl.cgs.symbol.t	.tygvar
gsdl.cgs.gsexpr.t	.tygvar
gsdl.var.component.t	.tygvar
gsdl.cgs.gskind.t	.tygvar
gsdl.sourcepos.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.document.t	.tygvar
test.property.label	.gvar
_test.freevars.expr.document_label	.gvar
test.assert.eq	.gvar
ordered.set.≡	.gvar
gsdl.cgs.symbol.≡	.gvar
ordered.set.fmtgs	.gvar
gsdl.cgs.symbol.fmtgs	.gvar
gsdl.cgs.document.freevars	.gvar
maybe.just	.gvar
gsdl.cgs.gsexpr.expr.heavy.cast	.gvar
gsdl.cgs.gscoercion.defn	.gvar
gsdl.var.basevar	.gvar
list.singleton	.gvar
gsdl.var.component.alphanum	.gvar
_test.freevars.expr.document_t.s	.gvar
maybe.nothing	.gvar
gsdl.cgs.gsexpr.cast.source.missing	.gvar
ordered.set.singleton	.gvar
gsdl.cgs.symbol.compare	.gvar
gsdl.cgs.symbol.tyvar	.gvar
set.symbol.ty	.tylet	ordered.set.t	gsdl.cgs.symbol.t
set.symbol.≡	.apply	ordered.set.≡	gsdl.cgs.symbol.t	|	gsdl.cgs.symbol.≡
set.symbol.fmtgs	.apply	ordered.set.fmtgs	gsdl.cgs.symbol.t	|	gsdl.cgs.symbol.fmtgs
v.c	.apply	gsdl.var.component.alphanum	|	_test.freevars.expr.document_t.s
v.cs	.apply	list.singleton	gsdl.var.component.t	|	v.c
v	.apply	gsdl.var.basevar	|	v.cs
nothing	.apply	maybe.nothing	gsdl.cgs.gskind.t
e.co	.apply	gsdl.cgs.gscoercion.defn	|	v	nothing
pos	.undefined	gsdl.sourcepos.t
e.so	.apply	gsdl.cgs.gsexpr.cast.source.missing	|	pos
e	.apply	gsdl.cgs.gsexpr.expr.heavy.cast	|	e.co	e.so
just.e	.apply	maybe.just	gsdl.cgs.gsexpr.t	|	e
nothing.ty	.apply	maybe.nothing	gsdl.cgs.gstype.t
doc	.lrecord	expr	just.e	gstype	nothing.ty	pos	pos	|	gsdl.cgs.document.t
actual	.apply	gsdl.cgs.document.freevars	|	doc
sym	.apply	gsdl.cgs.symbol.tyvar	|	v
expected	.apply	ordered.set.singleton	gsdl.cgs.symbol.t	|	gsdl.cgs.symbol.compare	sym
test	.apply	test.assert.eq	set.symbol.ty	|	set.symbol.≡	set.symbol.fmtgs	actual	expected
	.app	_test.freevars.expr.document_label	test
	.enter	test.property.label
