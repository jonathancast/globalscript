	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.fmtgs

_test.fmtgs	.closure	_test.fmtgs_c
_test.fmtgs_label	.string	document.fmtgs\s〈\s'gstype\s∝\sjust\s(product\s[]);\s〉
_test.fmtgs_expected	.string	〈\s'gstype\s∝\sjust\s(product\s[]);\s〉

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{document.fmtgs 〈 'gstype ∝ just (product list.nil); 〉}

_test.fmtgs_c	.expr
string.t	.tygvar
gsdl.cgs.gstype.t	.tygvar
gsdl.cgs.gstype.field.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
gsdl.cgs.document.fmtgs	.gvar
maybe.just	.gvar
gsdl.cgs.gstype.product	.gvar
list.nil	.gvar
fmtgs.prec.app	.gvar
_test.fmtgs_expected	.gvar
nil	.apply	list.nil	gsdl.cgs.gstype.field.t
empty.prod	.apply	gsdl.cgs.gstype.product	|	nil
just.empty.prod	.apply	maybe.just	gsdl.cgs.gstype.t	|	empty.prod
doc	.lrecord	gstype	just.empty.prod
snil	.apply	list.nil	rune.t
actual	.apply	gsdl.cgs.document.fmtgs	|	doc	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs_expected
	.app	_test.fmtgs_label	test
	.enter	test.property.label
