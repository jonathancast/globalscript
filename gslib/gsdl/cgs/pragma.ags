#calculus: gsdl.string-code 0.3

	.prefix

	.data

gsdl.cgs.pragma.parse	.closure	_gsdl.cgs.pragma.parse_c
_gsdl.cgs.pragma.parse_colon.re	.regex	:
_gsdl.cgs.pragma.parse_ws.re	.regex	\s*
_gsdl.cgs.pragma.parse_ws.nl.re	.regex	\s*\n

gsdl.cgs.pragma.gstype.get	.closure	_gsdl.cgs.pragma.gstype.get_c
_type	.string	type

	.code

-- §section §gs{gsdl.cgs.pragma.parse}

-- > for (
-- >     'nm ← gsdl.cgs.syntax.gsid;
-- >     'pr ← gsdl.cgs.syntax.lexeme m/:/ *> (gsdl.cgs.pragma.rc.like <$> quotes)
-- >         <|> gsdl.cgs.syntax.lexeme m/=/ *> (gsdl.cgs.pragma.json.like <$> json.parse)
-- >    ;
-- > ) [| 《 nm, pr, 》 |]

_gsdl.cgs.pragma.parse_c	.expr
parser.t	.tygvar
rune.t	.tygvar
list.t	.tygvar
gsdl.pragma.t	.tygvar
_gsdl.pragma.parse_res.ty	.tygvar
_gsdl.cgs.pragma.parse_f_c	.subcode
parser.lift2	.gvar
gsdl.cgs.syntax.gsid	.gvar
parser.*>	.gvar
parser.match	.gvar
rune.compare	.gvar
_gsdl.cgs.pragma.parse_colon.re	.gvar
_gsdl.cgs.pragma.parse_ws.re	.gvar
parser.<*	.gvar
parser.map	.gvar
gsdl.pragma.rc.like	.gvar
parser.string.quotes	.gvar
_gsdl.cgs.pragma.parse_ws.nl.re	.gvar
string.ty	.tylet	list.t	rune.t
list.string.ty	.tylet	list.t	string.ty
f	.closure	_gsdl.cgs.pragma.parse_f_c
colon.parse	.apply	parser.match	rune.t	|	rune.compare	_gsdl.cgs.pragma.parse_colon.re
ws	.apply	parser.match	rune.t	|	rune.compare	_gsdl.cgs.pragma.parse_ws.re
value.parse.3	.apply	parser.map	rune.t	list.string.ty	gsdl.pragma.t	|	gsdl.pragma.rc.like	parser.string.quotes
ws.nl	.apply	parser.match	rune.t	|	rune.compare	_gsdl.cgs.pragma.parse_ws.nl.re
value.parse.2	.apply	parser.<*	rune.t	gsdl.pragma.t	string.ty	|	value.parse.3	ws.nl
value.parse.1	.apply	parser.*>	rune.t	string.ty	gsdl.pragma.t	|	ws	value.parse.2
value.parse	.apply	parser.*>	rune.t	string.ty	gsdl.pragma.t	|	colon.parse	value.parse.1
	.app	f	gsdl.cgs.syntax.gsid	value.parse
	.enter	parser.lift2	rune.t	string.ty	gsdl.pragma.t	_gsdl.pragma.parse_res.ty

_gsdl.cgs.pragma.parse_f_c	.expr
list.t	.tygvar
rune.t	.tygvar
gsdl.pragma.t	.tygvar
nm	.larg	list.t	rune.t
pr	.larg	gsdl.pragma.t
r	.record	0	nm	1	pr
	.lift
	.yield	r

-- §section §gs{gsdl.cgs.pragma.gstype.get}

_gsdl.cgs.pragma.gstype.get_c	.expr
ibio.file.name.t	.tygvar
ordered.map.t	.tygvar
list.t	.tygvar
rune.t	.tygvar
gsdl.pragma.t	.tygvar
_gsdl.cgs.pragma.gstype.get_k	.subcode
maybe.t.out	.cogvar
ordered.map.get	.gvar
list.compare	.gvar
rune.compare	.gvar
_type	.gvar
string.ty	.tylet	list.t	rune.t
fn	.larg	ibio.file.name.t
prs	.larg	ordered.map.t	string.ty	gsdl.pragma.t
string.compare	.apply	list.compare	rune.t	|	rune.compare
	.force	_gsdl.cgs.pragma.gstype.get_k
	.coerce	maybe.t.out	gsdl.pragma.t
	.app	string.compare	_type	prs
	.enter	ordered.map.get	string.ty	gsdl.pragma.t

_gsdl.cgs.pragma.gstype.get_k	.forcecont
maybe.prim.u	.tygvar
gsdl.pragma.t	.tygvar
maybe.t	.tygvar
string.t	.tygvar
_gsdl.cgs.pragma.gstype.get_just_k	.subcode
gsdl.pragma.t.out	.cogvar
maybe.nothing	.gvar
mb.0	.karg	maybe.prim.u	gsdl.pragma.t
	.analyze	mb.0	just	nothing
		.case	just
pr		.fkarg	0	gsdl.pragma.t
			.force	_gsdl.cgs.pragma.gstype.get_just_k
			.coerce	gsdl.pragma.t.out
			.enter	pr
		.case	nothing
			.enter	maybe.nothing	string.t

_gsdl.cgs.pragma.gstype.get_just_k	.forcecont
gsdl.pragma.prim.u	.tygvar
list.t	.tygvar
string.t	.tygvar
_gsdl.cgs.pragma.gstype.get_just_rc.like_k	.subcode
list.t.out	.cogvar
pr0	.karg	gsdl.pragma.prim.u
	.analyze	pr0	rc.like
		.case	rc.like
as		.fkarg	0	list.t	string.t
			.force	_gsdl.cgs.pragma.gstype.get_just_rc.like_k
			.coerce	list.t.out	string.t
			.enter	as
	-- > :: maybe.t	string.t

_gsdl.cgs.pragma.gstype.get_just_rc.like_k	.forcecont
list.prim.u	.tygvar
string.t	.tygvar
list.t	.tygvar
maybe.t	.tygvar
maybe.just	.gvar
as0	.karg	list.prim.u	string.t
	.analyze	as0	:	nil
		.case	:
a0		.fkarg	0	string.t
as1		.fkarg	1	list.t	string.t
			.app	a0
			.yield	maybe.just	string.t
		.case	nil
			.undef	maybe.t	string.t
