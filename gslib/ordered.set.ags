	.prefix

# Note: this library doesn't balance its binary trees;
# that will need to be fixed but I want to see what the performance looks like directly first.

	.data

ordered.set.elem	.closure	_ordered.set.elem_c	_ordered.set.elem_ty

ordered.set.tolist	.closure	_ordered.set.tolist_c
_ordered.set.tolist_w	.closure	_ordered.set.tolist_w_c	_ordered.set.tolist_w_ty

ordered.set.≡	.closure	_ordered.set.≡_c

ordered.set.fmtgs	.closure	_ordered.set.fmtgs_c
_ordered.set.fmtgs_vs.ds_f_suffix.s	.string	,\s

ordered.set.empty	.closure	_ordered.set.empty_c
ordered.set.singleton	.closure	_ordered.set.singleton_c
ordered.set.insert	.closure	_ordered.set.insert_c	_ordered.set.insert_ty
ordered.set.union	.closure	_ordered.set.union_c	_ordered.set.union_ty
_ordered.set.union_split	.closure	_ordered.set.union_split_c	_ordered.set.union_split_ty

ordered.set.prim.branch	.closure	_ordered.set.prim.branch_c

	.code

# §section §gs{ordered.set.elem}

_ordered.set.elem_c	.expr
order.total.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.elem_k	.subcode
ordered.set.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
x	.larg	α
s	.larg	ordered.set.t	α
	.force	_ordered.set.elem_k
	.coerce	ordered.set.t.out	α
	.enter	s

_ordered.set.elem_k	.forcecont
order.total.t	.tygvar
ordered.set.prim.u	.tygvar
ordered.set.t	.tygvar
bool.t	.tygvar	# Temp
_ordered.set.elem_branch_k	.subcode
order.total.ord.t.out	.cogvar
bool.false	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
x	.fv	α
s0	.karg	ordered.set.prim.u	α	# s0 :: ordered.set.prim.u	α
	.analyze	s0	branch	empty
		.case	branch
x1		.fkarg	0	α
sl		.fkarg	1	ordered.set.t	α
sr		.fkarg	2	ordered.set.t	α
			.force	_ordered.set.elem_branch_k
			.coerce	order.total.ord.t.out
			.app	x	x1
			.enter	cmp
		.case	empty
			.enter	bool.false
	# > :: bool.t

_ordered.set.elem_branch_k	.forcecont
order.total.t	.tygvar
ordered.set.t	.tygvar
order.total.ord.prim.u	.tygvar
bool.true	.gvar
ordered.set.elem	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
x	.fv	α
sl	.fv	ordered.set.t	α
sr	.fv	ordered.set.t	α
o0	.karg	order.total.ord.prim.u
	.analyze	o0	eq	gt	lt
		.case	eq
			.enter	bool.true
		.case	gt
			.app	cmp	x	sr
			.enter	ordered.set.elem	α
		.case	lt
			.app	cmp	x	sl
			.enter	ordered.set.elem	α

# §section §gs{ordered.set.tolist}

_ordered.set.tolist_c	.expr
ordered.set.t	.tygvar
_ordered.set.tolist_w	.gvar
list.nil	.gvar
α	.tyarg	*
s	.larg	ordered.set.t	α
nil	.apply	list.nil	α
	.app	s	nil
	.enter	_ordered.set.tolist_w	α

_ordered.set.tolist_w_c	.expr
ordered.set.t	.tygvar
list.t	.tygvar
_ordered.set.tolist_w_k	.subcode
ordered.set.t.out	.cogvar
α	.tyarg	*
s	.larg	ordered.set.t	α
ys	.larg	list.t	α
	.force	_ordered.set.tolist_w_k
	.coerce	ordered.set.t.out	α
	.enter	s

_ordered.set.tolist_w_k	.forcecont
order.total.t	.tygvar
list.t	.tygvar
ordered.set.prim.u	.tygvar
ordered.set.t	.tygvar
_ordered.set.tolist_w	.gvar
list.:	.gvar
α	.tyfv	*
ys	.fv	list.t	α
s0	.karg	ordered.set.prim.u	α
	.analyze	s0	branch	empty
		.case	branch
x		.fkarg	0	α
sl		.fkarg	1	ordered.set.t	α
sr		.fkarg	2	ordered.set.t	α
ys2			.apply	_ordered.set.tolist_w	α	|	sr	ys
ys1			.apply	list.:	α	|	x	ys2
			.app	sl	ys1
			.enter	_ordered.set.tolist_w	α
		.case	empty
			.enter	ys
	# > :: list.t	α

# §section §gs{ordered.set.≡}

_ordered.set.≡_c	.expr
eq.t	.tygvar
ordered.set.t	.tygvar
list.≡	.gvar
ordered.set.tolist	.gvar
α	.tyarg	*
eq	.larg	eq.t	α
s0	.larg	ordered.set.t	α
s1	.larg	ordered.set.t	α
vs0	.apply	ordered.set.tolist	α	|	s0
vs1	.apply	ordered.set.tolist	α	|	s1
	.app	eq	vs0	vs1
	.enter	list.≡	α

# §section §gs{ordered.set.fmtgs}

_ordered.set.fmtgs_c	.expr
ordered.set.t	.tygvar
fmtgs.t	.tygvar
diff.list.t	.tygvar	# Temp
rune.t	.tygvar	# Temp
_ordered.set.fmtgs_vs.ds_c	.subcode
fmtgs.prec	.gvar
fmtgs.prec.arg	.gvar
diff.list.:	.gvar
rune.left.curly	.gvar
diff.list.<>	.gvar
diff.list.singleton	.gvar
rune.right.curly	.gvar
α	.tyarg	*
fmt	.larg	fmtgs.t	α
s	.larg	ordered.set.t	α
vs.ds	.alloc	_ordered.set.fmtgs_vs.ds_c
ds2	.apply	diff.list.singleton	rune.t	|	rune.right.curly
ds1	.apply	diff.list.<>	rune.t	|	vs.ds	ds2
ds	.apply	diff.list.:	rune.t	|	rune.left.curly	ds1
	.app	fmtgs.prec.arg	ds
	.enter	fmtgs.prec

_ordered.set.fmtgs_vs.ds_c	.expr
fmtgs.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.fmtgs_vs.ds_k	.subcode
list.t.out	.cogvar
ordered.set.tolist	.gvar
α	.tyfv	*
fmt	.fv	fmtgs.t	α
s	.fv	ordered.set.t	α
	.force	_ordered.set.fmtgs_vs.ds_k
	.coerce	list.t.out	α
	.app	s
	.enter	ordered.set.tolist	α

_ordered.set.fmtgs_vs.ds_k	.forcecont
fmtgs.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
rune.t	.tygvar
diff.list.t	.tygvar
_ordered.set.fmtgs_vs.ds_f_c	.subcode
list.t.in	.cogvar
diff.list.:	.gvar
rune.space	.gvar
list.foldr	.gvar
diff.list.<>	.gvar
diff.list.nil	.gvar
list.map	.gvar
α	.tyfv	*
diff.list.rune.ty	.tylet	diff.list.t	rune.t
fmt	.fv	fmtgs.t	α
vs0	.karg	list.prim.u	α
	.analyze	vs0	:	nil
		.case	:
v0		.fkarg	0	α
vs0		.fkarg	1	list.t	α
f			.alloc	_ordered.set.fmtgs_vs.ds_f_c
vs0.l			.lifted	vs0
vs0.cl			.cast	vs0.l	list.t.in	α
dss			.apply	list.map	α	diff.list.rune.ty	|	f	vs0.cl
diff.list.rune.nil			.apply	diff.list.nil	rune.t
diff.list.rune.<>			.apply	diff.list.<>	rune.t
ds			.apply	list.foldr	diff.list.rune.ty	diff.list.rune.ty	|	diff.list.rune.<>	diff.list.rune.nil	dss
			.app	rune.space	ds
			.enter	diff.list.:	rune.t
		.case	nil
			.enter	diff.list.nil	rune.t

_ordered.set.fmtgs_vs.ds_f_c	.expr
fmtgs.t	.tygvar
rune.t	.tygvar
diff.list.postpend	.gvar
fmtgs.prec.max	.gvar
_ordered.set.fmtgs_vs.ds_f_suffix.s	.gvar
α	.tyfv	*
fmt	.fv	fmtgs.t	α
v	.larg	α
v.ds	.apply	fmt	|	v	fmtgs.prec.max
	.app	v.ds	_ordered.set.fmtgs_vs.ds_f_suffix.s
	.enter	diff.list.postpend	rune.t

# §section §gs{ordered.set.empty}

_ordered.set.empty_c	.expr
ordered.set.prim.u	.tygvar
ordered.set.t.in	.cogvar
α	.tyarg	*
res.u	.tylet	ordered.set.prim.u	α
c	.constr	res.u	empty
	.coerce	ordered.set.t.in	α
	.lift
	.yield	c

# §section §gs{ordered.set.singleton}

_ordered.set.singleton_c	.expr
order.total.t	.tygvar
ordered.set.t	.tygvar	# Temp
ordered.set.prim.branch	.gvar
ordered.set.empty	.gvar
α	.tyarg	*
cmp	.larg	order.total.t	α
x	.larg	α
empty	.apply	ordered.set.empty	α
	.app	x	empty	empty
	.yield	ordered.set.prim.branch	α

# §section §gs{ordered.set.insert}

_ordered.set.insert_c	.expr
order.total.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.insert_k	.subcode
ordered.set.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
x	.larg	α
s	.larg	ordered.set.t	α
	.force	_ordered.set.insert_k
	.coerce	ordered.set.t.out	α
	.enter	s

_ordered.set.insert_k	.forcecont
order.total.t	.tygvar
ordered.set.prim.u	.tygvar
ordered.set.t	.tygvar
_ordered.set.insert_branch_k	.subcode
order.total.ord.t.out	.cogvar
ordered.set.prim.branch	.gvar
ordered.set.empty	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
x	.fv	α
s0	.karg	ordered.set.prim.u	α
	.analyze	s0	branch	empty
		.case	branch
x1		.fkarg	0	α
sl		.fkarg	1	ordered.set.t	α
sr		.fkarg	2	ordered.set.t	α
			.force	_ordered.set.insert_branch_k
			.coerce	order.total.ord.t.out
			.app	x	x1
			.enter	cmp
		.case	empty
empty			.apply	ordered.set.empty	α
			.app	x	empty	empty
			.yield	ordered.set.prim.branch	α
	# > :: ordered.set.t	α

_ordered.set.insert_branch_k	.forcecont
order.total.t	.tygvar
ordered.set.t	.tygvar
order.total.ord.prim.u	.tygvar
ordered.set.prim.branch	.gvar
ordered.set.insert	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
x	.fv	α
x1	.fv	α
sl	.fv	ordered.set.t	α
sr	.fv	ordered.set.t	α
o0	.karg	order.total.ord.prim.u
	.analyze	o0	eq	gt	lt
		.case	eq
			.undef	ordered.set.t	α
		.case	gt
sr1			.apply	ordered.set.insert	α	|	cmp	x	sr
			.app	x1	sl	sr1
			.yield	ordered.set.prim.branch	α
		.case	lt
sl1			.apply	ordered.set.insert	α	|	cmp	x	sl
			.app	x1	sl1	sr
			.yield	ordered.set.prim.branch	α

# §section §gs{ordered.set.union}

_ordered.set.union_c	.expr
order.total.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.union_k0	.subcode
ordered.set.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
s0	.larg	ordered.set.t	α
s1	.larg	ordered.set.t	α
	.force	_ordered.set.union_k0
	.coerce	ordered.set.t.out	α
	.enter	s0

_ordered.set.union_k0	.forcecont
order.total.t	.tygvar
ordered.set.t	.tygvar
ordered.set.prim.u	.tygvar
_ordered.set.union_k1	.subcode
ordered.set.t.out	.cogvar
α	.tyfv	*
cmp	.fv	order.total.t	α
s1	.fv	ordered.set.t	α
s0.0	.karg	ordered.set.prim.u	α
	.force	_ordered.set.union_k1
	.coerce	ordered.set.t.out	α
	.enter	s1

_ordered.set.union_k1	.forcecont
order.total.t	.tygvar
ordered.set.prim.u	.tygvar
ordered.set.t	.tygvar
_ordered.set.union_branch_branch_k	.subcode
order.total.ord.t.out	.cogvar
ordered.set.t.in	.cogvar
α	.tyfv	*
cmp	.fv	order.total.t	α
s0.0	.fv	ordered.set.prim.u	α
s1.0	.karg	ordered.set.prim.u	α
	.analyze	s0.0	branch	empty
		.case	branch
x0		.fkarg	0	α
sl0		.fkarg	1	ordered.set.t	α
sr0		.fkarg	2	ordered.set.t	α
			.analyze	s1.0	branch	empty
				.case	branch
x1				.fkarg	0	α
sl1				.fkarg	1	ordered.set.t	α
sr1				.fkarg	2	ordered.set.t	α
					.force	_ordered.set.union_branch_branch_k
					.coerce	order.total.ord.t.out
					.app	x0	x1
					.enter	cmp
				.case	empty
					.coerce	ordered.set.t.in	α
					.lift
					.yield	s0.0
		.case	empty
			.coerce	ordered.set.t.in	α
			.lift
			.yield	s1.0
	# > :: ordered.set.t	α

_ordered.set.union_branch_branch_k	.forcecont
order.total.t	.tygvar
ordered.set.t	.tygvar
order.total.ord.prim.u	.tygvar
ordered.set.prim.branch	.gvar
ordered.set.union	.gvar
_ordered.set.union_split	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
x0	.fv	α
sl0	.fv	ordered.set.t	α
sr0	.fv	ordered.set.t	α
x1	.fv	α
sl1	.fv	ordered.set.t	α
sr1	.fv	ordered.set.t	α
o0	.karg	order.total.ord.prim.u
	.analyze	o0	eq	gt	lt
		.case	eq
s2.0			.apply	ordered.set.union	α	|	cmp	sl0	sl1
s2.1			.apply	ordered.set.union	α	|	cmp	sr0	sr1
			.app	x0	s2.0	s2.1
			.yield	ordered.set.prim.branch	α
		.case	gt	# §gs{x1 < x0}
sl0.s			.apply	_ordered.set.union_split	α	|	cmp	x1	sl0
sl0.l			.lfield	0	sl0.s
sl0.r			.lfield	0	sl0.s
sr1.s			.apply	_ordered.set.union_split	α	|	cmp	x0	sr1
sr1.l			.lfield	0	sr1.s
sr1.r			.lfield	0	sr1.s
s3.0			.apply	ordered.set.union	α	|	cmp	sl1	sl0.l	# ${ y | y < x1 < x0, }$
s3.1			.apply	ordered.set.union	α	|	cmp	sl0.r	sr1.l	# ${ y | x1 < y < x0, }$
s4			.apply	ordered.set.prim.branch	α	|	x1	s3.0	s3.1
s3.2			.apply	ordered.set.union	α	|	cmp	sr1.r	sr0	# ${ y | x1 < x0 < y, }$
			.app	x0		s4	sr0
			.yield	ordered.set.prim.branch	α
		.case	lt	# §gs{x0 < x1}
sl1.s			.apply	_ordered.set.union_split	α	|	cmp	x0	sl1
sl1.l			.lfield	0	sl1.s
sl1.r			.lfield	1	sl1.s
sr0.s			.apply	_ordered.set.union_split	α	|	cmp	x1	sr0
sr0.l			.lfield	0	sr0.s
sr0.r			.lfield	1	sr0.s
s3.0			.apply	ordered.set.union	α	|	cmp	sl0	sl1.l
s3.1			.apply	ordered.set.union	α	|	cmp	sr0.l	sl1.r
s4			.apply	ordered.set.prim.branch	α	|	x0	s3.0	s3.1
s3.2			.apply	ordered.set.union	α	|	cmp	sr0.r	sr1
			.app	x1	s4	s3.2
			.yield	ordered.set.prim.branch	α

_ordered.set.union_split_c	.expr
order.total.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.union_split_k	.subcode
ordered.set.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
x	.larg	α
s	.larg	ordered.set.t	α
	.force	_ordered.set.union_split_k
	.coerce	ordered.set.t.out	α
	.enter	s

_ordered.set.union_split_k	.forcecont
ordered.set.prim.u	.tygvar
ordered.set.t	.tygvar
_ordered.set.union_split_res.ty	.tygvar	# Temp
ordered.set.empty	.gvar
α	.tyfv	*
s0	.karg	ordered.set.prim.u	α
	.analyze	s0	branch	empty
		.case	branch
x1		.fkarg	0	α
sl		.fkarg	1	ordered.set.t	α
s2		.fkarg	2	ordered.set.t	α
			.undef	_ordered.set.union_split_res.ty	α
		.case	empty
empty			.apply	ordered.set.empty	α
r			.record	0	empty	1	empty
			.lift
			.yield	r

# §section §gs{tygvar}

_ordered.set.prim.branch_c	.expr
ordered.set.t	.tygvar
ordered.set.prim.u	.tygvar
ordered.set.t.in	.cogvar
α	.tyarg	*
res.u	.tylet	ordered.set.prim.u	α
x	.arg	α
l	.arg	ordered.set.t	α
r	.arg	ordered.set.t	α
c	.constr	res.u	branch	0	x	1	l	2	r
	.coerce	ordered.set.t.in	α
	.lift
	.yield	c

	.type

# §section §gs{ordered.set.t}

ordered.set.t	.tyabstract	**^
ordered.set.prim.u	.tygvar
α	.tylambda	*
	.tylift
	.tyref	ordered.set.prim.u	α

ordered.set.prim.u	.tyexpr
record.unboxed.empty	.tygvar
_ordered.set.prim.u_branch_ty	.tygvar
α	.tylambda	*
branch_ty	.tylet	_ordered.set.prim.u_branch_ty	α
	.tysum	branch	branch_ty	empty	record.unboxed.empty

_ordered.set.prim.u_branch_ty	.tyexpr
ordered.set.t	.tygvar
α	.tylambda	*
set.ty	.tylet	ordered.set.t	α
	.tyubproduct	0	α	1	set.ty	2	set.ty

# §section §gs{ordered.set.elem}

_ordered.set.elem_ty	.tyexpr
order.total.t	.tygvar
ordered.set.t	.tygvar
bool.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	order.total.t	α
	.tylift
	.tyfun	α
	.tylift
	.tyfun	ordered.set.t	α
	.tyref	bool.t

# §section §gs{ordered.set.tolist}

_ordered.set.tolist_w_ty	.tyexpr
ordered.set.t	.tygvar
list.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	ordered.set.t	α
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	α

# §section §gs{ordered.set.insert}

_ordered.set.insert_ty	.tyexpr
order.total.t	.tygvar
ordered.set.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	order.total.t	α
	.tylift
	.tyfun	α
	.tylift
	.tyfun	ordered.set.t	α
	.tyref	ordered.set.t	α

# §section §gs{ordered.set.union}

_ordered.set.union_ty	.tyexpr
order.total.t	.tygvar
ordered.set.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	order.total.t	α
	.tylift
	.tyfun	ordered.set.t	α
	.tylift
	.tyfun	ordered.set.t	α
	.tyref	ordered.set.t	α

_ordered.set.union_split_ty	.tyexpr
order.total.t	.tygvar
ordered.set.t	.tygvar
_ordered.set.union_split_res.ty	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	order.total.t	α
	.tylift
	.tyfun	α
	.tylift
	.tyfun	ordered.set.t	α
	.tyref	_ordered.set.union_split_res.ty	α

_ordered.set.union_split_res.ty	.tyexpr
ordered.set.t	.tygvar
α	.tylambda	*
set.ty	.tylet	ordered.set.t	α
	.tylift
	.typroduct	0	set.ty	1	set.ty

	.coercion

ordered.set.t.in	.tycoercion
ordered.set.t	.tygvar
α	.tylambda	*
	.tydefinition	ordered.set.t	α

ordered.set.t.out	.tycoercion
ordered.set.t	.tygvar
α	.tylambda	*
	.tyinvert
	.tydefinition	ordered.set.t	α
