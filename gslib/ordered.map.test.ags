#calculus: gsdl.string-code 0.7
#type: document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test_get.empty	_test.get.k.insert.k.empty	_test.eq.empty.insert.k.empty	_test.empty.union.empty	_test.branch.union.branch	_test.branch.union.branch.gt	_test.values.empty	_test.values.insert.empty

_test_get.empty	.closure	_test_get.empty_c
_test_get.empty_label	.string	get\sx\sempty

_test.get.k.insert.k.empty	.closure	_test.get.k.insert.k.empty_c
_test.get.k.insert.k.empty_label	.string	get\s3\sinsert\s3\sempty

_test.eq.empty.insert.k.empty	.closure	_test.eq.empty.insert.k.empty_c
_test.eq.empty.insert.k.empty_label	.string	empty\s≡\sinsert\s3\sempty
_test.eq.empty.insert.k.empty_false	.string	empty\s≠\sinsert\s3\sempty
_test.eq.empty.insert.k.empty_true	.string	empty\s≡\sinsert\s3\sempty

_test.empty.union.empty	.closure	_test.empty.union.empty_c
_test.empty.union.empty_label	.string	empty\s∪\sempty

_test.branch.union.branch	.closure	_test.branch.union.branch_c
_test.branch.union.branch_label	.string	branch\s_\s_\s_\s_\s∪\sbranch\s_\s_\s_\s_
_test.branch.union.branch_test0_label	.string	get\snatural.1
_test.branch.union.branch_test1_label	.string	get\snatural.2

_test.branch.union.branch.gt	.closure	_test.branch.union.branch.gt_c
_test.branch.union.branch.gt_label	.string	branch\s2\s_\s_\s_\s∪\sbranch\s1\s_\s_\s_
_test.branch.union.branch.gt_test0_label	.string	get\snatural.1
_test.branch.union.branch.gt_test1_label	.string	get\snatural.2

_test.values.empty	.closure	_test.values.empty_c
_test.values.empty_label	.string	values\sempty

_test.values.insert.empty	.closure	_test.values.insert.empty_c
_test.values.insert.empty_label	.string	values\s$\sinsert\sk\sv\sempty

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

-- §section §gs{get empty}

_test_get.empty_c	.expr
maybe.t	.tygvar
bool.t	.tygvar
natural.t	.tygvar
test.property.label	.gvar
_test_get.empty_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.3	.gvar
ordered.map.empty	.gvar
natural.compare	.gvar
maybe.nothing	.gvar
mb.t	.tylet	maybe.t	bool.t
mb.≡	.apply	maybe.≡	bool.t	|	bool.≡
mb.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
empty	.apply	ordered.map.empty	natural.t	bool.t
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.3	empty
nothing	.apply	maybe.nothing	bool.t
test	.apply	test.assert.eq	mb.t	|	mb.≡	mb.fmtgs	actual	nothing
	.app	_test_get.empty_label	test
	.enter	test.property.label

-- §section §gs{get 3 (insert 3 empty)}

_test.get.k.insert.k.empty_c	.expr
maybe.t	.tygvar
bool.t	.tygvar
natural.t	.tygvar
test.property.label	.gvar
_test.get.k.insert.k.empty_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.compare	.gvar
natural.3	.gvar
ordered.map.insert	.gvar
bool.false	.gvar
ordered.map.empty	.gvar
maybe.just	.gvar
mb.t	.tylet	maybe.t	bool.t
mb.≡	.apply	maybe.≡	bool.t	|	bool.≡
mb.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
empty	.apply	ordered.map.empty	natural.t	bool.t
map	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.3	bool.false	empty
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.3	map
just.false	.apply	maybe.just	bool.t	|	bool.false
test	.apply	test.assert.eq	mb.t	|	mb.≡	mb.fmtgs	actual	just.false
	.app	_test.get.k.insert.k.empty_label	test
	.enter	test.property.label

-- §section §gs{empty ≡ insert 3 empty}

_test.eq.empty.insert.k.empty_c	.expr
natural.t	.tygvar
bool.t	.tygvar
test.property.label	.gvar
_test.eq.empty.insert.k.empty_label	.gvar
test.deny	.gvar
_test.eq.empty.insert.k.empty_false	.gvar
_test.eq.empty.insert.k.empty_true	.gvar
ordered.map.≡	.gvar
natural.compare	.gvar
bool.≡	.gvar
ordered.map.empty	.gvar
ordered.map.insert	.gvar
natural.3	.gvar
bool.false	.gvar
empty	.apply	ordered.map.empty	natural.t	bool.t
map	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.3	bool.false	empty
eq	.apply	ordered.map.≡	natural.t	bool.t	|	natural.compare	bool.≡	empty	map
test	.apply	test.deny	|	_test.eq.empty.insert.k.empty_false	_test.eq.empty.insert.k.empty_true	eq
	.app	_test.eq.empty.insert.k.empty_label	test
	.enter	test.property.label

-- §section §gs{empty ∪ empty}

_test.empty.union.empty_c	.expr
ordered.map.t	.tygvar
natural.t	.tygvar
bool.t	.tygvar
fmtgs.t	.tygvar	-- Temp
test.property.label	.gvar
_test.empty.union.empty_label	.gvar
test.assert.eq	.gvar
ordered.map.≡	.gvar
natural.compare	.gvar
bool.≡	.gvar
ordered.map.∪	.gvar
ordered.map.empty	.gvar
map.ty	.tylet	ordered.map.t	natural.t	bool.t
map.eq	.apply	ordered.map.≡	natural.t	bool.t	|	natural.compare	bool.≡
map.fmtgs	.undefined	fmtgs.t	map.ty
empty	.apply	ordered.map.empty	natural.t	bool.t
actual	.apply	ordered.map.∪	natural.t	bool.t	|	natural.compare	empty	empty
test	.apply	test.assert.eq	map.ty	|	map.eq	map.fmtgs	actual	empty
	.app	_test.empty.union.empty_label	test
	.enter	test.property.label

-- §section §gs{branch _ _ _ _ ∪ branch _ _ _ _}

_test.branch.union.branch_c	.expr
natural.t	.tygvar
bool.t	.tygvar
_test.branch.union.branch_test0_c	.subcode
_test.branch.union.branch_test1_c	.subcode
test.property.label	.gvar
_test.branch.union.branch_label	.gvar
test.property.∧	.gvar
ordered.map.∪	.gvar
natural.compare	.gvar
ordered.map.insert	.gvar
natural.1	.gvar
bool.true	.gvar
ordered.map.empty	.gvar
natural.2	.gvar
bool.false	.gvar
empty	.apply	ordered.map.empty	natural.t	bool.t
map0	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.1	bool.true	empty
map1	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.2	bool.false	empty
union	.apply	ordered.map.∪	natural.t	bool.t	|	natural.compare	map0	map1
test0	.closure	_test.branch.union.branch_test0_c
test1	.closure	_test.branch.union.branch_test1_c
tests	.apply	test.property.∧	|	test0	test1
	.app	_test.branch.union.branch_label	tests
	.enter	test.property.label

_test.branch.union.branch_test0_c	.expr
ordered.map.t	.tygvar
natural.t	.tygvar
bool.t	.tygvar
maybe.t	.tygvar
test.property.label	.gvar
_test.branch.union.branch_test0_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.compare	.gvar
natural.1	.gvar
maybe.just	.gvar
bool.true	.gvar
union	.fv	ordered.map.t	natural.t	bool.t
maybe.bool.ty	.tylet	maybe.t	bool.t
maybe.bool.≡	.apply	maybe.≡	bool.t	|	bool.≡
maybe.bool.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.1	union
expected	.apply	maybe.just	bool.t	|	bool.true
test	.apply	test.assert.eq	maybe.bool.ty	|	maybe.bool.≡	maybe.bool.fmtgs	actual	expected
	.app	_test.branch.union.branch_test0_label	test
	.enter	test.property.label

_test.branch.union.branch_test1_c	.expr
ordered.map.t	.tygvar
natural.t	.tygvar
bool.t	.tygvar
maybe.t	.tygvar
test.property.label	.gvar
_test.branch.union.branch_test1_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.compare	.gvar
natural.2	.gvar
maybe.just	.gvar
bool.false	.gvar
union	.fv	ordered.map.t	natural.t	bool.t
maybe.bool.ty	.tylet	maybe.t	bool.t
maybe.bool.≡	.apply	maybe.≡	bool.t	|	bool.≡
maybe.bool.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.2	union
expected	.apply	maybe.just	bool.t	|	bool.false
test	.apply	test.assert.eq	maybe.bool.ty	|	maybe.bool.≡	maybe.bool.fmtgs	actual	expected
	.app	_test.branch.union.branch_test1_label	test
	.enter	test.property.label

-- §section §gs{branch 2 _ _ _ ∪ branch 1 _ _ _}

_test.branch.union.branch.gt_c	.expr
natural.t	.tygvar
bool.t	.tygvar
_test.branch.union.branch.gt_test0_c	.subcode
_test.branch.union.branch.gt_test1_c	.subcode
test.property.label	.gvar
_test.branch.union.branch.gt_label	.gvar
test.property.∧	.gvar
ordered.map.∪	.gvar
natural.compare	.gvar
ordered.map.insert	.gvar
natural.1	.gvar
bool.true	.gvar
ordered.map.empty	.gvar
natural.2	.gvar
bool.false	.gvar
empty	.apply	ordered.map.empty	natural.t	bool.t
map0	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.2	bool.true	empty
map1	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.1	bool.false	empty
union	.apply	ordered.map.∪	natural.t	bool.t	|	natural.compare	map0	map1
test0	.closure	_test.branch.union.branch.gt_test0_c
test1	.closure	_test.branch.union.branch.gt_test1_c
tests	.apply	test.property.∧	|	test0	test1
	.app	_test.branch.union.branch.gt_label	tests
	.enter	test.property.label

_test.branch.union.branch.gt_test0_c	.expr
ordered.map.t	.tygvar
natural.t	.tygvar
bool.t	.tygvar
maybe.t	.tygvar
test.property.label	.gvar
_test.branch.union.branch.gt_test0_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.compare	.gvar
natural.1	.gvar
maybe.just	.gvar
bool.false	.gvar
union	.fv	ordered.map.t	natural.t	bool.t
maybe.bool.ty	.tylet	maybe.t	bool.t
maybe.bool.≡	.apply	maybe.≡	bool.t	|	bool.≡
maybe.bool.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.1	union
expected	.apply	maybe.just	bool.t	|	bool.false
test	.apply	test.assert.eq	maybe.bool.ty	|	maybe.bool.≡	maybe.bool.fmtgs	actual	expected
	.app	_test.branch.union.branch.gt_test0_label	test
	.enter	test.property.label

_test.branch.union.branch.gt_test1_c	.expr
ordered.map.t	.tygvar
natural.t	.tygvar
bool.t	.tygvar
maybe.t	.tygvar
test.property.label	.gvar
_test.branch.union.branch.gt_test1_label	.gvar
test.assert.eq	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
ordered.map.get	.gvar
natural.compare	.gvar
natural.2	.gvar
maybe.just	.gvar
bool.true	.gvar
union	.fv	ordered.map.t	natural.t	bool.t
maybe.bool.ty	.tylet	maybe.t	bool.t
maybe.bool.≡	.apply	maybe.≡	bool.t	|	bool.≡
maybe.bool.fmtgs	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs
actual	.apply	ordered.map.get	natural.t	bool.t	|	natural.compare	natural.2	union
expected	.apply	maybe.just	bool.t	|	bool.true
test	.apply	test.assert.eq	maybe.bool.ty	|	maybe.bool.≡	maybe.bool.fmtgs	actual	expected
	.app	_test.branch.union.branch.gt_test1_label	test
	.enter	test.property.label

-- §section §gs{values empty}

_test.values.empty_c	.expr
list.t	.tygvar
bool.t	.tygvar
natural.t	.tygvar
test.property.label	.gvar
_test.values.empty_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
bool.≡	.gvar
list.fmtgs.byDefault	.gvar
bool.fmtgs	.gvar
ordered.map.values	.gvar
ordered.map.empty	.gvar
list.nil	.gvar
list.bool.ty	.tylet	list.t	bool.t
list.bool.eq	.apply	list.≡	bool.t	|	bool.≡
list.bool.fmtgs	.apply	list.fmtgs.byDefault	bool.t	|	bool.fmtgs
empty	.apply	ordered.map.empty	natural.t	bool.t
actual	.apply	ordered.map.values	natural.t	bool.t	|	empty
nil	.apply	list.nil	bool.t
test	.apply	test.assert.eq	list.bool.ty	|	list.bool.eq	list.bool.fmtgs	actual	nil
	.app	_test.values.empty_label	test
	.enter	test.property.label

-- §section §gs{values $ insert k v empty}

_test.values.insert.empty_c	.expr
list.t	.tygvar
bool.t	.tygvar
natural.t	.tygvar
test.property.label	.gvar
_test.values.empty_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
bool.≡	.gvar
list.fmtgs.byDefault	.gvar
bool.fmtgs	.gvar
ordered.map.values	.gvar
ordered.map.insert	.gvar
natural.compare	.gvar
natural.1	.gvar
bool.true	.gvar
ordered.map.empty	.gvar
list.singleton	.gvar
list.bool.ty	.tylet	list.t	bool.t
list.bool.eq	.apply	list.≡	bool.t	|	bool.≡
list.bool.fmtgs	.apply	list.fmtgs.byDefault	bool.t	|	bool.fmtgs
empty	.apply	ordered.map.empty	natural.t	bool.t
map	.apply	ordered.map.insert	natural.t	bool.t	|	natural.compare	natural.1	bool.true	empty
actual	.apply	ordered.map.values	natural.t	bool.t	|	map
expected	.apply	list.singleton	bool.t	|	bool.true
test	.apply	test.assert.eq	list.bool.ty	|	list.bool.eq	list.bool.fmtgs	actual	expected
	.app	_test.values.empty_label	test
	.enter	test.property.label
