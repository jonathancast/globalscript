#calculus: gsdl.string-code 0.6

	.prefix

	.data

list.nil	.closure	_list.nil_c
list.:	.closure	_list.:_c

list.null	.closure	_list.null_c

list.foldr	.closure	_list.foldr_c	_list.foldr_ty
list.foldr1	.closure	_list.foldr1_c	_list.foldr1_ty
list.map	.closure	_list.map_c	_list.map_ty
list.filter	.closure	_list.filter_c	_list.filter_ty
list.filterMap	.closure	_list.filterMap_c	_list.filterMap_ty

list.foldl	.closure	_list.foldl_c	_list.foldl_ty
list.reverse	.closure	_list.reverse_c

list.scanl	.closure	_list.scanl_c	_list.scanl_ty

list.singleton	.closure	_list.singleton_c
list.<>	.closure	_list.<>_c	_list.<>_ty

list.concat	.closure	_list.concat_c

list.byZip.map2	.closure	_list.byZip.map2_c	_list.byZip.map2_ty

list.sort	.closure	_list.sort_c	_list.sort_ty

list.≡	.closure	_list.≡_c	_list.≡_ty
list.compare	.closure	_list.compare_c	_list.compare_ty

list.elem	.closure	_list.elem_c	_list.elem_ty

	.code

-- §section Constructors

_list.nil_c	.expr
list.prim.u	.tygvar
list.t.in	.cogvar
α	.tyarg	*
t	.tylet	list.prim.u	α
c	.constr	t	nil
	.coerce	list.t.in	α
	.lift
	.yield	c

_list.:_c	.expr
list.t	.tygvar
list.prim.u	.tygvar
list.t.in	.cogvar
α	.tyarg	*
t	.tylet	list.prim.u	α
x	.larg	α
xn	.larg	list.t	α
c	.constr	t	:	0	x	1	xn
	.coerce	list.t.in	α
	.lift
	.yield	c

-- §section §gs{list.null}

_list.null_c	.expr
list.t	.tygvar
bool.t	.tygvar
_list.null_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
xn	.larg	list.t	α
	.force	_list.null_k
	.coerce	list.t.out	α
	.enter	xn

_list.null_k	.forcecont
list.prim.u	.tygvar
list.t	.tygvar
bool.t	.tygvar
bool.false	.gvar
bool.true	.gvar
α	.tyfv	*
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.enter	bool.false
		.case	nil
			.enter	bool.true

-- §section §gs{list.foldr}

_list.foldr_c	.expr
_list.foldr_f_ty	.tygvar
list.t	.tygvar
_list.foldr_k0	.subcode
list.t.out	.cogvar
α	.tyarg	*
β	.tyarg	*
f	.larg	_list.foldr_f_ty	α	β
z	.larg	β
xn	.larg	list.t	α
	.force	_list.foldr_k0
	.coerce	list.t.out	α
	.enter	xn

_list.foldr_k0	.forcecont
_list.foldr_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
list.foldr	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldr_f_ty	α	β
z	.fv	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
z1			.apply	list.foldr	α	β	|	f	z	xn1
			.app	x0	z1
			.enter	f
		.case	nil
			.enter	z

-- §section §gs{list.foldr1}

_list.foldr1_c	.expr
list.t	.tygvar
_list.foldr1_ft	.tygvar
_list.foldr1_k1	.subcode
list.t.out	.cogvar
α	.tyarg	*
ft	.tylet	_list.foldr1_ft	α
f	.larg	ft
xn	.larg	list.t	α
	.force	_list.foldr1_k1
	.coerce	list.t.out	α
	.enter	xn

_list.foldr1_k1	.forcecont
list.t	.tygvar
list.prim.u	.tygvar
_list.foldr1_ft	.tygvar
_list.foldr1_k2	.subcode
list.t.out	.cogvar
α	.tyfv	*
f	.fv	_list.foldr1_ft	α
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_list.foldr1_k2
			.coerce	list.t.out	α
			.enter	xn1
		.case	nil
			.undef	α

_list.foldr1_k2	.forcecont
list.t	.tygvar
list.prim.u	.tygvar
_list.foldr1_ft	.tygvar
_list.foldr1_rec	.subcode
α	.tyfv	*
f	.fv	_list.foldr1_ft	α
x0	.fv	α
xn1	.fv	list.t	α
xn1_0	.karg	list.prim.u	α
	.analyze	xn1_0	:	nil
		.case	:
x1		.fkarg	0	α
xn2		.fkarg	1	list.t	α
y			.closure	_list.foldr1_rec
			.app	x0	y
			.enter	f
		.case	nil
			.enter	x0

_list.foldr1_rec	.expr
list.t	.tygvar
_list.foldr1_ft	.tygvar
list.foldr1	.gvar
α	.tyfv	*
f	.fv	_list.foldr1_ft	α
xn1	.fv	list.t	α
	.app	f	xn1
	.enter	list.foldr1	α

-- §section §gs{list.map}

_list.map_c	.expr
_list.map_f_ty	.tygvar
list.t	.tygvar
_list.map_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
β	.tyarg	*
f	.larg	_list.map_f_ty	α	β
xn	.larg	list.t	α
	.force	_list.map_k
	.coerce	list.t.out	α
	.enter	xn

_list.map_k	.forcecont
_list.map_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
list.map	.gvar
list.:	.gvar
list.nil	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.map_f_ty	α	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
y0			.apply	f	|	x0
ys1			.apply	list.map	α	β	|	f	xn1
			.app	y0	ys1
			.enter	list.:	β
		.case	nil
			.enter	list.nil	β

-- §section §gs{list.filter}

_list.filter_c	.expr
_list.filter_pred_ty	.tygvar
list.t	.tygvar
_list.filter_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
pred	.larg	_list.filter_pred_ty	α
xn	.larg	list.t	α
	.force	_list.filter_k
	.coerce	list.t.out	α
	.enter	xn

_list.filter_k	.forcecont
_list.filter_pred_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_list.filter_:_k	.subcode
bool.t.out	.cogvar
list.nil	.gvar
α	.tyfv	*
pred	.fv	_list.filter_pred_ty	α
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_list.filter_:_k
			.coerce	bool.t.out
			.app	x0
			.enter	pred
		.case	nil
			.enter	list.nil	α

_list.filter_:_k	.forcecont
_list.filter_pred_ty	.tygvar
list.t	.tygvar
bool.prim.u	.tygvar
list.:	.gvar
list.filter	.gvar
α	.tyfv	*
pred	.fv	_list.filter_pred_ty	α
x0	.fv	α
xn1	.fv	list.t	α
b0	.karg	bool.prim.u
ys1	.apply	list.filter	α	|	pred	xn1
	.analyze	b0	false	true
		.case	false
			.enter	ys1
		.case	true
			.app	x0	ys1
			.enter	list.:	α

-- §section §gs{list.filterMap}

_list.filterMap_c	.expr
_list.filterMap_f_ty	.tygvar
list.t	.tygvar
_list.filterMap_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
β	.tyarg	*
f	.larg	_list.filterMap_f_ty	α	β
xn	.larg	list.t	α
	.force	_list.filterMap_k
	.coerce	list.t.out	α
	.enter	xn

_list.filterMap_k	.forcecont
_list.filterMap_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_list.filterMap_:_k	.subcode
maybe.t.out	.cogvar
list.nil	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.filterMap_f_ty	α	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_list.filterMap_:_k
			.coerce	maybe.t.out	β
			.app	x0
			.enter	f
		.case	nil
			.enter	list.nil	β

_list.filterMap_:_k	.forcecont
_list.filterMap_f_ty	.tygvar
list.t	.tygvar
maybe.prim.u	.tygvar
list.:	.gvar
list.filterMap	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.filterMap_f_ty	α	β
xn1	.fv	list.t	α
mb0	.karg	maybe.prim.u	β
	.analyze	mb0	just	nothing
		.case	just
y		.fkarg	0	β
ys			.apply	list.filterMap	α	β	|	f	xn1
			.app	y	ys
			.enter	list.:	β
		.case	nothing
			.app	f	xn1
			.enter	list.filterMap	α	β

-- §section §gs{list.foldl}

_list.foldl_c	.expr
_list.foldl_f_ty	.tygvar
list.t	.tygvar
_list.foldl_k0	.subcode
α	.tyarg	*
β	.tyarg	*
f	.larg	_list.foldl_f_ty	α	β
z	.larg	β
xn	.larg	list.t	α
	.strict	_list.foldl_k0
	.enter	z

_list.foldl_k0	.strictcont
_list.foldl_f_ty	.tygvar
list.t	.tygvar
_list.foldl_k1	.subcode
list.t.out	.cogvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
xn	.fv	list.t	α
z	.karg	β
	.force	_list.foldl_k1
	.coerce	list.t.out	α
	.enter	xn

_list.foldl_k1	.forcecont
_list.foldl_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
list.foldl	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
z	.fv	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
z1			.apply	f	|	z	x0
			.app	f	z1	xn1
			.enter	list.foldl	α	β
		.case	nil
			.enter	z

-- §section §gs{list.reverse}

_list.reverse_c	.expr
list.t	.tygvar
_list.reverse_fcons_c	.subcode
list.foldl	.gvar
list.nil	.gvar
α	.tyarg	*
list.α	.tylet	list.t	α
fcons	.closure	_list.reverse_fcons_c
nil	.apply	list.nil	α
	.app	fcons	nil
	.enter	list.foldl	α	list.α

_list.reverse_fcons_c	.expr
list.t	.tygvar
list.:	.gvar
α	.tyfv	*
xn	.larg	list.t	α
x	.larg	α
	.app	x	xn
	.enter	list.:	α

-- §section §gs{list.scanl}

_list.scanl_c	.expr
_list.foldl_f_ty	.tygvar
list.t	.tygvar
_list.scanl_k	.subcode
α	.tyarg	*
β	.tyarg	*
f	.larg	_list.foldl_f_ty	α	β
z	.larg	β
xn	.larg	list.t	α
	.strict	_list.scanl_k
	.enter	z

_list.scanl_k	.strictcont
_list.foldl_f_ty	.tygvar
list.t	.tygvar
_list.scanl_zs_c	.subcode
list.:	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
xn	.fv	list.t	α
z0	.karg	β
zs	.closure	_list.scanl_zs_c
	.app	z0	zs
	.enter	list.:	β

_list.scanl_zs_c	.expr
_list.foldl_f_ty	.tygvar
list.t	.tygvar
_list.scanl_zs_k	.subcode
list.t.out	.cogvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
xn	.fv	list.t	α
z0	.fv	β
	.force	_list.scanl_zs_k
	.coerce	list.t.out	α
	.enter	xn

_list.scanl_zs_k	.forcecont
_list.foldl_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_list.scanl_zs_:_k	.subcode
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
z0	.fv	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.strict	_list.scanl_zs_:_k
			.app	z0	x0
			.enter	f
		.case	nil
			.undef	list.t	β

_list.scanl_zs_:_k	.strictcont
_list.foldl_f_ty	.tygvar
list.t	.tygvar
list.scanl	.gvar
α	.tyfv	*
β	.tyfv	*
f	.fv	_list.foldl_f_ty	α	β
xn1	.fv	list.t	α
z1	.karg	β
	.app	f	z1	xn1
	.enter	list.scanl	α	β

-- §section §gs{list.singleton}

_list.singleton_c	.expr
list.:	.gvar
list.nil	.gvar
α	.tyarg	*
x	.larg	α
n	.apply	list.nil	α
	.app	x	n
	.enter	list.:	α

-- §section §gs{list.<>}

_list.<>_c	.expr
list.t	.tygvar
_list.<>.code.cont	.subcode
list.t.out	.cogvar
α	.tyarg	*
xn	.larg	list.t	α
ys	.larg	list.t	α
	.force	_list.<>.code.cont
	.coerce	list.t.out	α
	.enter	xn

_list.<>.code.cont	.forcecont
list.t	.tygvar
list.prim.u	.tygvar
list.t.in	.cogvar
list.<>	.gvar
α	.tyfv	*
ys	.fv	list.t	α
t	.tylet	list.prim.u	α
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
ys1			.apply	list.<>	α	|	xn1	ys
ys2			.constr	t	:	0	x0	1	ys1
			.coerce	list.t.in	α
			.lift
			.yield	ys2
		.case	nil
			.enter	ys

-- §section §gs{list.concat}

_list.concat_c	.expr
list.t	.tygvar
list.foldr	.gvar
list.<>	.gvar
list.nil	.gvar
α	.tyarg	*
list.α.ty	.tylet	list.t	α
<>	.apply	list.<>	α
nil	.apply	list.nil	α
	.app	<>	nil
	.enter	list.foldr	list.α.ty	list.α.ty

-- §section §gs{list.byZip.map2}

_list.byZip.map2_c	.expr
_list.byZip.map2_f_ty	.tygvar
list.t	.tygvar
_list.byZip.map2_k0	.subcode
list.t.out	.cogvar
α0	.tyarg	*
α1	.tyarg	*
β	.tyarg	*
f	.larg	_list.byZip.map2_f_ty	α0	α1	β
xn0	.larg	list.t	α0
xn1	.larg	list.t	α1
	.force	_list.byZip.map2_k0
	.coerce	list.t.out	α0
	.enter	xn0

_list.byZip.map2_k0	.forcecont
_list.byZip.map2_f_ty	.tygvar
list.t	.tygvar
list.prim.u	.tygvar
_list.byZip.map2_k1	.subcode
list.t.out	.cogvar
α0	.tyfv	*
α1	.tyfv	*
β	.tyfv	*
f	.fv	_list.byZip.map2_f_ty	α0	α1	β
xn1	.fv	list.t	α1
xn0.0	.karg	list.prim.u	α0
	.force	_list.byZip.map2_k1
	.coerce	list.t.out	α1
	.enter	xn1

_list.byZip.map2_k1	.forcecont
_list.byZip.map2_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
list.:	.gvar
list.byZip.map2	.gvar
α0	.tyfv	*
α1	.tyfv	*
β	.tyfv	*
f	.fv	_list.byZip.map2_f_ty	α0	α1	β
xn0.0	.fv	list.prim.u	α0
xn1.0	.karg	list.prim.u	α1
	.analyze	xn0.0	:	nil
		.case	:
x0.0		.fkarg	0	α0
xn0.1		.fkarg	1	list.t	α0
			.analyze	xn1.0	:	nil
				.case	:
x1.0				.fkarg	0	α1
xn1.1				.fkarg	1	list.t	α1
y0					.apply	f	|	x0.0	x1.0
ys1					.apply	list.byZip.map2	α0	α1	β	|	f	xn0.1	xn1.1
					.app	y0	ys1
					.enter	list.:	β
				.case	nil
					.undef	list.t	β
		.case	nil
			.undef	list.t	β

-- §section §gs{list.sort}

_list.sort_c	.expr
order.total.t	.tygvar
list.t	.tygvar
_list.sort_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
xn	.larg	list.t	α
	.force	_list.sort_k
	.coerce	list.t.out	α
	.enter	xn

_list.sort_k	.forcecont
list.prim.u	.tygvar
list.t	.tygvar
list.nil	.gvar
α	.tyfv	*
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.undef	list.t	α
		.case	nil
			.enter	list.nil	α

-- §section §gs{list.≡}

_list.≡_c	.expr
bool.t	.tygvar
list.t	.tygvar
_list.≡_arg_ty	.tygvar
_list.≡.k0	.subcode
list.t.out	.cogvar
α	.tyarg	*
at	.tylet	_list.≡_arg_ty	α
c	.larg	at
xn	.larg	list.t	α
ys	.larg	list.t	α
	.force	_list.≡.k0
	.coerce	list.t.out	α
	.enter	xn

_list.≡.k0	.forcecont
bool.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_list.≡_arg_ty	.tygvar
_list.≡.k1	.subcode
list.t.out	.cogvar
α	.tyfv	*
c	.fv	_list.≡_arg_ty	α
ys	.fv	list.t	α
t	.tylet	list.prim.u	α
xn0	.karg	t
	.force	_list.≡.k1
	.coerce	list.t.out	α
	.enter	ys

_list.≡.k1	.forcecont
list.prim.u	.tygvar
list.t	.tygvar
_list.≡_arg_ty	.tygvar
_list.≡_:_:_k	.subcode
bool.t.out	.cogvar
bool.true	.gvar
bool.false	.gvar
α	.tyfv	*
c	.fv	_list.≡_arg_ty	α
xn0	.fv	list.prim.u	α
ys0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.analyze	ys0	:	nil
				.case	:
y				.fkarg	0	α
ys1				.fkarg	1	list.t	α
					.force	_list.≡_:_:_k
					.coerce	bool.t.out
					.app	x	y
					.enter	c
				.case	nil
					.enter	bool.false
		.case	nil
			.analyze	ys0	:	nil
				.case	:
y				.fkarg	0	α
ys1				.fkarg	1	list.t	α
					.enter	bool.false
				.case	nil
					.enter	bool.true

_list.≡_:_:_k	.forcecont
list.t	.tygvar
_list.≡_arg_ty	.tygvar
bool.prim.u	.tygvar
bool.false	.gvar
list.≡	.gvar
α	.tyfv	*
c	.fv	_list.≡_arg_ty	α
xn1	.fv	list.t	α
ys1	.fv	list.t	α
b0	.karg	bool.prim.u
	.analyze	b0	false	true
		.case	false
			.enter	bool.false
		.case	true
			.app	c	xn1	ys1
			.enter	list.≡	α

-- §section §gs{list.compare}

_list.compare_c	.expr
order.total.t	.tygvar
list.t	.tygvar
_list.compare_k0	.subcode
list.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
xn0	.larg	list.t	α
xn1	.larg	list.t	α
	.force	_list.compare_k0
	.coerce	list.t.out	α
	.enter	xn0

_list.compare_k0	.forcecont
order.total.t	.tygvar
list.t	.tygvar
list.prim.u	.tygvar
_list.compare_k1	.subcode
list.t.out	.cogvar
α	.tyfv	*
cmp	.fv	order.total.t	α
xn1	.fv	list.t	α
xn0.0	.karg	list.prim.u	α
	.force	_list.compare_k1
	.coerce	list.t.out	α
	.enter	xn1

_list.compare_k1	.forcecont
order.total.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
order.total.ord.t	.tygvar	-- Temp
_list.compare_:_:_k	.subcode
order.total.ord.t.out	.cogvar
order.total.ord.lt	.gvar
order.total.ord.eq	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
xn0.0	.fv	list.prim.u	α
xn1.0	.karg	list.prim.u	α
	.analyze	xn0.0	:	nil
		.case	:
x0		.fkarg	0	α
xn0.1		.fkarg	1	list.t	α
			.analyze	xn1.0	:	nil
				.case	:
x1				.fkarg	0	α
xn1.1				.fkarg	1	list.t	α
					.force	_list.compare_:_:_k
					.coerce	order.total.ord.t.out
					.app	x0	x1
					.enter	cmp
				.case	nil
					.undef	order.total.ord.t
		.case	nil
			.analyze	xn1.0	:	nil
				.case	:
x1				.fkarg	0	α
xn1.1				.fkarg	1	list.t	α
					.enter	order.total.ord.lt
				.case	nil
					.enter	order.total.ord.eq

_list.compare_:_:_k	.forcecont
order.total.t	.tygvar
list.t	.tygvar
order.total.ord.prim.u	.tygvar
list.compare	.gvar
order.total.ord.gt	.gvar
order.total.ord.lt	.gvar
α	.tyfv	*
cmp	.fv	order.total.t	α
xn0.1	.fv	list.t	α
xn1.1	.fv	list.t	α
o0	.karg	order.total.ord.prim.u
	.analyze	o0	eq	gt	lt
		.case	eq
			.app	cmp	xn0.1	xn1.1
			.enter	list.compare	α
		.case	gt
			.enter	order.total.ord.gt
		.case	lt
			.enter	order.total.ord.lt

-- §section §gs{list.elem}

_list.elem_c	.expr
eq.t	.tygvar
list.t	.tygvar
_list.elem_k	.subcode
list.t.out	.cogvar
α	.tyarg	*
eq	.larg	eq.t	α
x	.larg	α
xn	.larg	list.t	α
	.force	_list.elem_k
	.coerce	list.t.out	α
	.enter	xn

_list.elem_k	.forcecont
eq.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_list.elem_:_k	.subcode
bool.t.out	.cogvar
bool.false	.gvar
α	.tyfv	*
eq	.fv	eq.t	α
x	.fv	α
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_list.elem_:_k
			.coerce	bool.t.out
			.app	x	x0
			.enter	eq
		.case	nil
			.enter	bool.false

_list.elem_:_k	.forcecont
eq.t	.tygvar
list.t	.tygvar
bool.prim.u	.tygvar
list.elem	.gvar
bool.true	.gvar
α	.tyfv	*
eq	.fv	eq.t	α
x	.fv	α
xn1	.fv	list.t	α
b0	.karg	bool.prim.u
	.analyze	b0	false	true
		.case	false
			.app	eq	x	xn1
			.enter	list.elem	α
		.case	true
			.enter	bool.true

	.type

-- §section §gs{list.t}

list.t	.tyabstract	**^
list.prim.u	.tygvar
α	.tylambda	*
list.prim.u.α	.tylet	list.prim.u	α
	.tylift
	.tyref	list.prim.u.α

list.prim.u	.tyexpr
_cons_type	.tygvar
_nil_type	.tygvar
α	.tylambda	*
_cons_type_α	.tylet	_cons_type	α
_nil_type_α	.tylet	_nil_type	α
	.tysum	:	_cons_type_α	nil	_nil_type_α

_cons_type	.tyexpr
_tail_type	.tygvar
α	.tylambda	*
_list_α	.tylet	_tail_type	α
	.tyubproduct	0	α	1	_list_α

_tail_type	.tyexpr
list.t	.tygvar
α	.tylambda	*
	.tyref	list.t	α

_nil_type	.tyexpr
α	.tylambda	*
	.tyubproduct

-- §section §gs{list.foldr}

_list.foldr_ty	.tyexpr
_list.foldr_f_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.foldr_f_ty	α	β
	.tylift
	.tyfun	β
	.tylift
	.tyfun	list.t	α
	.tyref	β

_list.foldr_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tylift
	.tyfun	β
	.tyref	β

-- §section §gs{list.foldr1}

_list.foldr1_ty	.tyexpr
_list.foldr1_ft	.tygvar
list.t	.tygvar
α	.tyforall	*
at	.tylet	_list.foldr1_ft	α
	.tylift
	.tyfun	at
	.tylift
	.tyfun	list.t	α
	.tyref	α

_list.foldr1_ft	.tyexpr
α	.tylambda	*
	.tylift
	.tyfun	α
	.tylift
	.tyfun	α
	.tyref	α

-- §section §gs{list.map}

_list.map_ty	.tyexpr
_list.map_f_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.map_f_ty	α	β
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	β

_list.map_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	β

-- §section §gs{list.filter}

_list.filter_ty	.tyexpr
_list.filter_pred_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	_list.filter_pred_ty	α
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	α

_list.filter_pred_ty	.tyexpr
bool.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	bool.t

-- §section §gs{list.filterMap}

_list.filterMap_ty	.tyexpr
_list.filterMap_f_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.filterMap_f_ty	α	β
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	β

_list.filterMap_f_ty	.tyexpr
maybe.t	.tygvar
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	maybe.t	β

-- §section §gs{list.foldl}

_list.foldl_ty	.tyexpr
_list.foldl_f_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.foldl_f_ty	α	β
	.tylift
	.tyfun	β
	.tylift
	.tyfun	list.t	α
	.tyref	β

_list.foldl_f_ty	.tyexpr
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	β
	.tylift
	.tyfun	α
	.tyref	β

-- §section §gs{list.scanl}

_list.scanl_ty	.tyexpr
_list.foldl_f_ty	.tygvar
list.t	.tygvar
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.foldl_f_ty	α	β
	.tylift
	.tyfun	β
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	β

-- §section §gs{list.<>}

_list.<>_ty	.tyexpr
list.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	list.t	α
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	α

-- §section §gs{list.byZip.map2}

_list.byZip.map2_ty	.tyexpr
_list.byZip.map2_f_ty	.tygvar
list.t	.tygvar
α0	.tyforall	*
α1	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_list.byZip.map2_f_ty	α0	α1	β
	.tylift
	.tyfun	list.t	α0
	.tylift
	.tyfun	list.t	α1
	.tyref	list.t	β

_list.byZip.map2_f_ty	.tyexpr
α0	.tylambda	*
α1	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α0
	.tylift
	.tyfun	α1
	.tyref	β

-- §section §gs{list.sort}

_list.sort_ty	.tyexpr
order.total.t	.tygvar
list.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	order.total.t	α
	.tylift
	.tyfun	list.t	α
	.tyref	list.t	α

-- §section §gs{list.≡}

_list.≡_ty	.tyexpr
bool.t	.tygvar
list.t	.tygvar
_list.≡_arg_ty	.tygvar
α	.tyforall	*
at	.tylet	_list.≡_arg_ty	α
	.tylift
	.tyfun	at
	.tylift
	.tyfun	list.t	α
	.tylift
	.tyfun	list.t	α
	.tyref	bool.t

_list.≡_arg_ty	.tyexpr
bool.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	α
	.tylift
	.tyfun	α
	.tyref	bool.t

-- §section §gs{list.compare}

_list.compare_ty	.tyexpr
order.total.t	.tygvar
list.t	.tygvar
α	.tyforall	*
arg.ty	.tylet	list.t	α
	.tylift
	.tyfun	order.total.t	α
	.tyref	order.total.t	arg.ty

-- §section §gs{list.elem}

_list.elem_ty	.tyexpr
eq.t	.tygvar
list.t	.tygvar
bool.t	.tygvar
α	.tyforall	*
	.tylift
	.tyfun	eq.t	α
	.tylift
	.tyfun	α
	.tylift
	.tyfun	list.t	α
	.tyref	bool.t

	.coercion

list.t.out	.tycoercion
list.t	.tygvar
α	.tylambda	*
	.tyinvert
	.tydefinition	list.t	α

list.t.in	.tycoercion
list.t	.tygvar
α	.tylambda	*
	.tydefinition	list.t	α
