	.document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.x.eq.x	_test.x.eq.y	_test.compare.y.x	_test.print.x	_test.print.nl	_test.list.print.x	_test.list.print.nl	_test.rune.advance

_test.x.eq.x	.closure	_test.x.eq.x.c
_test.x.eq.x.label	.string	r/x/\s≡\sr/x/
_test.x.eq.x.test	.closure	_test.x.eq.x.test.c
_test.x.eq.x.fail	.string	r/x/\s≠\sr/x/
_test.x.eq.x.succ	.string	r/x/\s≡\sr/x/

_test.x.eq.y	.closure	_test.x.eq.y_c
_test.x.eq.y_label	.string	r/x/\s≠\sr/y/
_test.x.eq.y_test	.closure	_test.x.eq.y_test_c
_test.x.eq.y_test_succ	.string	r/x/\s≠\sr/y/
_test.x.eq.y_test_fail	.string	r/x/\s≡\sr/y/

_test.compare.y.x	.closure	_test.compare.y.x_c
_test.compare.y.x_label	.string	compare\sr/y/\sr/y/

_test.print.x	.closure	_test.print.x_c
_test.print.x_label	.string	rune.print\sr/x/\s≡\sqq{r/x/}
_test.print.x_test	.closure	_test.print.x_test_c
_test.print.x_test_succ	.string	rune.print\sr/x/\s≡\sqq{r/x/}
_test.print.x_test_fail	.string	rune.print\sr/x/\s≠\sqq{r/x/}
_test.print.x_test_expected	.string	r/x/

_test.print.nl	.closure	_test.print.nl_c
_test.print.nl_label	.string	rune.print\sr/\\n/
_test.print.nl_expected	.string	r/\\n/

_test.list.print.x	.closure	_test.list.print.x_c
_test.list.print.x_label	.string	rune.list.print\sqq{x}\s≡\sqq{qq{x}}
_test.list.print.x_test	.closure	_test.list.print.x_test_c
_test.list.print.x_test_succ	.string	rune.list.print\sqq{x}\s≡\sqq{qq{x}}
_test.list.print.x_test_fail	.string	rune.list.print\sqq{x}\s≠\sqq{qq{x}}
_test.list.print.x_test_expected	.string	qq{x}

_test.list.print.nl	.closure	_test.list.print.nl_c
_test.list.print.nl_label	.string	rune.list.print\sqq{\\n}
_test.list.print.nl_nl	.string	\n
_test.list.print.nl_expected	.string	qq{\\n}

_test.rune.advance	.closure	_test.rune.advance_c
_test.rune.advance_label	.string	rune.advance

_c	.closure	_c_c
_g	.closure	_g_c
_x	.closure	_x.c
_y	.closure	_y_c

_4	.closure	_4_c

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

# §section §gs{r/x/ ≡ r/x/}

_test.x.eq.x.c	.expr
test.property.label	.gvar
_test.x.eq.x.label	.gvar
_test.x.eq.x.test	.gvar
	.app	_test.x.eq.x.label	_test.x.eq.x.test
	.enter	test.property.label

_test.x.eq.x.test.c	.expr
_test.x.eq.x_eq.c	.subcode
test.assert	.gvar
_test.x.eq.x.fail	.gvar
_test.x.eq.x.succ	.gvar
eq	.alloc	_test.x.eq.x_eq.c
	.app	_test.x.eq.x.fail	_test.x.eq.x.succ	eq
	.enter	test.assert

_test.x.eq.x_eq.c	.expr
rune.≡	.gvar
_x	.gvar
	.app	_x	_x
	.enter	rune.≡

# §section §gs{r/x/ ≠ r/y/}

_test.x.eq.y_c	.expr
test.property.label	.gvar
_test.x.eq.y_label	.gvar
_test.x.eq.y_test	.gvar
	.app	_test.x.eq.y_label	_test.x.eq.y_test
	.enter	test.property.label

_test.x.eq.y_test_c	.expr
_test.x.eq.y_eq_c	.subcode
test.deny	.gvar
_test.x.eq.y_test_succ	.gvar
_test.x.eq.y_test_fail	.gvar
eq	.alloc	_test.x.eq.y_eq_c
	.app	_test.x.eq.y_test_succ	_test.x.eq.y_test_fail	eq
	.enter	test.deny

_test.x.eq.y_eq_c	.expr
rune.≡	.gvar
_x	.gvar
_y	.gvar
	.app	_x	_y
	.enter	rune.≡

# §section §gs{compare r/y/ r/x/}

_test.compare.y.x_c	.expr
order.total.ord.t	.tygvar
test.property.label	.gvar
_test.compare.y.x_label	.gvar
test.assert.eq	.gvar
order.total.ord.≡	.gvar
order.total.ord.print	.gvar
rune.compare	.gvar
rune.latin.letter.y	.gvar
rune.latin.letter.x	.gvar
order.total.ord.gt	.gvar
actual	.apply	rune.compare	|	rune.latin.letter.y	rune.latin.letter.x
test	.apply	test.assert.eq	order.total.ord.t	|	order.total.ord.≡	order.total.ord.print	actual	order.total.ord.gt
	.app	_test.compare.y.x_label	test
	.enter	test.property.label

# §section §gs{print r/x/}

_test.print.x_c	.expr
test.property.label	.gvar
_test.print.x_label	.gvar
_test.print.x_test	.gvar
	.app	_test.print.x_label	_test.print.x_test
	.enter	test.property.label

_test.print.x_test_c	.expr
_test.print.x_test_eq_c	.subcode
test.assert	.gvar
_test.print.x_test_succ	.gvar
_test.print.x_test_fail	.gvar
eq	.alloc	_test.print.x_test_eq_c
	.app	_test.print.x_test_succ	_test.print.x_test_fail	eq
	.enter	test.assert

_test.print.x_test_eq_c	.expr
rune.t	.tygvar
_test.print.x_test_eq_x.s_c	.subcode
list.≡	.gvar
rune.≡	.gvar
_test.print.x_test_expected	.gvar
x.s	.alloc	_test.print.x_test_eq_x.s_c
	.app	rune.≡	x.s	_test.print.x_test_expected
	.enter	list.≡	rune.t

_test.print.x_test_eq_x.s_c	.expr
rune.print	.gvar
_x	.gvar
	.app	_x
	.enter	rune.print

# §section §gs{rune.print r/\\n/}

_test.print.nl_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.print.nl_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
rune.print	.gvar
_nl	.gvar
_test.print.nl_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
actual	.apply	rune.print	|	_nl
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	actual	_test.print.nl_expected
	.app	_test.print.nl_label	test
	.enter	test.property.label

# §section §gs{list.print qq\{x\}}

_test.list.print.x_c	.expr
test.property.label	.gvar
_test.list.print.x_label	.gvar
_test.list.print.x_test	.gvar
	.app	_test.list.print.x_label	_test.list.print.x_test
	.enter	test.property.label

_test.list.print.x_test_c	.expr
_test.list.print.x_test_x_c	.subcode
_test.list.print.x_test_x.s_c	.subcode
_test.list.print.x_test_eq_c	.subcode
test.assert	.gvar
_test.list.print.x_test_succ	.gvar
_test.list.print.x_test_fail	.gvar
x	.alloc	_test.list.print.x_test_x_c
x.s	.alloc	_test.list.print.x_test_x.s_c	|	x
eq	.alloc	_test.list.print.x_test_eq_c	|	x.s
	.app	_test.list.print.x_test_succ	_test.list.print.x_test_fail	eq
	.enter	test.assert

_test.list.print.x_test_x_c	.expr
rune.t	.tygvar
list.singleton	.gvar
_x	.gvar
	.app	_x
	.enter	list.singleton	rune.t

_test.list.print.x_test_x.s_c	.expr
list.t	.tygvar
rune.t	.tygvar
rune.print.list	.gvar
x	.fv	list.t	rune.t
	.app	x
	.enter	rune.print.list

_test.list.print.x_test_eq_c	.expr
list.t	.tygvar
rune.t	.tygvar
list.≡	.gvar
rune.≡	.gvar
_test.list.print.x_test_expected	.gvar
x.s	.fv	list.t	rune.t
	.app	rune.≡	x.s	_test.list.print.x_test_expected
	.enter	list.≡	rune.t

# §section §gs{rune.list.print qq{\\n}}

_test.list.print.nl_c	.expr
list.t	.tygvar
rune.t	.tygvar
string.ty	.tylet	list.t	rune.t
test.property.label	.gvar
_test.list.print.nl_label	.gvar
test.assert.eq	.gvar
list.≡	.gvar
rune.≡	.gvar
list.print	.gvar
rune.print.list	.gvar
_test.list.print.nl_nl	.gvar
_test.list.print.nl_expected	.gvar
string.≡	.apply	list.≡	rune.t	|	rune.≡
string.print	.apply	list.print	rune.t	|	rune.print.list
actual	.apply	rune.print.list	|	_test.list.print.nl_nl
test	.apply	test.assert.eq	string.ty	|	string.≡	string.print	actual	_test.list.print.nl_expected
	.app	_test.list.print.nl_label	test
	.enter	test.property.label

# §section §gs{rune.advance}

_test.rune.advance_c	.expr
_test.rune.advance_test_c	.subcode
test.property.label	.gvar
_test.rune.advance_label	.gvar
test	.alloc	_test.rune.advance_test_c
	.app	_test.rune.advance_label	test
	.enter	test.property.label

_test.rune.advance_test_c	.expr
rune.t	.tygvar
_test.rune.advance_test_actual_c	.subcode
test.assert.eq	.gvar
rune.≡	.gvar
rune.print	.gvar
_g	.gvar
actual	.alloc	_test.rune.advance_test_actual_c
	.app	rune.≡	rune.print	actual	_g
	.enter	test.assert.eq	rune.t

_test.rune.advance_test_actual_c	.expr
rune.advance	.gvar
_c	.gvar
_4	.gvar
	.app	_c	_4
	.enter	rune.advance

# §section Fixtures

_c_c	.expr
rune.t.in	.cogvar
c	.rune	c
	.coerce	rune.t.in
	.lift
	.yield	c

_g_c	.expr
rune.t.in	.cogvar
g	.rune	g
	.coerce	rune.t.in
	.lift
	.yield	g

_x.c	.expr
rune.t.in	.cogvar
x	.rune	x
	.coerce	rune.t.in
	.lift
	.yield	x

_y_c	.expr
rune.t.in	.cogvar
y	.rune	y
	.coerce	rune.t.in
	.lift
	.yield	y

_4_c	.expr
natural.t.in	.cogvar
4	.natural	4
	.coerce	natural.t.in
	.lift
	.yield	4
