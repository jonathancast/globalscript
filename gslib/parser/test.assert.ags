	.prefix

	.data

parser.test.assert.fails	.closure	_parser.test.assert.fails_c
_parser.test.assert.fails_right_msg.prefix	.string	Parse\succeeded:\s

	.code

# §section §gs{parser.test.assert.fails}

_parser.test.assert.fails_c	.expr
_parser.test.assert.fails_print_ty	.tygvar
parser.t	.tygvar
list.t	.tygvar
_parser.test.assert.fails_k_ty	.tygvar
parser.err.t	.tygvar
s	.tyarg	*
α	.tyarg	*
_parser.test.assert.fails_k	.subcode
either.t.out	.cogvar
parser.parse	.gvar
print	.larg	_parser.test.assert.fails_print_ty	α
p	.larg	parser.t	s	α
s	.larg	list.t	s
k	.larg	_parser.test.assert.fails_k_ty
	.force	_parser.test.assert.fails_k	α	|	print
	.coerce	either.t.out	parser.err.t	α
	.app	p	s
	.enter	parser.parse	s	α

_parser.test.assert.fails_k	.forcecont
_parser.test.assert.fails_print_ty	.tygvar
either.prim.u	.tygvar
parser.err.t	.tygvar
test.property.t	.tygvar
rune.t	.tygvar
α	.tyfv	*
test.property.false	.gvar
list.<>	.gvar
_parser.test.assert.fails_right_msg.prefix	.gvar
print	.fv	_parser.test.assert.fails_print_ty	α
e	.karg	either.prim.u	parser.err.t	α
	.analyze	e	left	right
		.case	left
err		.fkarg	0	parser.err.t
			.undef	test.property.t
		.case	right
x		.fkarg	0	α
x.s			.apply	print	|	x
msg			.apply	list.<>	rune.t	|	_parser.test.assert.fails_right_msg.prefix	x.s
			.app	msg
			.enter	test.property.false

	.type

_parser.test.assert.fails_print_ty	.tyexpr
list.t	.tygvar
rune.t	.tygvar
α	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	list.t	rune.t

_parser.test.assert.fails_k_ty	.tyexpr
parser.err.t	.tygvar
test.property.t	.tygvar
	.tylift
	.tyfun	parser.err.t
	.tyref	test.property.t
