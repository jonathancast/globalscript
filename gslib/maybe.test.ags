#calculus: gsdl.string-code 0.7
#type: document

	.data

	.closure	_epcode

_tests	.list	test.property.t	_test.eq.just.nothing	_test.eq.just.just	_test.eq.nothing.nothing	_test.fmtgs.nothing	_test.fmtgs.just

_test.eq.just.nothing	.closure	_test.eq.just.nothing_c
_test.eq.just.nothing_label	.string	just\sfalse\s≡\snothing
_test.eq.just.nothing_false	.string	just\sfalse\s≠\snothing
_test.eq.just.nothing_true	.string	just\sfalse\s≡\snothing

_test.eq.just.just	.closure	_test.eq.just.just_c
_test.eq.just.just_label	.string	just\sfalse\s≡\sjust\strue
_test.eq.just.just_false	.string	just\sfalse\s≠\sjust\strue
_test.eq.just.just_true	.string	just\sfalse\s≡\sjust\strue

_test.eq.nothing.nothing	.closure	_test.eq.nothing.nothing_c
_test.eq.nothing.nothing_label	.string	nothing\s≡\snothing
_test.eq.nothing.nothing_false	.string	nothing\s≠\snothing
_test.eq.nothing.nothing_true	.string	nothing\s≡\snothing

_test.fmtgs.nothing	.closure	_test.fmtgs.nothing_c
_test.fmtgs.nothing_label	.string	fmtgs\snothing
_test.fmtgs.nothing_expected	.string	nothing

_test.fmtgs.just	.closure	_test.fmtgs.just_c
_test.fmtgs.just_label	.string	fmtgs\s(just\strue)
_test.fmtgs.just_expected	.string	just\strue

	.code

_epcode	.expr
test.all	.gvar
_tests	.gvar
	.app	_tests
	.enter	test.all

-- §section §gs{just x ≡ nothing}

_test.eq.just.nothing_c	.expr
bool.t	.tygvar
test.property.label	.gvar
_test.eq.just.nothing_label	.gvar
test.deny	.gvar
_test.eq.just.nothing_false	.gvar
_test.eq.just.nothing_true	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.just	.gvar
bool.false	.gvar
maybe.nothing	.gvar
justfalse	.apply	maybe.just	bool.t	|	bool.false
nothing	.apply	maybe.nothing	bool.t
eq	.apply	maybe.≡	bool.t	|	bool.≡	justfalse	nothing
test	.apply	test.deny	|	_test.eq.just.nothing_false	_test.eq.just.nothing_true	eq
	.app	_test.eq.just.nothing_label	test
	.enter	test.property.label

-- §section §gs{just false ≡ just true}

_test.eq.just.just_c	.expr
bool.t	.tygvar
test.property.label	.gvar
_test.eq.just.just_label	.gvar
test.deny	.gvar
_test.eq.just.just_false	.gvar
_test.eq.just.just_true	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.just	.gvar
bool.true	.gvar
bool.false	.gvar
just.true	.apply	maybe.just	bool.t	|	bool.true
just.false	.apply	maybe.just	bool.t	|	bool.false
eq	.apply	maybe.≡	bool.t	|	bool.≡	just.true	just.false
test	.apply	test.deny	|	_test.eq.just.just_false	_test.eq.just.just_true	eq
	.app	_test.eq.just.just_label	test
	.enter	test.property.label

-- §section §gs{nothing ≡ nothing}

_test.eq.nothing.nothing_c	.expr
bool.t	.tygvar
test.property.label	.gvar
_test.eq.nothing.nothing_label	.gvar
test.assert	.gvar
_test.eq.nothing.nothing_false	.gvar
_test.eq.nothing.nothing_true	.gvar
maybe.≡	.gvar
bool.≡	.gvar
maybe.nothing	.gvar
nothing	.apply	maybe.nothing	bool.t
eq	.apply	maybe.≡	bool.t	|	bool.≡	nothing	nothing
test	.apply	test.assert	|	_test.eq.nothing.nothing_false	_test.eq.nothing.nothing_true	eq
	.app	_test.eq.nothing.nothing_label	test
	.enter	test.property.label

-- §section §gs{fmtgs nothing}

_test.fmtgs.nothing_c	.expr
string.t	.tygvar
bool.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs.nothing_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
maybe.nothing	.gvar
fmtgs.prec.app	.gvar
list.nil	.gvar
_test.fmtgs.nothing_expected	.gvar
nothing	.apply	maybe.nothing	bool.t
snil	.apply	list.nil	rune.t
actual	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs	nothing	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs.nothing_expected
	.app	_test.fmtgs.nothing_label	test
	.enter	test.property.label

-- §section §gs{fmtgs (just true)}

_test.fmtgs.just_c	.expr
string.t	.tygvar
bool.t	.tygvar
rune.t	.tygvar
test.property.label	.gvar
_test.fmtgs.just_label	.gvar
test.assert.eq	.gvar
string.≡	.gvar
string.fmtgs	.gvar
maybe.fmtgs	.gvar
bool.fmtgs	.gvar
maybe.just	.gvar
bool.true	.gvar
fmtgs.prec.app	.gvar
list.nil	.gvar
_test.fmtgs.just_expected	.gvar
just.true	.apply	maybe.just	bool.t	|	bool.true
snil	.apply	list.nil	rune.t
actual	.apply	maybe.fmtgs	bool.t	|	bool.fmtgs	just.true	fmtgs.prec.app	snil
test	.apply	test.assert.eq	string.t	|	string.≡	string.fmtgs	actual	_test.fmtgs.just_expected
	.app	_test.fmtgs.just_label	test
	.enter	test.property.label
