#calculus: gsdl.string-code 0.7
#type: prefix

	.data

either.left	.closure	_either.left_c
either.right	.closure	_either.right_c

either.map	.closure	_either.map_c
either.unit	.closure	_either.unit_c

either.mapM	.closure	_either.mapM_c	_either.mapM_ty

either.foldM	.closure	_either.foldM_c	_either.foldM_ty

	.code

-- §section Constructors

_either.left_c	.expr
either.prim.u	.tygvar
either.t.in	.cogvar
α	.tyarg	*
β	.tyarg	*
t	.tylet	either.prim.u	α	β
x	.larg	α
e0	.constr	t	left	0	x
	.coerce	either.t.in	α	β
	.lift
	.yield	e0

_either.right_c	.expr
either.prim.u	.tygvar
either.t.in	.cogvar
α	.tyarg	*
β	.tyarg	*
t	.tylet	either.prim.u	α	β
x	.larg	β
e0	.constr	t	right	0	x
	.coerce	either.t.in	α	β
	.lift
	.yield	e0

-- §section §gs{either.map}

_either.map_c	.expr
_either.map_f_ty	.tygvar
either.t	.tygvar
_either.map_k	.subcode
either.t.out	.cogvar
α	.tyarg	*
β0	.tyarg	*
β1	.tyarg	*
f	.larg	_either.map_f_ty	β0	β1
e	.larg	either.t	α	β0
	.force	_either.map_k
	.coerce	either.t.out	α	β0
	.enter	e

_either.map_k	.forcecont
_either.map_f_ty	.tygvar
either.prim.u	.tygvar
either.t	.tygvar
_either.map_y_c	.subcode
either.right	.gvar
α	.tyfv	*
β0	.tyfv	*
β1	.tyfv	*
f	.fv	_either.map_f_ty	β0	β1
e0	.karg	either.prim.u	α	β0
	.analyze	e0	left	right
		.case	left
e		.fkarg	0	α
			.undef	either.t	α	β1
		.case	right
x		.fkarg	0	β0
y			.closure	_either.map_y_c
			.app	y
			.enter	either.right	α	β1

_either.map_y_c	.expr
_either.map_f_ty	.tygvar
β0	.tyfv	*
β1	.tyfv	*
f	.fv	_either.map_f_ty	β0	β1
x	.fv	β0
	.app	x
	.enter	f

-- §section §gs{either.unit}

_either.unit_c	.expr
either.right	.gvar
α	.tyarg	*
β	.tyarg	*
x	.larg	β
	.app	x
	.enter	either.right	α	β

-- §section §gs{either.mapM}

_either.mapM_c	.expr
_either.mapM_fun_ty	.tygvar
list.t	.tygvar
_either.mapM_k	.subcode
list.t.out	.cogvar
e	.tyarg	*
α	.tyarg	*
β	.tyarg	*
f	.larg	_either.mapM_fun_ty	e	α	β
xn	.larg	list.t	α
	.force	_either.mapM_k
	.coerce	list.t.out	α
	.enter	xn

_either.mapM_k	.forcecont
_either.mapM_fun_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_either.mapM_:_k	.subcode
either.t.out	.cogvar
either.right	.gvar
list.nil	.gvar
e	.tyfv	*
α	.tyfv	*
β	.tyfv	*
list.β.ty	.tylet	list.t	β
f	.fv	_either.mapM_fun_ty	e	α	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_either.mapM_:_k
			.coerce	either.t.out	e	β
			.app	x0
			.enter	f
		.case	nil
nil			.apply	list.nil	β
			.app	nil
			.enter	either.right	e	list.β.ty

_either.mapM_:_k	.forcecont
_either.mapM_fun_ty	.tygvar
list.t	.tygvar
either.prim.u	.tygvar
_either.mapM_:_right_k	.subcode
either.t.out	.cogvar
either.left	.gvar
either.mapM	.gvar
e	.tyfv	*
α	.tyfv	*
β	.tyfv	*
list.β.ty	.tylet	list.t	β
f	.fv	_either.mapM_fun_ty	e	α	β
xn1	.fv	list.t	α
ey0	.karg	either.prim.u	e	β
	.analyze	ey0	left	right
		.case	left
e		.fkarg	0	e
			.app	e
			.enter	either.left	e	list.β.ty
		.case	right
y0		.fkarg	0	β
			.force	_either.mapM_:_right_k
			.coerce	either.t.out	e	list.β.ty
			.app	f	xn1
			.enter	either.mapM	e	α	β

_either.mapM_:_right_k	.forcecont
either.prim.u	.tygvar
list.t	.tygvar
either.left	.gvar
either.right	.gvar
list.:	.gvar
e	.tyfv	*
β	.tyfv	*
list.β.ty	.tylet	list.t	β
y0	.fv	β
e0	.karg	either.prim.u	e	list.β.ty
	.analyze	e0	left	right
		.case	left
e		.fkarg	0	e
			.app	e
			.enter	either.left	e	list.β.ty
		.case	right
ys1		.fkarg	0	list.t	β
ys			.apply	list.:	β	|	y0	ys1
			.app	ys
			.enter	either.right	e	list.β.ty

-- §section §gs{either.foldM}

_either.foldM_c	.expr
_either.foldM_f_ty	.tygvar
list.t	.tygvar
_either.foldM_k	.subcode
e	.tyarg	*
α	.tyarg	*
β	.tyarg	*
f	.larg	_either.foldM_f_ty	e	α	β
z	.larg	β
xn	.larg	list.t	α
	.strict	_either.foldM_k
	.enter	z

_either.foldM_k	.strictcont
_either.foldM_f_ty	.tygvar
list.t	.tygvar
_either.foldM_k1	.subcode
list.t.out	.cogvar
e	.tyfv	*
α	.tyfv	*
β	.tyfv	*
f	.fv	_either.foldM_f_ty	e	α	β
xn	.fv	list.t	α
z0	.karg	β
	.force	_either.foldM_k1
	.coerce	list.t.out	α
	.enter	xn

_either.foldM_k1	.forcecont
_either.foldM_f_ty	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_either.foldM_:_k	.subcode
either.t.out	.cogvar
either.right	.gvar
list.nil	.gvar
e	.tyfv	*
α	.tyfv	*
β	.tyfv	*
f	.fv	_either.foldM_f_ty	e	α	β
z0	.fv	β
xn0	.karg	list.prim.u	α
	.analyze	xn0	:	nil
		.case	:
x0		.fkarg	0	α
xn1		.fkarg	1	list.t	α
			.force	_either.foldM_:_k
			.coerce	either.t.out	e	β
			.app	z0	x0
			.enter	f
		.case	nil
			.app	z0
			.enter	either.right	e	β

_either.foldM_:_k	.forcecont
_either.foldM_f_ty	.tygvar
list.t	.tygvar
either.prim.u	.tygvar
either.left	.gvar
either.foldM	.gvar
e	.tyfv	*
α	.tyfv	*
β	.tyfv	*
f	.fv	_either.foldM_f_ty	e	α	β
xn1	.fv	list.t	α
e0	.karg	either.prim.u	e	β
	.analyze	e0	left	right
		.case	left
err		.fkarg	0	e
			.app	err
			.enter	either.left	e	β
		.case	right
z1		.fkarg	0	β
			.app	f	z1	xn1
			.enter	either.foldM	e	α	β

	.type

-- §section §gs{either.t}

either.t	.tyabstract	**^*^
either.prim.t	.tygvar
α	.tylambda	*
β	.tylambda	*
	.tyref	either.prim.t	α	β

either.prim.t	.tyexpr
either.prim.u	.tygvar
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyref	either.prim.u	α	β

either.prim.u	.tyexpr
_either.prim.u_left.ty	.tygvar
_either.prim.u_right.ty	.tygvar
α	.tylambda	*
β	.tylambda	*
left.ty	.tylet	_either.prim.u_left.ty	α
right.ty	.tylet	_either.prim.u_right.ty	β
	.tysum	left	left.ty	right	right.ty

_either.prim.u_left.ty	.tyexpr
α	.tylambda	*
	.tyubproduct	0	α

_either.prim.u_right.ty	.tyexpr
β	.tylambda	*
	.tyubproduct	0	β

-- §section §gs{either.map}

_either.map_f_ty	.tyexpr
β0	.tylambda	*
β1	.tylambda	*
	.tylift
	.tyfun	β0
	.tyref	β1

-- §section §gs{either.mapM}

_either.mapM_ty	.tyexpr
_either.mapM_fun_ty	.tygvar
list.t	.tygvar
either.t	.tygvar
e	.tyforall	*
α	.tyforall	*
β	.tyforall	*
list.β.ty	.tylet	list.t	β
	.tylift
	.tyfun	_either.mapM_fun_ty	e	α	β
	.tylift
	.tyfun	list.t	α
	.tyref	either.t	e	list.β.ty

_either.mapM_fun_ty	.tyexpr
either.t	.tygvar
e	.tylambda	*
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	α
	.tyref	either.t	e	β

-- §section §gs{either.foldM}

_either.foldM_ty	.tyexpr
_either.foldM_f_ty	.tygvar
list.t	.tygvar
either.t	.tygvar
e	.tyforall	*
α	.tyforall	*
β	.tyforall	*
	.tylift
	.tyfun	_either.foldM_f_ty	e	α	β
	.tylift
	.tyfun	β
	.tylift
	.tyfun	list.t	α
	.tyref	either.t	e	β

_either.foldM_f_ty	.tyexpr
either.t	.tygvar
e	.tylambda	*
α	.tylambda	*
β	.tylambda	*
	.tylift
	.tyfun	β
	.tylift
	.tyfun	α
	.tyref	either.t	e	β

	.coercion

either.t.in	.tycoercion
either.t	.tygvar
α	.tylambda	*
β	.tylambda	*
	.tydefinition	either.t	α	β

either.t.out	.tycoercion
either.t	.tygvar
α	.tylambda	*
β	.tylambda	*
	.tyinvert
	.tydefinition	either.t	α	β
