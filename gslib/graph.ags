	.prefix

# Based on §url{http://en.wikipedia.org/wiki/Path-based_strong_component_algorithm}

	.data

graph.tsort	.closure	_graph.tsort_c	_graph.tsort_ty
_graph.tsort_list	.closure	_graph.tsort_list_c	_graph.tsort_list_ty
_graph.tsort_item	.closure	_graph.tsort_item_c	_graph.tsort_item_ty
_graph.tsort_item_cont1_:_pop.unassigned	.closure	_graph.tsort_item_cont1_:_pop.unassigned_c	_graph.tsort_item_cont1_:_pop.unassigned_ty
_graph.tsort_item_cont1_:_eq_scc0_w	.closure	_graph.tsort_item_cont1_:_eq_scc0_w_c
_graph.tsort_subitems	.closure	_graph.tsort_subitems_c	_graph.tsort_subitems_ty

graph.scc.≡	.closure	_graph.scc.≡_c

graph.scc.fmtgs	.closure	_graph.scc.fmtgs_c

graph.scc.nonrecursive	.closure	_graph.scc.nonrecursive_c

	.code

_graph.tsort_c	.expr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_k_c	.subcode
_graph.tsort_list	.gvar
ordered.set.empty	.gvar
list.nil	.gvar
k	.tyarg	*
v	.tyarg	*
ord	.larg	order.total.t	k
deps	.larg	graph.dependencies.t	k	v
look	.larg	graph.lookup.t	k	v
ks	.larg	list.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
k	.alloc	_graph.tsort_k_c
emitted	.apply	ordered.set.empty	k
unassigned	.apply	list.nil	kv.ty
maybe.group	.apply	list.nil	k
	.app	ord	deps	look	ks	k	emitted	unassigned	maybe.group
	.enter	_graph.tsort_list	k	v

_graph.tsort_k_c	.expr
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
graph.scc.t	.tygvar
list.nil	.gvar
k	.tyfv	*
v	.tyfv	*
scc.ty	.tylet	graph.scc.t	v
emitted	.larg	ordered.set.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
unassigned	.larg	list.t	kv.ty
maybe.group	.larg	list.t	k
	.enter	list.nil	scc.ty

_graph.tsort_list_c	.expr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
list.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_list_k	.subcode
list.t.out	.cogvar
k	.tyarg	*
v	.tyarg	*
ord	.larg	order.total.t	k
deps	.larg	graph.dependencies.t	k	v
look	.larg	graph.lookup.t	k	v
ks	.larg	list.t	k
k	.larg	_graph.tsort_cont.t	k	v
emitted	.larg	ordered.set.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
unassigned	.larg	list.t	kv.ty
maybe.group	.larg	list.t	k
	.force	_graph.tsort_list_k
	.coerce	list.t.out	k
	.enter	ks

_graph.tsort_list_k	.forcecont
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.prim.u	.tygvar
_graph.tsort_list_:_k	.subcode
bool.t.out	.cogvar
ordered.set.elem	.gvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
look	.fv	graph.lookup.t	k	v
k	.fv	_graph.tsort_cont.t	k	v
emitted	.fv	ordered.set.t	k
unassigned	.fv	list.t	kv.ty
maybe.group	.fv	list.t	k
ks0	.karg	list.prim.u	k
	.analyze	ks0	:	nil
		.case	:
k0		.fkarg	0	k
ks1		.fkarg	1	list.t	k
			.force	_graph.tsort_list_:_k
			.coerce	bool.t.out
			.app	ord	k0	emitted
			.enter	ordered.set.elem	k
		.case	nil
			.app	emitted	unassigned	maybe.group
			.enter	k

_graph.tsort_list_:_k	.forcecont
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
bool.prim.u	.tygvar
graph.scc.t	.tygvar	# Temp
_graph.tsort_list_:_false_k	.subcode
maybe.t.out	.cogvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
look	.fv	graph.lookup.t	k	v
k	.fv	_graph.tsort_cont.t	k	v
emitted	.fv	ordered.set.t	k
unassigned	.fv	list.t	kv.ty
maybe.group	.fv	list.t	k
k0	.fv	k
b0	.karg	bool.prim.u	# Is this key already in an SCC?
	.analyze	b0	false	true
		.case	false
			.force	_graph.tsort_list_:_false_k
			.coerce	maybe.t.out	v
			.app	k0
			.enter	look
		.case	true
			.undef	list.t	scc.ty

_graph.tsort_list_:_false_k	.forcecont
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
maybe.prim.u	.tygvar
graph.scc.t	.tygvar	# Temp
_graph.tsort_item	.gvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
k	.fv	_graph.tsort_cont.t	k	v
emitted	.fv	ordered.set.t	k
unassigned	.fv	list.t	kv.ty
maybe.group	.fv	list.t	k
k0	.fv	k
scc.ty	.tylet	graph.scc.t	v	# Temp
mb0	.karg	maybe.prim.u	v
	.analyze	mb0	just	nothing
		.case	just
v0		.fkarg	0	v
			.app	ord	deps	k0	v0	k	emitted	unassigned	maybe.group	# TODO: Wrong continuation!  Continuation should continue with §gs{ks1}
			.enter	_graph.tsort_item	k	v
		.case	nothing
			.undef	list.t	scc.ty

_graph.tsort_item_c	.expr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_item_cont1_c	.subcode
_graph.tsort_subitems	.gvar
list.:	.gvar
k	.tyarg	*
v	.tyarg	*
ord	.larg	order.total.t	k
deps	.larg	graph.dependencies.t	k	v
k0	.larg	k
v0	.larg	v
cont	.larg	_graph.tsort_cont.t	k	v
em	.larg	ordered.set.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
unassigned	.larg	list.t	kv.ty
maybe.group	.larg	list.t	k
	# TODO: Set pre-order of §gs{k0}
kv0	.lrecord	0	k0	1	v0	|	kv.ty
uassigned1	.apply	list.:	kv.ty	|	kv0	unassigned
mbg1	.apply	list.:	k	|	k0	maybe.group
ds	.apply	deps	|	v0
cont1	.alloc	_graph.tsort_item_cont1_c
	.app	ds	cont1	em	uassigned1	mbg1
	.enter	_graph.tsort_subitems	k	v

_graph.tsort_item_cont1_c	.expr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_item_cont1_k0	.subcode
list.t.out	.cogvar
k	.tyfv	*
v	.tyfv	*
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
cont	.fv	_graph.tsort_cont.t	k	v
k0	.fv	k
em	.larg	ordered.set.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
unassigned	.larg	list.t	kv.ty
maybe.group	.larg	list.t	k
	.force	_graph.tsort_item_cont1_k0
	.coerce	list.t.out	k
	.enter	maybe.group

_graph.tsort_item_cont1_k0	.forcecont
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
list.prim.u	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
graph.scc.t	.tygvar	# Temp
_graph.tsort_item_cont1_:_k	.subcode
order.total.ord.t.out	.cogvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
cont	.fv	_graph.tsort_cont.t	k	v
k0	.fv	k
unassigned	.fv	list.t	kv.ty
mbg0	.karg	list.prim.u	k
	.analyze	mbg0	:	nil
		.case	:
mbk0		.fkarg	0	k
mbg1		.fkarg	1	list.t	k
			.force	_graph.tsort_item_cont1_:_k
			.coerce	order.total.ord.t.out
			.app	mbk0	k0
			.enter	ord
		.case	nil
			# TODO: Otherwise, do nothing
			.undef	list.t	scc.ty

_graph.tsort_item_cont1_:_k	.forcecont
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
order.total.ord.prim.u	.tygvar
graph.scc.t	.tygvar
_graph.tsort_item_cont1_:_eq_k	.subcode
_graph.tsort_item_cont1_:_pop.unassigned	.gvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
ord	.fv	order.total.t	k
deps	.fv	graph.dependencies.t	k	v
cont	.fv	_graph.tsort_cont.t	k	v
k0	.fv	k
unassigned	.fv	list.t	kv.ty
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	eq
		.default
			# TODO: Otherwise, do nothing
			.undef	list.t	scc.ty
		.case	eq
			.force	_graph.tsort_item_cont1_:_eq_k
			.app	ord	k0	unassigned
			.enter	_graph.tsort_item_cont1_:_pop.unassigned	k	v

_graph.tsort_item_cont1_:_pop.unassigned_c	.expr
order.total.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_k	.subcode
list.t.out	.cogvar
k	.tyarg	*
v	.tyarg	*
ord	.larg	order.total.t	k
k0	.larg	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
un	.larg	list.t	kv.ty
	.force	_graph.tsort_item_cont1_:_pop.unassigned_k
	.coerce	list.t.out	kv.ty
	.enter	un

_graph.tsort_item_cont1_:_pop.unassigned_k	.forcecont
order.total.t	.tygvar
list.prim.u	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.t	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_res.ty	.tygvar	 # Temp
_graph.tsort_item_cont1_:_pop.unassigned_:_k	.subcode
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
ord	.fv	order.total.t	k
k0	.fv	k
un0	.karg	list.prim.u	kv.ty
	.analyze	un0	:	nil
		.case	:
un0.0		.fkarg	0	kv.ty
un1		.fkarg	1	list.t	kv.ty
			.force	_graph.tsort_item_cont1_:_pop.unassigned_:_k
			.enter	un0.0
		.case	nil
			.undef	_graph.tsort_item_cont1_:_pop.unassigned_res.ty	k	v

_graph.tsort_item_cont1_:_pop.unassigned_:_k	.forcecont
order.total.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.t	.tygvar
_graph.tsort_key.value.u	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_:_k1	.subcode
order.total.ord.t.out	.cogvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
ord	.fv	order.total.t	k
k0	.fv	k
un0.0	.fv	kv.ty
un1	.fv	list.t	kv.ty
kv	.karg	_graph.tsort_key.value.u	k	v
kv.k	.field	0	kv
	.force	_graph.tsort_item_cont1_:_pop.unassigned_:_k1
	.coerce	order.total.ord.t.out
	.app	kv.k	k0
	.enter	ord

_graph.tsort_item_cont1_:_pop.unassigned_:_k1	.forcecont
order.total.ord.prim.u	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.t	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_res.u	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_res.ty	.tygvar	# Temp
list.singleton	.gvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
un0.0	.fv	kv.ty
un1	.fv	list.t	kv.ty
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	eq
		.default
			# §gs{un0.0} is not the same as §gs{k0}
			# TODO: Pop §gs{unassigned} until last key §emph{popped} is §gs{k0}
			.undef	_graph.tsort_item_cont1_:_pop.unassigned_res.ty	k	v
		.case	eq
			# §gs{un0.0} is the same as §gs{k0}
			# TODO: Pop §gs{unassigned} until last key §emph{popped} is §gs{k0}
r.0			.apply	list.singleton	kv.ty	|	un0.0
r			.record	0	r.0	1	un1	|	_graph.tsort_item_cont1_:_pop.unassigned_res.u	k	v
			.lift
			.yield	r

_graph.tsort_item_cont1_:_eq_k	.forcecont
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_res.u	.tygvar
list.t	.tygvar	# Temp
graph.scc.t	.tygvar	# Temp
ordered.set.t	.tygvar	# Temp
_graph.tsort_key.value.ty	.tygvar	# Temp
list.:	.gvar
_graph.tsort_item_cont1_:_eq_scc0_w	.gvar
k	.tyfv	*
v	.tyfv	*
scc.ty	.tylet	graph.scc.t	v
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v	# Temp
deps	.fv	graph.dependencies.t	k	v
cont	.fv	_graph.tsort_cont.t	k	v
pop	.karg	_graph.tsort_item_cont1_:_pop.unassigned_res.u	k	v
ks0	.field	0	pop
scc0	.apply	_graph.tsort_item_cont1_:_eq_scc0_w	k	v	|	deps	ks0
emitted1	.undefined	ordered.set.t	k	# TODO: Add keys emitted to §gs{em}
unassigned1	.undefined	list.t	kv.ty	# Second element of pop
maybe.group1	.undefined	list.t	k	# TODO: Pop §gs{maybe.group}
sccs1	.apply	cont	|	emitted1	unassigned1	maybe.group1	# Call to continuation with the above
	.app	scc0	sccs1
	.enter	list.:	scc.ty

_graph.tsort_item_cont1_:_eq_scc0_w_c	.expr
graph.dependencies.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_item_cont1_:_eq_scc0_w_k	.subcode
list.t.out	.cogvar
k	.tyarg	*
v	.tyarg	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
deps	.larg	graph.dependencies.t	k	v
ks0	.larg	list.t	kv.ty
	# TODO: Allocate the fall-back position (for if we need to issue a recursive SCC for any reason) here
	.force	_graph.tsort_item_cont1_:_eq_scc0_w_k
	.coerce	list.t.out	kv.ty
	.enter	ks0

_graph.tsort_item_cont1_:_eq_scc0_w_k	.forcecont
graph.dependencies.t	.tygvar
list.prim.u	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.t	.tygvar
graph.scc.t	.tygvar	# Temp
_graph.tsort_item_cont1_:_eq_scc0_w_:_k	.subcode
list.t.out	.cogvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
deps	.fv	graph.dependencies.t	k	v
ks0.0	.karg	list.prim.u	kv.ty
	.analyze	ks0.0	:	nil
		.case	:
kv0		.fkarg	0	kv.ty
kvs1		.fkarg	1	list.t	kv.ty
			.force	_graph.tsort_item_cont1_:_eq_scc0_w_:_k
			.coerce	list.t.out	kv.ty
			.enter	kvs1
		.case	nil
			.undef	scc.ty	# Impossible; we must have popped at least §emph{one} key off §{unassigned}!

_graph.tsort_item_cont1_:_eq_scc0_w_:_k	.forcecont
graph.dependencies.t	.tygvar
list.prim.u	.tygvar
_graph.tsort_key.value.ty	.tygvar
graph.scc.t	.tygvar	# Temp
_graph.tsort_item_cont1_:_eq_scc0_w_:_eq_c	.subcode
_graph.tsort_item_cont1_:_eq_scc0_w_:_nil_k	.subcode
bool.t.out	.cogvar
list.elem	.gvar
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
deps	.fv	graph.dependencies.t	k	v
kv0	.fv	kv.ty
ks1.0	.karg	list.prim.u	kv.ty
	.danalyze	ks1.0	nil
		.default
			.undef	scc.ty	# TODO: Group keys so popped into SCC; emit SCC
		.case	nil
eq			.alloc	_graph.tsort_item_cont1_:_eq_scc0_w_:_eq_c
k0			.lfield	0	kv0
v0			.lfield	1	kv0
ds0			.apply	deps	|	v0
			.force	_graph.tsort_item_cont1_:_eq_scc0_w_:_nil_k
			.coerce	bool.t.out
			.app	eq	k0	ds0
			.enter	list.elem	k

_graph.tsort_item_cont1_:_eq_scc0_w_:_eq_c	.expr
bool.t	.tygvar	# Temp
k	.tyfv	*
k0	.larg	k
k1	.larg	k
	.undef	bool.t

_graph.tsort_item_cont1_:_eq_scc0_w_:_nil_k	.forcecont
bool.prim.u	.tygvar
graph.scc.t	.tygvar	# Temp
graph.scc.nonrecursive	.gvar
v	.tyfv	*
scc.ty	.tylet	graph.scc.t	v	# Temp
v0	.fv	v
b0	.karg	bool.prim.u	# Does §gs{k0} depend on itself?
	.analyze	b0	false	true
		.case	false
			.app	v0
			.enter	graph.scc.nonrecursive	v
		.case	true
			.undef	scc.ty	# TODO: Group keys so popped into SCC; emit SCC

_graph.tsort_subitems_c	.expr
list.t	.tygvar
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_subitems_k	.subcode
list.t.out	.cogvar
k	.tyarg	*
v	.tyarg	*
ks	.larg	list.t	k
cont	.larg	_graph.tsort_cont.t	k	v
em	.larg	ordered.set.t	k
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
unassigned	.larg	list.t	kv.ty
maybe.group	.larg	list.t	k
	.force	_graph.tsort_subitems_k
	.coerce	list.t.out	k
	.enter	ks

_graph.tsort_subitems_k	.forcecont
_graph.tsort_cont.t	.tygvar
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
list.prim.u	.tygvar
graph.scc.t	.tygvar	# Temp
k	.tyfv	*
v	.tyfv	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v	# Temp
cont	.fv	_graph.tsort_cont.t	k	v
em	.fv	ordered.set.t	k
unassigned	.fv	list.t	kv.ty
maybe.group	.fv	list.t	k
ks0	.karg	list.prim.u	k
	.analyze	ks0	:	nil
		.case	:
k0		.fkarg	0	k
ks1		.fkarg	1	list.t	k
			# TODO: If §g{k0} has an SCC, ignore it
			# TODO: Otherwise, if §g{k0} has a pre-order number:
				# TODO: If §g{k0} is in §gs{unassigned}:
					# TODO: Pop §gs{unassigned} while pre-order of §gs{list.lisp.head unassigned} > our pre-order
			# TODO: Otherwise, call §gs{topsort_item} on §gs{k0}
			.undef	list.t	scc.ty
		.case	nil
			.app	em	unassigned	maybe.group
			.enter	cont

# §section §gs{graph.scc.≡}

_graph.scc.≡_c	.expr
order.total.t	.tygvar
graph.scc.t	.tygvar
_graph.scc.≡_k0	.subcode
graph.scc.t.out	.cogvar
α	.tyarg	*
cmp	.larg	order.total.t	α
scc0	.larg	graph.scc.t	α
scc1	.larg	graph.scc.t	α
	.force	_graph.scc.≡_k0
	.coerce	graph.scc.t.out	α
	.enter	scc0

_graph.scc.≡_k0	.forcecont
order.total.t	.tygvar
graph.scc.t	.tygvar
graph.scc.prim.u	.tygvar
_graph.scc.≡_k1	.subcode
graph.scc.t.out	.cogvar
α	.tyfv	*
cmp	.fv	order.total.t	α
scc1	.fv	graph.scc.t	α
scc0.0	.karg	graph.scc.prim.u	α
	.force	_graph.scc.≡_k1
	.coerce	graph.scc.t.out	α
	.enter	scc1

_graph.scc.≡_k1	.forcecont
order.total.t	.tygvar
graph.scc.prim.u	.tygvar
bool.t	.tygvar	# Temp
_graph.scc.≡_nonrecursive_nonrecursive_k	.subcode
order.total.ord.t.out	.cogvar
α	.tyfv	*
cmp	.fv	order.total.t	α
scc0.0	.fv	graph.scc.prim.u	α
scc1.0	.karg	graph.scc.prim.u	α
	.analyze	scc0.0	nonrecursive
		.case	nonrecursive
v0		.fkarg	0	α
			.analyze	scc1.0	nonrecursive
				.case	nonrecursive
v1				.fkarg	0	α
					.force	_graph.scc.≡_nonrecursive_nonrecursive_k
					.coerce	order.total.ord.t.out
					.app	v0	v1
					.enter	cmp
	# > :: bool.t

_graph.scc.≡_nonrecursive_nonrecursive_k	.forcecont
order.total.ord.prim.u	.tygvar
bool.t	.tygvar	# Temp
bool.true	.gvar
o0	.karg	order.total.ord.prim.u
	.danalyze	o0	eq
		.default
			.undef	bool.t
		.case	eq
			.enter	bool.true

# §section §gs{graph.scc.fmtgs}

_graph.scc.fmtgs_c	.expr
graph.scc.t	.tygvar
fmtgs.printer.t	.tygvar	# Temp
α	.tyarg	*
scc	.larg	graph.scc.t	α
	.undef	fmtgs.printer.t

# §section §gs{graph.scc.t} constructors

_graph.scc.nonrecursive_c	.expr
graph.scc.prim.u	.tygvar
graph.scc.t.in	.cogvar
α	.tyarg	*
v	.larg	α
res.u	.tylet	graph.scc.prim.u	α
c	.constr	res.u	nonrecursive	0	v
	.coerce	graph.scc.t.in	α
	.lift
	.yield	c

	.type

# §section §gs{graph.scc.t}

graph.scc.t	.tyabstract	**^
graph.scc.prim.u	.tygvar
α	.tylambda	*
	.tylift
	.tyref	graph.scc.prim.u	α

graph.scc.prim.u	.tyexpr
_graph.scc.prim.u_nonrecursive_ty	.tygvar
α	.tylambda	*
nonrecursive_ty	.tylet	_graph.scc.prim.u_nonrecursive_ty	α
	.tysum	nonrecursive	nonrecursive_ty

_graph.scc.prim.u_nonrecursive_ty	.tyexpr
α	.tylambda	*
	.tyubproduct	0	α

# §section §gs{graph.dependencies.t}

graph.dependencies.t	.tyexpr
list.t	.tygvar
k	.tylambda	*
v	.tylambda	*
	.tylift
	.tyfun	v
	.tyref	list.t	k

# §section §gs{graph.lookup.t}

graph.lookup.t	.tyexpr
maybe.t	.tygvar
k	.tylambda	*
v	.tylambda	*
	.tylift
	.tyfun	k
	.tyref	maybe.t	v

# §section §gs{graph.tsort}

_graph.tsort_ty	.tyexpr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
list.t	.tygvar
graph.scc.t	.tygvar
k	.tyforall	*
v	.tyforall	*
scc.ty	.tylet	graph.scc.t	v
	.tylift
	.tyfun	order.total.t	k
	.tylift
	.tyfun	graph.dependencies.t	k	v
	.tylift
	.tyfun	graph.lookup.t	k	v
	.tylift
	.tyfun	list.t	k
	.tyref	list.t	scc.ty

_graph.tsort_key.value.ty	.tyexpr
_graph.tsort_key.value.u	.tygvar
k	.tylambda	*
v	.tylambda	*
	.tylift
	.tyref	_graph.tsort_key.value.u	k	v

_graph.tsort_key.value.u	.tyexpr
k	.tylambda	*
v	.tylambda	*
	.typroduct	0	k	1	v

_graph.tsort_list_ty	.tyexpr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
graph.lookup.t	.tygvar
list.t	.tygvar
_graph.tsort_cont.t	.tygvar
k	.tyforall	*
v	.tyforall	*
	.tylift
	.tyfun	order.total.t	k
	.tylift
	.tyfun	graph.dependencies.t	k	v
	.tylift
	.tyfun	graph.lookup.t	k	v
	.tylift
	.tyfun	list.t	k
	.tylift
	.tyfun	_graph.tsort_cont.t	k	v
	.tyref	_graph.tsort_cont.t	k	v

_graph.tsort_item_ty	.tyexpr
order.total.t	.tygvar
graph.dependencies.t	.tygvar
_graph.tsort_cont.t	.tygvar
k	.tyforall	*
v	.tyforall	*
	.tylift
	.tyfun	order.total.t	k
	.tylift
	.tyfun	graph.dependencies.t	k	v
	.tylift
	.tyfun	k
	.tylift
	.tyfun	v
	.tylift
	.tyfun	_graph.tsort_cont.t	k	v
	.tyref	_graph.tsort_cont.t	k	v

_graph.tsort_item_cont1_:_pop.unassigned_ty	.tyexpr
order.total.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
_graph.tsort_item_cont1_:_pop.unassigned_res.ty	.tygvar
k	.tyforall	*
v	.tyforall	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
	.tylift
	.tyfun	order.total.t	k
	.tylift
	.tyfun	k
	.tylift
	.tyfun	list.t	kv.ty	# §gs{unassigned}
	.tyref	_graph.tsort_item_cont1_:_pop.unassigned_res.ty	k	v

_graph.tsort_item_cont1_:_pop.unassigned_res.ty	.tyexpr
_graph.tsort_item_cont1_:_pop.unassigned_res.u	.tygvar
k	.tylambda	*
v	.tylambda	*
	.tylift
	.tyref	_graph.tsort_item_cont1_:_pop.unassigned_res.u	k	v

_graph.tsort_item_cont1_:_pop.unassigned_res.u	.tyexpr
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
k	.tylambda	*
v	.tylambda	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
list.kv.ty	.tylet	list.t	kv.ty
	.typroduct	0	list.kv.ty	1	list.kv.ty

_graph.tsort_subitems_ty	.tyexpr
list.t	.tygvar
_graph.tsort_cont.t	.tygvar
k	.tyforall	*
v	.tyforall	*
	.tylift
	.tyfun	list.t	k
	.tylift
	.tyfun	_graph.tsort_cont.t	k	v
	.tyref	_graph.tsort_cont.t	k	v

_graph.tsort_cont.t	.tyexpr
ordered.set.t	.tygvar
list.t	.tygvar
_graph.tsort_key.value.ty	.tygvar
graph.scc.t	.tygvar
k	.tylambda	*
v	.tylambda	*
kv.ty	.tylet	_graph.tsort_key.value.ty	k	v
scc.ty	.tylet	graph.scc.t	v
	.tylift
	.tyfun	ordered.set.t	k	# §gs{emitted}; set of keys already included in SCCs
	.tylift
	.tyfun	list.t	kv.ty	# §gs{unassigned}; stack of values not assigned to SCCs
	.tylift
	.tyfun	list.t	k	# §gs{maybe.group}; stack of keys to consider including in the next SCC
	.tyref	list.t	scc.ty

	.coercion

graph.scc.t.in	.tycoercion
graph.scc.t	.tygvar
α	.tylambda	*
	.tydefinition	graph.scc.t	α

graph.scc.t.out	.tycoercion
graph.scc.t	.tygvar
α	.tylambda	*
	.tyinvert
	.tydefinition	graph.scc.t	α
