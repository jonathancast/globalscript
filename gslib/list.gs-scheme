module 'list ∝ 〈
    list.foldl 'f 'z = list.foldr (flip $ strict f) z ∘ list.reverse;

    list.foldr 'f 'z (list.<> 'xn.0 'xn.1) = list.foldr f (list.foldr f z xn.1) xn.0;

    list.foldl 'f 'z nil = list.foldr (flip $ strict f) z (list.reverse nil)
      = list.foldr (flip $ strict f) z nil
      = z
    ;
    list.foldl 'f 'z (list.: 'x 'xn) = list.foldr (flip $ strict f) z (list.reverse (list.: x xn))
      = list.foldr (flip $ strict f) z (list.reverse (list.<> (list.singleton x) xn))
      = list.foldr (flip $ strict f) z (list.<> (list.reverse xn) (list.reverse (list.singleton x)))
      = list.foldr (flip $ strict f) (list.foldr (flip $ strict f) z (list.reverse (list.singleton x))) (list.reverse xn)
      = list.foldl f (list.foldr (flip $ strict f) z (list.reverse (list.singleton x))) xn
      = list.foldl f (list.foldr (flip $ strict f) z (list.singleton x)) xn
      = list.foldl f (list.foldr (flip $ strict f) z (list.: x nil)) xn
      = list.foldl f (flip (strict f) x (list.foldr (flip $ strict f) z nil)) xn
      = list.foldl f (flip (strict f) x z) xn
      = list.foldl f ((strict f z) x) xn
      = list.foldl f ((for (!'z0 ∝ z) f z0) x) xn
      = list.foldl f (for (!'z0 ∝ z) f z0 x) xn
      = for (!'z0 ∝ z) list.foldl f (f z0 x) xn -- Since §gs{list.fold} is strict in §gs{z}
    ;
〉
